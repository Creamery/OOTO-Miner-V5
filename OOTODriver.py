#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 26, 2018 12:01:25 PM

"""
{Description}
The runnable script for OOTO Miner
"""

__author__ = ["Arren Antioquia", "Arces Talavera", "Jet Virtusio",
              "Edmund Gerald Cruz", "Rgee Gallega",
              "Candy Espulgar"]

__copyright__ = "Copyright 2019, TE3D House"
__credits__ = ["Arnulfo Azcarraga"]
__version__ = "3.0"


import sys
import csv
import tkMessageBox
from tkFileDialog import askopenfilename
import copy
import SampleVsPopulation as svp
import SampleVsSample as svs
import ChiTest as ct
import os
import numpy as np
from collections import Counter

import Tkinter as tk

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

import math
import Mother_support
import Color_support
import Icon_support
import UI_support
import PIL.Image
import PIL.ImageTk
import Function_support as FS

import ManualMining as MM
import UI_AutomatedMining as AM

w = None


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0, 0)
    Mother_support.set_Tk_var()
    top = OOTO_Miner(root)
    root.update()
    Mother_support.init(root, top)
    root.mainloop()


def create_OOTO_Miner(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    Mother_support.set_Tk_var()
    top = OOTO_Miner(w)
    Mother_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_OOTO_Miner():
    global w
    w.destroy()
    w = None

class OOTO_Miner:

    def __init__(self, top = None):
        # Configure style maps / themes
        self.configureStyle(top)

        # > MENU BAR
        # self.menubar = Menu(top,font = "TkMenuFont",background = _bgcolor,fg = _fgcolor)
        # top.configure(menu = self.menubar)
        # self.menubar.add_command(label = "About", command = self.showAbout)
        # self.menubar.add_command(label = "Help")

        ''' TAB 1 - DATA (Tabs_t2) '''
        self.configureDataTabElements(self.Tabs_t2)

        ''' TAB 2.1 - TEST (Tabs_t3) '''
        self.MM = self.configureTestTabElements(self.Tabs_t3)


        ''' TAB 2.2 TEST CONSOLE - (Tabs_t3)'''
        self.configureTestTabConsoleElements()

        ''' TAB 3 - INFO (Tabs_t4) '''
        self.configureInfoTabElements()

        self.configureChiTabElements(self.Tabs_t5)

        # Bind functionality to all UI elements
        self.configureBindings()

        # self.initializeVariables()

        # self.enableFilter() # TODO REMOVE!
        # self.labelQueryDataACount.configure(text = "n: " + str(len(self.datasetA['Data'])))
        # self.labelQueryDataBCount.configure(text = "n: " + str(len(self.datasetB['Data'])))

    """ >>> CONFIGURE STYLE MAPS / THEMES <<< """

    # region
    def configureStyle(self, top):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        # else:
        #     self.style.theme_use('clam')

        self.style.configure('.', font = "TkDefaultFont")
        # self.style.map('.',background =
        #     [('selected', _compcolor), ('active',_ana2color)])

        # op.geometry("1000x800+522+139")
        # top.geometry("1000x700+522+139")
        top.geometry("1000x700+222+39")
        top.title("OOTO Miner")
        # root.wm_attributes('-transparentcolor', root['bg'])
        # root.wm_attributes('-transparentcolor', 'black')

        # top.configure(background = _top_bgcolor)
        # top.configure(highlightbackground = _top_bgcolor) #"#d9d9d9"
        # top.configure(highlightcolor = _top_bgcolor) # = "black")

        # Transparency
        # root.wm_attributes('-transparentcolor', root['bg'])

        # Removes the dashed line in tabs
        self.style.layout('Tab',
                          [('Notebook.tab', {'sticky': 'nswe', 'children':
                              [('Notebook.padding', {'side': 'top', 'sticky': 'nswe', 'children':
                              # [('Notebook.focus', {'side': 'top', 'sticky': 'nswe', 'children':
                                  [('Notebook.label', {'side': 'top', 'sticky': ''})],
                                                     # })],
                                                     })],
                                             })]
                          )

        self.Tabs = ttk.Notebook(root, style = 'Tab')  # top)
        self.Tabs.place(relx = 0.0, rely = 0.0, relheight = 1.0, relwidth = 1)
        # self.Tabs.place(relx = 0.0, rely = 0.0, relheight = 1.0, relwidth = 1)
        # self.Tabs.configure(takefocus = "")

        # Top horizontal separator # TODO
        self.rootTopSeparator = ttk.Separator(root, orient = HORIZONTAL)
        self.rootTopSeparator.place(relx = 0, rely = 0, relwidth = 1)

        # > START TAB (0)
        self.Tabs_t2 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_START).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_start_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t2.image = tab_start_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t2, text = "Data", image = tab_start_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)
        # self.Tabs.tab(0, text = _txtpadding+"Data"+_txtpadding, underline = "-1")

        # > TEST TAB (1)

        self.Tabs_t3 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_TEST).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_test_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t3.image = tab_test_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t3, text = "Test", image = tab_test_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)


        # > ABOUT TAB (2)
        self.Tabs_t5 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_INFO).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_info_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t5.image = tab_info_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t5, text = "Chi", image = tab_info_icon,
                      compound = CENTER)


        # > ABOUT TAB (4)
        self.Tabs_t4 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_INFO).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_info_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t4.image = tab_info_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t4, text = "Info", image = tab_info_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)




        self.style.configure("Tab",
                             background = Color_support.TAB_BG_COLOR,
                             foreground = Color_support.FG_COLOR,
                             borderwidth = 0,
                             tabposition = 'wn',
                             height = 50)

        self.style.map("Tab",
                       background = [('selected', Color_support.ACTIVE_COLOR), ('active', Color_support.L_GRAY)])

    # endregion

    """ >>> CONFIGURE MAIN TABS <<< """
    # region

    ''' --> Configure DATA ("DATA") TAB (1) <-- '''

    def configureDataTabElements(self, parentFrame):

        # Create the parent frame
        self.dataTabParentFrame = LabelFrame(parentFrame, bd = 0)
        self.dataTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H)
        self.dataTabParentFrame.configure(background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR)

        # Create the left separator
        self.dataTabLeftSeparator = ttk.Separator(self.dataTabParentFrame, orient = VERTICAL)
        self.dataTabLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        self.configureDatasetElements()
        self.configureVariableDescriptionElements()
        self.configureStartElements()

    ''' --> Configure TEST ("TEST") TAB (2.1) <-- '''

    def configureTestTabElements(self, parentFrame):
        manualMining = MM.ManualMining(parentFrame)
        # self.testTabParentFrame = manualMining.getMainFrame() # LabelFrame(self.Tabs_t3, bd = 0)
        return manualMining
    ''' --> Configure TEST ("TEST") TAB (2.2) <-- '''

    def configureTestTabConsoleElements(self):
        self.testTabConsoleParentFrame = LabelFrame(self.Tabs_t3, bd = 0)
        newRelW = 0.2
        # self.testTabConsoleParentFrame.place(
        #     relx = 1 - newRelW,
        #     rely = self.getRelY(self.testTabParentFrame),
        #     relwidth = newRelW,
        #     relheight = self.getRelH(self.testTabParentFrame)
        # )
        self.testTabConsoleParentFrame.configure(
            background = Color_support.D_BLUE, foreground = Color_support.FG_COLOR
        )

    ''' --> Configure INFO ("INFO") TAB (3) <-- '''
    def configureChiTabElements(self, parentFrame):
        chiFrame = AM.OOTO_Miner(parentFrame)
        self.chiTabParentFrame = chiFrame.getMainFrame()

        self.chiTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H
        )
        self.chiTabParentFrame.configure(
            background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR
        )

    def configureInfoTabElements(self):
        # Creates the parent frame (infoTabParentFrame) that will hold all the elements in INFO TAB 3 (Tabs_t4)
        self.infoTabParentFrame = LabelFrame(self.Tabs_t4, bd = 0)
        self.infoTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H)
        self.infoTabParentFrame.configure(background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR)
        # Create the left separator
        self.infoTabLeftSeparator = ttk.Separator(self.infoTabParentFrame, orient = VERTICAL)
        self.infoTabLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        self.configureAboutElements()

        '''
        BINDING FOR INFO TAB
        '''
        # self.buttonQueryPopulation.bind('<Button-1>', self.querySetPopulation)
        # self.buttonQuerySetDataA.bind('<Button-1>', self.querySetDataA)

    # endregion

    """ >>> FUNCTIONS FOR THE CONFIGURATION OF UI ELEMENTS <<< """
    # region

    ''' --> Elements under DATA ("DATA") TAB (1) <-- '''
    # region

    ''' -> Elements under the DATASET ("Dataset") HEADER <- '''

    def configureDatasetElements(self):

        # Create the Dataset parent frame
        self.labelFrameDataset = LabelFrame(self.dataTabParentFrame, bd = 0)
        self.labelFrameDataset.configure(
            background = Color_support.DATASET_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_DATASET)
        self.labelFrameDataset.place(
            relx = UI_support.TAB_DATASET_REL_X, rely = UI_support.TAB_DATASET_REL_Y + UI_support.TAB_CHILD_PADDING_TOP,
            relwidth = UI_support.TAB_DATASET_REL_W, relheight = UI_support.TAB_DATASET_REL_H)

        # Create the Dataset element parent frame
        self.labelFrameDatasetElements = LabelFrame(self.labelFrameDataset, bd = 0)
        self.labelFrameDatasetElements.configure(
            background = Color_support.DATASET_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameDatasetElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # DATASET ELEMENTS

        # Variable Description label
        self.labelInitialVarDesc = Label(self.labelFrameDatasetElements)
        self.labelInitialVarDesc.place(
            relx = UI_support.TAB_3CHILD_LBL_REL_X, rely = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL,
            relwidth = UI_support.TAB_3CHILD_LBL_REL_W, relheight = UI_support.TAB_3CHILD_LBL_REL_H_SMALL)
        self.labelInitialVarDesc.configure(
            background = Color_support.DATASET_LBL_BG, foreground = Color_support.DATASET_LBL_FG,
            text = UI_support.LBL_DATASET_VARDESC,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Previous values (1.1)
        prevLblRelX = float(self.labelInitialVarDesc.place_info()['relx'])
        prevLblRelY = float(self.labelInitialVarDesc.place_info()['rely'])
        prevLblRelW = float(self.labelInitialVarDesc.place_info()['relwidth'])
        prevLblRelH = float(self.labelInitialVarDesc.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Variable Description entry
        self.entryInitialVarDesc = Entry(self.labelFrameDatasetElements)
        self.entryInitialVarDesc.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_ENTRY_REL_W, relheight = prevLblRelH)
        self.entryInitialVarDesc.configure(
            background = Color_support.DATASET_ENTRY_BG, foreground = Color_support.DATASET_ENTRY_FG,
            bd = 1,
            font = UI_support.FONT_DEFAULT,
            disabledforeground = Color_support.FG_DISABLED_COLOR
        )

        # Previous values (1.2)
        prevEntryRelX = float(self.entryInitialVarDesc.place_info()['relx'])
        prevEntryRelW = float(self.entryInitialVarDesc.place_info()['relwidth'])
        prevEntryRelH = float(self.entryInitialVarDesc.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevEntryRelX + prevEntryRelW

        # Variable Description upload
        self.buttonInitialVarDesc = Button(self.labelFrameDatasetElements)
        self.buttonInitialVarDesc.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_BTN_REL_W, relheight = prevLblRelH)

        self.buttonInitialVarDesc.configure(
            background = Color_support.DATASET_BTN_BG, foreground = Color_support.DATASET_BTN_FG,
            text = UI_support.BTN_DATASET_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.DATASET_BTN_BG_ACTIVE,
            activeforeground = Color_support.DATASET_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        # Previous values (1.3)
        prevBtnRelX = float(self.buttonInitialVarDesc.place_info()['relx'])
        prevBtnRelY = float(self.buttonInitialVarDesc.place_info()['rely'])
        prevBtnRelW = float(self.buttonInitialVarDesc.place_info()['relwidth'])
        prevBtnRelH = float(self.buttonInitialVarDesc.place_info()['relheight'])

        newRelY = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL + prevBtnRelY + prevBtnRelH

        # Population Dataset label
        self.labelInitialVarDesc = Label(self.labelFrameDatasetElements)
        self.labelInitialVarDesc.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelInitialVarDesc.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_DATASET_POPULATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Population Dataset entry
        self.entryQueryPopulation = Entry(self.labelFrameDatasetElements)
        self.entryQueryPopulation.place(
            relx = prevEntryRelX, rely = newRelY,
            relwidth = prevEntryRelW, relheight = prevEntryRelH)
        self.entryQueryPopulation.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Population Dataset upload
        self.buttonQueryPopulation = Button(self.labelFrameDatasetElements)
        self.buttonQueryPopulation.place(
            relx = prevBtnRelX, rely = newRelY,
            relwidth = prevBtnRelW, relheight = prevBtnRelH)
        self.buttonQueryPopulation.configure(
            background = Color_support.DATASET_BTN_BG, foreground = Color_support.DATASET_BTN_FG,
            text = UI_support.BTN_DATASET_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.DATASET_BTN_BG_ACTIVE,
            activeforeground = Color_support.DATASET_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

    ''' -> Elements under the VARIABLE DESCRIPTION ("Variable Description Generator") HEADER <- '''

    def configureVariableDescriptionElements(self):
        prevFrameRelY = float(self.labelFrameDataset.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameDataset.place_info()['relheight'])
        newFrameRelY = UI_support.TAB_VARDESC_REL_Y + prevFrameRelY + prevFrameRelH

        # Create the Variable Description Generator parent frame
        self.labelFrameVariableDescriptor = LabelFrame(self.dataTabParentFrame, bd = 0)
        self.labelFrameVariableDescriptor.configure(
            background = Color_support.VARDESC_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_VARDESC)
        self.labelFrameVariableDescriptor.place(
            relx = UI_support.TAB_VARDESC_REL_X, rely = newFrameRelY,
            relwidth = UI_support.TAB_VARDESC_REL_W, relheight = UI_support.TAB_VARDESC_REL_H)

        # Create the Variable Descriptor element parent frame
        self.labelFrameVarDescElements = LabelFrame(self.labelFrameVariableDescriptor, bd = 0)
        self.labelFrameVarDescElements.configure(
            background = Color_support.VARDESC_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameVarDescElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # > VARDESC ELEMENTS

        # Variable File

        # Variable File label
        self.labelVariableFile = Label(self.labelFrameVarDescElements)
        self.labelVariableFile.place(
            relx = UI_support.TAB_3CHILD_LBL_REL_X, rely = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL,
            relwidth = UI_support.TAB_3CHILD_LBL_REL_W, relheight = UI_support.TAB_3CHILD_LBL_REL_H_SMALL)
        self.labelVariableFile.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_VARDESC_VARFILE,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)


        # Previous values (1.1)
        prevLblRelX = float(self.labelVariableFile.place_info()['relx'])
        prevLblRelY = float(self.labelVariableFile.place_info()['rely'])
        prevLblRelW = float(self.labelVariableFile.place_info()['relwidth'])
        prevLblRelH = float(self.labelVariableFile.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Variable File entry
        self.entryVariableFile = Entry(self.labelFrameVarDescElements)
        self.entryVariableFile.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_ENTRY_REL_W, relheight = prevLblRelH)
        self.entryVariableFile.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.2)
        prevEntryRelX = float(self.entryVariableFile.place_info()['relx'])
        prevEntryRelW = float(self.entryVariableFile.place_info()['relwidth'])
        prevEntryRelH = float(self.entryVariableFile.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevEntryRelX + prevEntryRelW

        # Variable File upload
        self.buttonVariableFile = Button(self.labelFrameVarDescElements)
        self.buttonVariableFile.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_BTN_REL_W, relheight = prevLblRelH)
        self.buttonVariableFile.configure(
            background = Color_support.VARDESC_BTN_BG, foreground = Color_support.VARDESC_BTN_FG,
            text = UI_support.BTN_VARDESC_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.VARDESC_BTN_BG_ACTIVE,
            activeforeground = Color_support.VARDESC_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.3)
        prevBtnRelX = float(self.buttonVariableFile.place_info()['relx'])
        prevBtnRelY = float(self.buttonVariableFile.place_info()['rely'])
        prevBtnRelW = float(self.buttonVariableFile.place_info()['relwidth'])
        prevBtnRelH = float(self.buttonVariableFile.place_info()['relheight'])

        newRelY = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL + prevBtnRelY + prevBtnRelH

        # Values File label
        self.labelValuesFile = Label(self.labelFrameVarDescElements)
        self.labelValuesFile.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelValuesFile.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_VARDESC_VALFILE,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Values File entry
        self.entryValuesFile = Entry(self.labelFrameVarDescElements)
        self.entryValuesFile.place(
            relx = prevEntryRelX, rely = newRelY,
            relwidth = prevEntryRelW, relheight = prevEntryRelH)
        self.entryValuesFile.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Values File upload
        self.buttonValuesFile = Button(self.labelFrameVarDescElements)
        self.buttonValuesFile.place(
            relx = prevBtnRelX, rely = newRelY,
            relwidth = prevBtnRelW, relheight = prevBtnRelH)
        self.buttonValuesFile.configure(
            background = Color_support.VARDESC_BTN_BG, foreground = Color_support.VARDESC_BTN_FG,
            text = UI_support.BTN_VARDESC_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.VARDESC_BTN_BG_ACTIVE,
            activeforeground = Color_support.VARDESC_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

    ''' -> Elements under the START (" ") HEADER <- '''

    def configureStartElements(self):
        # START
        # Always update to reflect height and width values in winfo when using relheight/relwidth
        self.buttonValuesFile.update()
        self.labelFrameVariableDescriptor.update()

        # print "height " + str(self.buttonValuesFile.winfo_height())
        # print "width " + str(self.buttonValuesFile.winfo_width())

        buttonX = 0.5  # self.labelFrameVariableDescriptor.winfo_x()

        prevFrameRelY = float(self.labelFrameVariableDescriptor.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameVariableDescriptor.place_info()['relheight'])
        buttonY = UI_support.TAB_VARDESC_REL_Y + prevFrameRelY + prevFrameRelH

        buttonHeight = self.buttonValuesFile.winfo_height()
        buttonWidth = self.buttonValuesFile.winfo_width()

        self.buttonStartDatasetUpload = Button(self.dataTabParentFrame)
        self.buttonStartDatasetUpload.place(
            relx = buttonX, rely = buttonY,
            width = buttonWidth, height = buttonHeight, anchor = CENTER)
        self.buttonStartDatasetUpload.configure(
            background = Color_support.START_BTN_BG, foreground = Color_support.START_BTN_FG,
            text = UI_support.BTN_START,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.START_BTN_BG_ACTIVE, activeforeground = Color_support.START_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        '''
        self.buttonStartVariableDescriptor = Button(self.dataTabParentFrame)
        self.buttonStartVariableDescriptor.place(
            relx = buttonX, rely = buttonY,
            width = buttonWidth, height = buttonHeight, anchor = CENTER)
        self.buttonStartVariableDescriptor.configure(
            background = Color_support.START_BTN_BG, foreground = Color_support.START_BTN_FG,
            text = UI_support.BTN_START,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.START_BTN_BG_ACTIVE, activeforeground = Color_support.START_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        '''


    ''' --> Elements under TEST ("TEST") TAB (2) <-- '''
    # MOVED

    ''' --> Elements under INFO ("INFO") TAB (2) <-- '''
    # MOVED

    # region
    def configureAboutElements(self):
        # Create the About parent frame
        self.labelFrameAbout = LabelFrame(self.infoTabParentFrame, bd = 0)
        self.labelFrameAbout.configure(
            background = Color_support.ABOUT_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_ABOUT)
        self.labelFrameAbout.place(
            relx = UI_support.TAB_ABOUT_REL_X, rely = UI_support.TAB_ABOUT_REL_Y + UI_support.TAB_CHILD_PADDING_TOP,
            relwidth = UI_support.TAB_ABOUT_REL_W, relheight = UI_support.TAB_ABOUT_REL_H)

        # Create the About element parent frame
        self.labelFrameAboutElements = LabelFrame(self.labelFrameAbout, bd = 0)
        self.labelFrameAboutElements.configure(
            background = Color_support.ABOUT_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameAboutElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # > ABOUT ELEMENTS
        # Version label
        self.labelVersion = Label(self.labelFrameAboutElements)
        self.labelVersion.place(
            relx = UI_support.TAB_CHILD_LBL_REL_X, rely = UI_support.TAB_CHILD_LBL_REL_Y,
            relwidth = UI_support.TAB_CHILD_LBL_REL_W, relheight = UI_support.TAB_CHILD_LBL_REL_H)
        self.labelVersion.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_VER,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Previous values (1.1)
        prevLblRelX = float(self.labelVersion.place_info()['relx'])
        prevLblRelY = float(self.labelVersion.place_info()['rely'])
        prevLblRelW = float(self.labelVersion.place_info()['relwidth'])
        prevLblRelH = float(self.labelVersion.place_info()['relheight'])

        newRelX = UI_support.TAB_CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Version text
        self.labelVersionText = Label(self.labelFrameAboutElements)
        self.labelVersionText.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_CHILD_STR_REL_W, relheight = prevLblRelH)
        self.labelVersionText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_VER,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.2)
        prevStrRelX = float(self.labelVersionText.place_info()['relx'])
        prevStrRelY = float(self.labelVersionText.place_info()['rely'])
        prevStrRelW = float(self.labelVersionText.place_info()['relwidth'])
        prevStrRelH = float(self.labelVersionText.place_info()['relheight'])

        newRelY = UI_support.TAB_CHILD_LBL_REL_Y + prevLblRelY + prevLblRelH

        # Author label
        self.labelAuthor = Label(self.labelFrameAboutElements)
        self.labelAuthor.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelAuthor.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_AUTHOR,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Author text
        self.labelAuthorText = Label(self.labelFrameAboutElements)
        self.labelAuthorText.place(
            relx = prevStrRelX, rely = newRelY,
            relwidth = prevStrRelW, relheight = prevStrRelH)
        self.labelAuthorText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_AUTHOR,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous Y values
        prevLblRelY = float(self.labelAuthor.place_info()['rely'])
        prevStrRelY = float(self.labelAuthorText.place_info()['rely'])

        newRelY = UI_support.TAB_CHILD_LBL_REL_Y + prevLblRelY + prevLblRelH

        # Affiliation label
        self.labelAffiliation = Label(self.labelFrameAboutElements)
        self.labelAffiliation.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelAffiliation.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_AFFILIATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Affiliation text
        self.labelAffiliationText = Label(self.labelFrameAboutElements)
        self.labelAffiliationText.place(
            relx = prevStrRelX, rely = newRelY,
            relwidth = prevStrRelW, relheight = prevStrRelH)
        self.labelAffiliationText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_AFFILIATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

    # endregion

    """ >>> HELPER FUNCTIONS UI ELEMENTS <<< """

    # region
    def createCornerImage(self, cornerParent):

        labelNE = Label(cornerParent)
        im = PIL.Image.open(
            Icon_support.CORNER_ROUND_NE)  # .resize(Icon_support.CORNER_ICO_SIZE_SMALL, PIL.Image.ANTIALIAS)
        corner_round_ne = PIL.ImageTk.PhotoImage(im)
        labelNE.place(
            relx = 0,
            rely = 0,
            relwidth = 1,
            relheight = 1
        )
        labelNE.configure(
            image = corner_round_ne)
        labelNE.image = corner_round_ne  # < ! > Required to make images appear
        labelNE.configure(background = Color_support.PALE_ORANGE)  # cornerParent['background'])
        labelNE.pack()
        # labelNE.pack(side = RIGHT, fill = Y, expand = True, anchor = CENTER)

    def createLabelSeparator(self, separatorParent, span, isVertical, color, thickness = 1, coordinate = 0,
                             specifiedAnchor = NW):

        separatorHolder = Label(separatorParent)
        if isVertical:
            newRelY = (1 - (1 - span)) / 2
            separatorHolder.place(
                relx = coordinate,
                rely = newRelY,
                relheight = span,  # TODO To adjust border height, just adjust this
                width = thickness,
                anchor = specifiedAnchor
            )
        else:
            newRelX = (1 - (1 - span)) / 2
            separatorHolder.place(
                relx = newRelX,
                rely = coordinate,
                relwidth = span,  # TODO To adjust border height, just adjust this
                height = thickness,
                anchor = specifiedAnchor
            )
        separatorHolder.configure(background = color)
        return separatorHolder

    def createLabelBorders(self, borderParent, color = Color_support.DISABLED_D_BLUE):

        # COLORED SEPARATOR
        topBorder = self.createLabelSeparator(
            borderParent, 1,
            False, color
        )

        bottomBorder = self.createLabelSeparator(
            borderParent, 1,
            False, color,
            coordinate = 0.9985
        )

        leftBorder = self.createLabelSeparator(
            borderParent, 1,
            True, color
        )

        rightBorder = self.createLabelSeparator(
            borderParent, 1,
            True, color,
            coordinate = 0.995
        )

    # endregion

    """ >>> FUNCTIONS CALLED FOR BINDING ELEMENTS <<< """
    # region
    ''' --> General call to all binding sub-functions <-- '''

    def configureBindings(self):
        self.configureDataTabBindings()
        # self.configureTestTabBindings()

    ''' --> Binding elements under the DATA ("DATA") TAB (1) <-- '''

    # region
    def configureDataTabBindings(self):
        # TODO Add integrity check - if ENTRY is edited, change the file input
        self.buttonInitialVarDesc.bind('<Button-1>', self.selectInitVarDesc)
        self.buttonQueryPopulation.bind('<Button-1>', self.selectSetPopulation)

        self.buttonVariableFile.bind('<Button-1>', self.getVariableFile)
        self.buttonValuesFile.bind('<Button-1>', self.getValuesFile)

        # self.buttonStartVariableDescriptor.bind('<Button-1>', self.makeInitialVarDesc) ### TODO
        self.buttonStartDatasetUpload.bind('<Button-1>', self.uploadDataset)

    # endregion

    ''' --> Binding elements under the TEST ("TEST") TAB (2) <-- '''
    # MOVED

    """ >>> FUNCTIONS CALLED BY BOUNDED ELEMENTS (e.g. buttons, listboxes) <<< """

    ''' --> Elements under the DATA ("DATA") TAB (1) <-- '''
    # region
    ''' (?) Generates the initial variable description '''

    def makeInitialVarDesc(self, evt):
        varFileDir = self.entryVariableFile.get()
        valFileDir = self.entryValuesFile.get()

        # tkMessageBox.showinfo("Work in progress",'Make the Initial Variable Descriptor! (WIP)') # TODO!!
        print self.entryQueryPopulation.get()[-4:]

        if self.entryInitialVarDesc.get()[-4:] != ".csv":  # TODO Properly check for valid files
            tkMessageBox.showinfo("System Message", "Please enter a valid Variable Description CSV file")  # TODO!!

        elif self.entryQueryPopulation.get()[-4:] != ".csv":
            tkMessageBox.showinfo("System Message", "Please enter a valid Population Dataset CSV file")  # TODO!!

        else:
            tkMessageBox.showinfo("System Message", "Dataset successfully uploaded!")  # TODO!!
            self.Tabs.select(UI_support.TAB_TEST_INDEX)
        return "break"

    ''' (?) Uploads the variable file '''

    def getVariableFile(self, evt):
        varFileDir = askopenfilename(title = "Select variable file",
                                     filetypes = (("txt files", "*.txt"), ("all files", "*.*")))
        self.entryVariableFile.delete(0, END)
        self.entryVariableFile.insert(0, varFileDir)
        return "break"

    ''' (?) Uploads the values file '''

    def getValuesFile(self, evt):
        valFileDir = askopenfilename(title = "Select values file",
                                     filetypes = (("txt files", "*.txt"), ("all files", "*.*")))
        self.entryValuesFile.delete(0, END)
        self.entryValuesFile.insert(0, valFileDir)
        return "break"

    ''' Start dataset upload '''

    def uploadDataset(self, evt):
        # Upload initVarDesc (Variable Description)

        if not self.hasUploadedVariableDescription:  # Check if variable description was uploaded
            tkMessageBox.showerror("Error 1: Upload Variable description",
                                   "Please select a valid variable description file.")
            return "break"
        else:
            self.MM.readFeatures(self.initVarDisc)

            # else:
            # tkMessageBox.showinfo("Variable description set", "Variable description uploaded")
            # # getCommonGroups(features)

        # Upload populationDir (Population Dataset)
        if not self.hasUploadedPopulation:  # Check if population dataset was uploaded
            tkMessageBox.showerror("Error: Upload Population Dataset",
                                   "Please select a population dataset file.")
            return "break"
        else:
            global populationDir

            populationDataset = FS.readCSVDict(populationDir)
            isUploaded = self.MM.uploadDataset(populationDir, populationDataset)
            if (isUploaded):
                tkMessageBox.showinfo("Success: Upload Dataset",
                                       "Dataset successfully uploaded!")
                self.Tabs.select(UI_support.TAB_TEST_INDEX)
            else:
                tkMessageBox.showerror("Error: Upload Dataset",
                                       "Dataset upload failed, please check input files.")

        return "break"

    ''' Selects the variable description file '''

    def selectInitVarDesc(self, evt):
        self.hasUploadedVariableDescription = False

        self.initVarDisc = askopenfilename(title = "Select file",
                                           filetypes = (("csv files", "*.csv"), ("all files", "*.*")))

        if len(self.initVarDisc) == 0:
            tkMessageBox.showerror("Error: Upload Variable description",
                                   "Please select a valid variable description file.")
        else:
            self.hasUploadedVariableDescription = True
            self.entryInitialVarDesc.delete(0, END)
            self.entryInitialVarDesc.insert(0, self.initVarDisc)

        return "break"  # this "unsinks" the button after opening the file explorer

    ''' Selects the population module file '''

    def selectSetPopulation(self, evt):
        self.hasUploadedPopulation = False

        global populationDir
        populationDir = askopenfilename(title = "Select file",
                                        filetypes = (("csv files", "*.csv"), ("all files", "*.*")))

        if len(populationDir) == 0:
            tkMessageBox.showerror("Error: Upload error", "Please select a valid population dataset.")
        else:
            self.hasUploadedPopulation = True
            self.entryQueryPopulation.delete(0, END)
            self.entryQueryPopulation.insert(0, populationDir)
        return "break"

    # endregion



if __name__ == '__main__':
    vp_start_gui()
