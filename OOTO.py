#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 26, 2018 12:01:25 PM

import sys
import csv
import tkMessageBox
from tkFileDialog import askopenfilename
import copy
import SampleVsPopulation as svp
import SampleVsSample as svs
import ChiTest as ct
import os
import numpy as np
from collections import Counter

import Tkinter as tk
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import Mother_support
import Color_support
import Icon_support
import UI_support
import PIL.Image
import PIL.ImageTk

w = None

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0, 0)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (root)
    root.update()
    Mother_support.init(root, top)
    root.mainloop()




def create_OOTO_Miner(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (w)
    Mother_support.init(w, top, *args, **kwargs)
    return (w, top)



def destroy_OOTO_Miner():
    global w
    w.destroy()
    w = None




'''
Reads features and their responses from the Variable Description file
'''
def readFeatures(filename, varMark):
    features = []
    try:
        with open(filename) as f:
            reader = csv.reader(f)
            for row in reader:
                if(row[0] == varMark):
                    new_feature = {'Description':row[2], 'Code':row[1], 'Responses':[]}
                    features.append(new_feature)
                else:
                    new_response = {'Group':row[0], 'Code':row[1], 'Description':row[2]}
                    new_feature['Responses'].append(new_response)
        return features
    except:
        return []



'''
Returns all of the group codes that are present in all features.
'''
def getCommonGroups(features):
    groupCodes = []
    print str(groupCodes)
    for i in range(0, len(features)):
        if i == 0:
            for response in features[i]['Responses']:
                groupCodes.append(response['Group'])
        else:
            for g in groupCodes:
                isFound = False
                for response in features[i]['Responses']:
                    if g == response['Group']:
                        isFound = True
                        break
                if isFound == False:
                    groupCodes.remove(g)
    
    print str(groupCodes)
                


'''
Reads a .csv file and returns a list of dictionaries where the header of the file 
has all of the dictionary keys
'''
def readCSVDict(filename):
    rows = csv.DictReader(open(filename))
    return rows   

'''
Writes a list of dictionaries into a .csv file
'''
def writeCSVDict(filename, dataset):
    with open(filename, 'wb') as f:
        w = csv.DictWriter(f, dataset[0].keys())
        w.writeheader()
        w.writerows(dataset)

'''
Writes a set of rows into a .csv file given the filename
'''
def writeOnCSV(rows, filename):
	with open(filename, 'wb') as f:
	    writer = csv.writer(f)
	    writer.writerows(rows)

'''
Returns a new dataset by filtering from the old one based on a feature and its selected values
'''
def filterDataset(dataset, feature, responses):
    new_data = []
    for record in dataset['Data']:
        for response in responses:
            if record[feature['Code']] == response['Code']:
                new_data.append(copy.deepcopy(record))
                break
    
    return new_data

'''
Clears all of the filters of the dataset and resets the data back to that of
the uploaded population file. 
'''
def resetDataset():
    global populationDir
    new_dataset = {'Data':[], 'Filter Features':[]}
    try:
        populationDataset = readCSVDict(populationDir)
        for record in populationDataset:
            new_dataset['Data'].append(record)
        return new_dataset
    except:
        new_dataset = {'Data': [], 'Filter Features': []}
        return new_dataset


'''
For every feature, each value falls into a group.
Each value in the dataset gets converted to its corresponding group.

If a value in the dataset does not exist in the feature values in the variable description,
its group is automatically assigned to -1.

If a feature in the dataset does not exist in the variable description, assign that value to -1.
'''
def convertDatasetValuesToGroups(dataset, features):
    #response['Code'] == record[self.datasetA['Feature']['Code']] for response in self.datasetA['Selected Responses']
    for record in dataset['Data']:
        for feature in features:
            converted = False
            if feature['Code'] in record.keys(): #If the feature code exists in the record
                for response in feature['Responses']:
                    if record[feature['Code']] == response['Code']:
                        record[feature['Code']] = response['Group']
                        converted = True
                if not converted:
                    record[feature['Code']] = '-1.0'
            else:
                record[feature['Code']] = '-1.0'
    return dataset

'''
Remove the files given their filenames.
'''
def removeFiles(fileNames):
    for fileName in fileNames:
        os.remove(fileName)

'''
Returns filename of the dataset based on the features it was filtered by and selected values for 
each feature
'''
def makeFileName(dataset):
    fileName = ''
    for filterFeature in dataset['Filter Features']:
        featureCode = copy.deepcopy(filterFeature['Code'])
        fileName = fileName + "_" + str(featureCode)
        for i in range(0, len(filterFeature['Selected Responses'])):
            if i == 0:
                fileName = fileName + "("
            fileName = fileName + filterFeature['Selected Responses'][i]['Code'] + " "
            if i == (len(filterFeature['Selected Responses'])-1):
                fileName = fileName + ")"
    fileName = fileName + ".csv"
    return fileName

'''
Writes converted features (where the values are converted to their groups)
into a csv file
'''
def makeUpdatedVariables(features, fileName):
    with open(fileName, "wb") as csv_file:
        writer = csv.writer(csv_file, delimiter = ',')
        for feature in features:
            featureRow = []
            featureRow.append('^')
            featureRow.append(feature['Code'])
            featureRow.append(feature['Description'])
            #Write that featureRow
            writer.writerow(featureRow)
            groups = [] 
            for response in feature['Responses']: 
                responseRow = []
                if response['Group'] not in groups:
                    groups.append(response['Group'])
                    responseRow.append(response['Group'])
                    responseRow.append('Group ' + response['Group'])
                    #Write that responseRow
                    writer.writerow(responseRow)

'''
Concantenates values of a list into a string using a delimiter
Example:
if delimiter is ':'
[1,2,3] -> '1:2:3'
['a',2,'x'] -> 'a:2:x'
'''
def concatListToString(lst, delimiter):
    listString = ""
    for i in range(0, len(lst)):
        if(i == (len(lst)-1)):
            listString = listString + str(lst[i])
        else:
            listString = listString + str(lst[i]) + delimiter
    
    return listString

'''
Concatenates all of the focus feature values together into a string
'''
def getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues):
    allValues = ""
    selectedValues = ""
    responseCodes = []

    for response in selectedFocusFeature['Responses']:
        responseCodes.append(response['Code'])

    allValues = concatListToString(responseCodes, ':')
    selectedValues = concatListToString(selectedFocusFeatureValues, ':')

    return allValues, selectedValues
  
'''
Finds the feature and displays its responses.

If the feature being searched is the one that will be focused on for Z-Test between
two samples, it will also display all of the proportions, frequencies and total for each value of that 
feature
'''
# def findFeature(entryFeat, listFeat, dataset, *args):
def findFeature(entryFeat, listFeat, dataset, populationDatasetOriginal, isPrintingError = False, *args):
        # Here is how to get the value from entryFeatA
        featCode = entryFeat
        print "Entered feature code: " + featCode
        arrTempItems = []
        found = False
        hasFocusFeature = False
        #Get proper list of features from initial variable description
        for feature in features:
            if feature['Code'] == featCode:
                found = True
                for arg in args:
                    if arg == "Dataset_Feature":
                        dataset['Feature'] = copy.deepcopy(feature)
                        populationDatasetOriginal['Feature'] = copy.deepcopy(feature)

                    if arg == "Focus_Feature":
                        dataset['Focus Feature'] = copy.deepcopy(feature)
                        populationDatasetOriginal['Focus Feature'] = copy.deepcopy(feature)
                        hasFocusFeature = True
                for response in feature['Responses']:
                    tempResp = response['Code'] + " - " + response['Description']
                    arrTempItems.append(tempResp)
                break
        if not found and isPrintingError:
            tkMessageBox.showerror("Error: Feature not found", "Feature not found in Variable Descriptor. Try again.")

        #Getting the proportions and frequencies of each value (including invalid values) in the focus feature
        if hasFocusFeature == True:
            arrTempItems = []
            dataset['ColumnData'] = []
            populationDatasetOriginal['ColumnData'] = []
            for record in dataset['Data']:
                dataset['ColumnData'].append(record[featCode])
                populationDatasetOriginal['ColumnData'].append(record[featCode])
            c = Counter(dataset['ColumnData']) # Counts the number of occurrences of each value of the focus feature
            
            countN = len(dataset['ColumnData'])# N is the size of the dataset
            countn = 0 # n is the total number of values where their group is not -1

            notInGroupNega1 = [] # List that keeps track of the values whose group is not -1
            presentInData = [] # List of values that occurred at least once in the data

            for response in dataset['Focus Feature']['Responses']:
                for val in c:
                    if val == response['Code']:
                        presentInData.append(val)
                        if response['Group'] != '-1':
                            notInGroupNega1.append(val)
                            countn = countn + int(c[val])
                        break
            '''
            reminderN = "N = Total no. of records"
            remindern = "n = Total no. of records where Group is not -1\n"
            header = "Freq | p/N | p/n | Group | Code | Description"
            
            arrTempItems.append(reminderN)
            arrTempItems.append(remindern)
            arrTempItems.append(header)
            '''
            for response in dataset['Focus Feature']['Responses']:
                countP = 0
                print 'Value: ' + response['Code']
                print 'Frequency: ' + str(countP)
                print 'n:' + str(countn)
                print 'N:' + str(countN)

                if response['Code'] in presentInData: #If the value has occurred in the data
                    countP = int(c[response['Code']])
                
                proportionOverN = round(countP/float(countN) * 100.0 ,2)
                proportionOvern = round(countP/float(countn) * 100.0, 2)

                if response['Code'] not in notInGroupNega1: #If the value is an invalid value or its group/class is -1
                    proportionOvern = proportionOvern * 0

                tempResp = str(format(countP, '04')) + " | " + str(format(proportionOverN, '05')) + "%(N) | " + str(format(proportionOvern, '05')) + "%(n) | "
                isValidResponse = False
                for val in c:
                    if val == response['Code']:
                        isValidResponse = True
                        tempResp = tempResp + response['Group'] + " | " +  response['Code'] + " | " + response['Description']  
                        break
                if not isValidResponse:
                    if response['Code'] not in presentInData:
                        tempResp = tempResp + response['Group'] + " | " +  response['Code'] + " | " + response['Description']
                    else:
                        tempResp = tempResp +  "-1" + " | " + response['Code'] + " | " + "INVALID VALUE" 
                arrTempItems.append(tempResp)
                         
        listFeat.delete(0, END)
        for A in arrTempItems:
            listFeat.insert(END, A)
        
'''
Splits an array retrieved from a listbox based on a delimiter, and appends to a new array
which element of the split array given an index. The new array will be returned.
'''
def parseListBoxValues(raw_arr, delimiter, index):
    proc_arr = []
    for x in raw_arr:
        temp = x.split(delimiter)
        proc_arr.append(temp[index])   
    return proc_arr

'''
Selects the values of the focus feature
and calculates the proportion of those values
and the total
'''
def setFocusFeatureValues(listBox, dataset, selectedItems, label, isWarn):
    datasets = []
    allValues = []


    listBox.selection_clear(0, END) # Deselect all
    for i in selectedItems: # Select items specified in selectedItems
        # print ("i is " + str(i))
        listBox.selection_set(i)

    tempAV = listBox.get(0, END)
    tempSV = [listBox.get(i) for i in listBox.curselection()]
    
    allValuesRaw = parseListBoxValues(tempAV, " | ", 4)
    selectedValues = parseListBoxValues(tempSV, " | ", 4)
    
    for val in allValuesRaw:
        for response in dataset['Focus Feature']['Responses']:
            if response['Code'] == val and response['Group'] != '-1':
                allValues.append(val)
                break
    
    # print str(allValues)

    if allValues != []:
        dataset['Focus Feature']['All Values'] = allValues
        dataset['Focus Feature']['Selected Values'] = selectedValues

        datasets.append(dataset)
        svs.getTotalsAndProportions(datasets,allValues, selectedValues)
        label.configure(text = "Frequency: " + str(datasets[0]['Proportion']) + " , Proportion: " + str(round(datasets[0]['ProportionPercent']*100,2)) + "%" + ", Total: " + str(datasets[0]['Total']))

        if(isWarn is True and set(allValues) == set(selectedValues)):
            tkMessageBox.showwarning("Z-Test Warning", "WARNING: You selected all of the valid values of " + dataset['Focus Feature']['Code'] + " (those that are not in group -1). Z-Test will not work if all valid values are selected.")

'''
Verifies if the focus features and their selected values for datasets 1 and 2 are the same.
'''
def isSameFocusFeat(dataset1, dataset2, selectedValD1, selectedValD2):
    print selectedValD1
    print selectedValD2 
    if(dataset1['Focus Feature'] == dataset2['Focus Feature']):
        if(np.array_equal(selectedValD1, selectedValD2)):
            return 1
        else:
            tkMessageBox.showerror('Error: Unequal values', 'Selected values on both datasets are not equal.')
            return -1
    else:
        tkMessageBox.showerror('Error: Unequal feature', 'Feature code on both datasets are not equal.')
        return -1


def checkKey(dict, key):
    if key in dict.keys():
        return True
    else:
        return False
'''
Set selected dataset values for that dataset. 
'''
# def selectDatasetValues(evt, dataset, populationDataset):
def selectDatasetValues(evt, dataset):
    global populationDir


    listbox = evt.widget
    selectedValues = [listbox.get(i) for i in listbox.curselection()]
    datasetCount = 0



    if checkKey(dataset, 'Feature'):  #### TODO in DB B

        dataset['Feature']['Selected Responses'] = []

        for sv in selectedValues:
            responseArr = sv.split(" - ")
            for response in dataset['Feature']['Responses']:
                if response['Code'] == responseArr[0]:
                    selected_response = copy.deepcopy(response)
                    dataset['Feature']['Selected Responses'].append(selected_response)

        print str(len(dataset['Data']))
        for record in dataset['Data']:
            if any (response['Code'] == record[dataset['Feature']['Code']] for response in dataset['Feature']['Selected Responses']):
                datasetCount += 1

    # labelFeatCount.configure(text = str(datasetCount))
    return datasetCount
'''
Saves the dataset as a .csv file
'''
def saveDatasetFile(dataset):
    fileName = makeFileName(dataset)
    writeCSVDict(fileName, dataset['Data'])
    return fileName


class OOTO_Miner:

    def __init__(self, top = None):
        # Configure style maps / themes
        self.configureStyle(top)

        # > MENU BAR
        # self.menubar = Menu(top,font = "TkMenuFont",background = _bgcolor,fg = _fgcolor)
        # top.configure(menu = self.menubar)
        # self.menubar.add_command(label = "About", command = self.showAbout)
        # self.menubar.add_command(label = "Help")


        ''' TAB 1 - DATA (Tabs_t2) '''
        self.configureDataTabElements()

        ''' TAB 2 - TEST (Tabs_t3) '''
        self.configureTestTabElements()

        ''' TAB 3 - INFO (Tabs_t4) '''
        self.configureInfoTabElements()

        # Bind functionality to all UI elements
        self.configureBindings()


        global queryType
        queryType = self.comboQueryTest.get()

        global populationDir
        populationDir = ""

        self.hasUploadedVariableDescription = False
        self.hasUploadedPopulation = False

        self.isReadyDatasetA = False
        self.isReadyDatasetB = False
        self.checkIfDatasetReady()

        self.populationDataset = []
        self.populationDatasetOriginalA = {'Data': [], 'Filter Features': []}
        self.populationDatasetOriginalB = {'Data': [], 'Filter Features': []}
        self.datasetA = {'Data': [], 'Filter Features': []}
        self.datasetB = {'Data': [], 'Filter Features': []}

        global tests
        tests = []
        self.datasetCountA = len(self.datasetA['Data'])
        self.datasetCountB = len(self.datasetB['Data'])
        self.labelQueryDataACount.configure(text = self.getDatasetCountA())
        self.labelQueryDataBCount.configure(text = self.getDatasetCountB())
        # self.labelQueryDataACount.configure(text = "n: " + str(len(self.datasetA['Data'])))
        # self.labelQueryDataBCount.configure(text = "n: " + str(len(self.datasetB['Data'])))

    """ >>> CONFIGURE STYLE MAPS / THEMES <<< """
    # region
    def configureStyle(self, top):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.style = ttk.Style()

        if sys.platform == "win32":
            self.style.theme_use('winnative')
        # else:
        #     self.style.theme_use('clam')

        self.style.configure('.', font = "TkDefaultFont")
        # self.style.map('.',background =
        #     [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x700+522+139")
        top.title("OOTO Miner")
        # root.wm_attributes('-transparentcolor', root['bg'])
        # root.wm_attributes('-transparentcolor', 'black')

        # top.configure(background = _top_bgcolor)
        # top.configure(highlightbackground = _top_bgcolor) #"#d9d9d9"
        # top.configure(highlightcolor = _top_bgcolor) # = "black")

        # Transparency
        # root.wm_attributes('-transparentcolor', root['bg'])

        # Removes the dashed line in tabs
        self.style.layout('Tab',
                          [('Notebook.tab', {'sticky': 'nswe', 'children':
                              [('Notebook.padding', {'side': 'top', 'sticky': 'nswe', 'children':
                              # [('Notebook.focus', {'side': 'top', 'sticky': 'nswe', 'children':
                                  [('Notebook.label', {'side': 'top', 'sticky': ''})],
                                                     # })],
                                                     })],
                                             })]
                          )

        self.Tabs = ttk.Notebook(root, style = 'Tab')  # top)
        self.Tabs.place(relx = 0.0, rely = 0.0, relheight = 1.0, relwidth = 1)
        # self.Tabs.configure(width = 604)
        # self.Tabs.configure(takefocus = "")

        # Top horizontal separator # TODO
        self.rootTopSeparator = ttk.Separator(root, orient = HORIZONTAL)
        self.rootTopSeparator.place(relx = 0, rely = 0, relwidth = 1)

        # > START TAB (0)
        self.Tabs_t2 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_START).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_start_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t2.image = tab_start_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t2, text = "Data", image = tab_start_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)
        # self.Tabs.tab(0, text = _txtpadding+"Data"+_txtpadding, underline = "-1")

        # > TEST TAB (1)

        self.Tabs_t3 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_TEST).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_test_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t3.image = tab_test_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t3, text = "Test", image = tab_test_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)

        # > ABOUT TAB (2)
        self.Tabs_t4 = ttk.Frame(self.Tabs)
        ''' Tab icon '''
        im = PIL.Image.open(Icon_support.TAB_ICO_INFO).resize(Icon_support.TAB_ICO_SIZE, PIL.Image.ANTIALIAS)
        tab_info_icon = PIL.ImageTk.PhotoImage(im)
        self.Tabs_t4.image = tab_info_icon  # < ! > Required to make images appear
        self.Tabs.add(self.Tabs_t4, text = "Info", image = tab_info_icon,
                      compound = CENTER)  # self.Tabs.add(self.Tabs_t2, text = _txtpadding+"Data"+_txtpadding, image = photo, compound = TOP)

        self.style.configure("Tab",
                             background = Color_support.TAB_BG_COLOR,
                             foreground = Color_support.FG_COLOR,
                             borderwidth = 0,
                             tabposition = 'wn',
                             height = 50)

        self.style.map("Tab",
                       background = [('selected', Color_support.ACTIVE_COLOR), ('active', Color_support.L_GRAY)])
    # endregion

    """ >>> CONFIGURE MAIN TABS <<< """
    # region

    ''' --> Configure DATA ("DATA") TAB (1) <-- '''
    def configureDataTabElements(self):

        # Create the parent frame
        self.dataTabParentFrame = LabelFrame(self.Tabs_t2, bd = 0)
        self.dataTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H)
        self.dataTabParentFrame.configure(background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR)

        # Create the left separator
        self.dataTabLeftSeparator = ttk.Separator(self.dataTabParentFrame, orient = VERTICAL)
        self.dataTabLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        self.configureDatasetElements()
        self.configureVariableDescriptionElements()
        self.configureStartElements()

    ''' --> Configure TEST ("TEST") TAB (2) <-- '''
    def configureTestTabElements(self):
        self.testTabParentFrame = LabelFrame(self.Tabs_t3, bd = 0)
        self.testTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H
        )
        self.testTabParentFrame.configure(
            background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR
        )
        self.testTabLeftSeparator = ttk.Separator(self.testTabParentFrame, orient = VERTICAL)
        self.testTabLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        # TYPE Parent Frame
        self.labelFrameTypeElements = LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameTypeElements.place(
            relx = UI_support.TAB_TEST_TYPE_REL_X, rely = UI_support.TAB_TEST_TYPE_REL_Y,
            relwidth = UI_support.TAB_TEST_TYPE_REL_W, relheight = UI_support.TAB_TEST_TYPE_REL_H
        )
        self.labelFrameTypeElements.configure(
            background = Color_support.TYPE_BG, foreground = Color_support.FG_COLOR  # , text = '''TYPE'''
        )

        prevFrameRelY = float(self.labelFrameTypeElements.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameTypeElements.place_info()['relheight'])
        newRelY = prevFrameRelY + prevFrameRelH

        # SELECT Parent Frame (Datasets)
        self.labelFrameSelectElements = LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameSelectElements.place(
            relx = UI_support.TAB_TEST_SELECT_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_SELECT_REL_W, relheight = UI_support.TAB_TEST_SELECT_REL_H
        )
        self.labelFrameSelectElements.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR  # , text = '''SELECT'''
        )

        self.configureSelectElements(self.labelFrameSelectElements)  # Configures all sub elements under SELECT

        prevFrameRelY = float(self.labelFrameSelectElements.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameSelectElements.place_info()['relheight'])
        newRelY = prevFrameRelY + prevFrameRelH

        # FILTER Parent Frame
        self.labelFrameFilterElements = LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameFilterElements.place(
            relx = UI_support.TAB_TEST_FILTER_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_REL_W, relheight = UI_support.TAB_TEST_FILTER_REL_H
        )
        self.labelFrameFilterElements.configure(
            background = Color_support.FILTER_BG, foreground = Color_support.FG_COLOR  # , text = '''FILTER'''
        )

        self.configureFilterElements(self.labelFrameFilterElements)  # Configures all sub elements under FILTER

        prevFrameRelY = float(self.labelFrameFilterElements.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameFilterElements.place_info()['relheight'])
        newRelY = prevFrameRelY + prevFrameRelH

        # PROCESS Parent Frame
        self.labelFrameProcessElements = LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameProcessElements.place(
            relx = UI_support.TAB_TEST_PROCESS_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_PROCESS_REL_W, relheight = UI_support.TAB_TEST_PROCESS_REL_H
        )
        self.labelFrameProcessElements.configure(
            background = Color_support.PROCESS_BG, foreground = Color_support.FG_COLOR  # , text = '''PROCESS'''
        )

        self.configureProcessElements(self.labelFrameProcessElements)  # Configures all sub elements under FILTER

        prevFrameRelX = float(self.labelFrameFilterElements.place_info()['relx'])
        prevFrameRelW = float(self.labelFrameFilterElements.place_info()['relwidth'])
        newRelX = prevFrameRelX + prevFrameRelW

        # CONSOLE Parent Frame
        self.labelFrameConsoleElements = LabelFrame(self.testTabParentFrame)
        self.labelFrameConsoleElements.place(
            relx = newRelX, rely = UI_support.TAB_TEST_CONSOLE_REL_Y,
            relwidth = UI_support.TAB_TEST_CONSOLE_REL_W, relheight = UI_support.TAB_TEST_CONSOLE_REL_H
        )
        self.labelFrameConsoleElements.configure(
            background = Color_support.D_BLUE, foreground = Color_support.FG_COLOR, text = '''CONSOLE'''
        )

        self.configureConsoleElements(self.labelFrameConsoleElements)  # Configures all sub elements under CONSOLE

        # > COMBO BOX
        global testTypes
        testTypes = ["Sample vs Sample", "Sample vs Population"]
        self.comboQueryTest = ttk.Combobox(self.Tabs_t3)
        # self.comboQueryTest.place(relx = 0.01, rely = 0.02, height = 0, width = 0) # 316)
        self.comboQueryTest.configure(exportselection = "0")
        self.comboQueryTest.configure(takefocus = "")
        self.comboQueryTest.configure(values = testTypes)
        self.comboQueryTest.current(0)
        self.comboQueryTest.configure(state = "readonly")

        # > CHI-TEST FRAME

        self.labelFrameQueryChi = LabelFrame(self.Tabs_t3)
        # self.labelFrameQueryChi.place(relx = 0.5, rely = 0.78, relheight = 0,
        #                               relwidth = 0)# 0.48)
        self.labelFrameQueryChi.configure(relief = GROOVE)
        self.labelFrameQueryChi.configure(foreground = "black")
        self.labelFrameQueryChi.configure(text = '''Chi Test''')
        self.labelFrameQueryChi.configure(background = "#d9d9d9")

        # > Z-TEST FRAME POPULATION ##### TODO Add functionality
        # region
        self.labelFrameQuerySvP = LabelFrame(self.Tabs_t3)
        # self.labelFrameQuerySvP.place(relx = 0.01, rely = 0.88, relheight = 0,
        #                               relwidth = 0) # 0.48)
        self.labelFrameQuerySvP.configure(relief = GROOVE)
        self.labelFrameQuerySvP.configure(foreground = "black")
        self.labelFrameQuerySvP.configure(text = '''Z-Test Sample Vs Population''')
        self.labelFrameQuerySvP.configure(background = "#d9d9d9")

        self.comboQueryCriticalValueSvP = ttk.Combobox(self.labelFrameQuerySvP)
        # self.comboQueryCriticalValueSvP.place(relx = 0.24, rely = 0.01, height = 0, width = 0)
        self.comboQueryCriticalValueSvP.configure(exportselection = "0")
        self.comboQueryCriticalValueSvP.configure(takefocus = "")
        self.comboQueryCriticalValueSvP.configure(values = arrQueryCriticalValue)
        self.comboQueryCriticalValueSvP.set(arrQueryCriticalValue[0])
        self.comboQueryCriticalValueSvP.configure(state = "disabled")

        self.labelQueryZTestSvP = Label(self.labelFrameQuerySvP)
        # self.labelQueryZTestSvP.place(relx = 0.47, rely = 0.01, height = 0, width = 0)
        # self.labelQueryZTest.configure(background = "#d9d9d9")
        self.labelQueryZTestSvP.configure(disabledforeground = "#a3a3a3")
        self.labelQueryZTestSvP.configure(foreground = "#000000")
        self.labelQueryZTestSvP.configure(text = '''NO DATA''')
        self.labelQueryZTestSvP.configure(state = "disabled")

        self.buttonQueryZTestSvP = Button(self.labelFrameQuerySvP)
        # self.buttonQueryZTestSvP.place(relx = 0.01, rely = 0.01, height = 0, width = 0)
        self.buttonQueryZTestSvP.configure(activebackground = "#d9d9d9")
        self.buttonQueryZTestSvP.configure(activeforeground = "#000000")
        self.buttonQueryZTestSvP.configure(background = "#d9d9d9")
        self.buttonQueryZTestSvP.configure(disabledforeground = "#a3a3a3")
        self.buttonQueryZTestSvP.configure(foreground = "#000000")
        self.buttonQueryZTestSvP.configure(highlightbackground = "#d9d9d9")
        self.buttonQueryZTestSvP.configure(highlightcolor = "black")
        self.buttonQueryZTestSvP.configure(pady = "0")
        self.buttonQueryZTestSvP.configure(text = '''Test''')
        self.buttonQueryZTestSvP.configure(state = "disabled")

        # endregion

    ''' --> Configure INFO ("INFO") TAB (3) <-- '''
    def configureInfoTabElements(self):
        # Creates the parent frame (infoTabParentFrame) that will hold all the elements in INFO TAB 3 (Tabs_t4)
        self.infoTabParentFrame = LabelFrame(self.Tabs_t4, bd = 0)
        self.infoTabParentFrame.place(
            relx = UI_support.TAB_REL_X, rely = UI_support.TAB_REL_Y,
            relwidth = UI_support.TAB_REL_W, relheight = UI_support.TAB_REL_H)
        self.infoTabParentFrame.configure(background = Color_support.TAB_BG_COLOR, foreground = Color_support.FG_COLOR)
        # Create the left separator
        self.infoTabLeftSeparator = ttk.Separator(self.infoTabParentFrame, orient = VERTICAL)
        self.infoTabLeftSeparator.place(relx = 0, rely = 0, relheight = 1)


        self.configureAboutElements()

        '''
        BINDING FOR INFO TAB
        '''
        # self.buttonQueryPopulation.bind('<Button-1>', self.querySetPopulation)
        # self.buttonQuerySetDataA.bind('<Button-1>', self.querySetDataA)


    # endregion



    """ >>> FUNCTIONS FOR THE CONFIGURATION OF UI ELEMENTS <<< """
    # region

    ''' --> Elements under DATA ("DATA") TAB (1) <-- '''
    # region

    ''' -> Elements under the DATASET ("Dataset") HEADER <- '''
    def configureDatasetElements(self):

        # Create the Dataset parent frame
        self.labelFrameDataset = LabelFrame(self.dataTabParentFrame, bd = 0)
        self.labelFrameDataset.configure(
            background = Color_support.DATASET_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_DATASET)
        self.labelFrameDataset.place(
            relx = UI_support.TAB_DATASET_REL_X, rely = UI_support.TAB_DATASET_REL_Y + UI_support.TAB_CHILD_PADDING_TOP,
            relwidth = UI_support.TAB_DATASET_REL_W, relheight = UI_support.TAB_DATASET_REL_H)

        # Create the Dataset element parent frame
        self.labelFrameDatasetElements = LabelFrame(self.labelFrameDataset, bd = 0)
        self.labelFrameDatasetElements.configure(
            background = Color_support.DATASET_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameDatasetElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # DATASET ELEMENTS

        # Variable Description label
        self.labelInitialVarDesc = Label(self.labelFrameDatasetElements)
        self.labelInitialVarDesc.place(
            relx = UI_support.TAB_3CHILD_LBL_REL_X, rely = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL,
            relwidth = UI_support.TAB_3CHILD_LBL_REL_W, relheight = UI_support.TAB_3CHILD_LBL_REL_H_SMALL)
        self.labelInitialVarDesc.configure(
            background = Color_support.DATASET_LBL_BG, foreground = Color_support.DATASET_LBL_FG,
            text = UI_support.LBL_DATASET_VARDESC,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Previous values (1.1)
        prevLblRelX = float(self.labelInitialVarDesc.place_info()['relx'])
        prevLblRelY = float(self.labelInitialVarDesc.place_info()['rely'])
        prevLblRelW = float(self.labelInitialVarDesc.place_info()['relwidth'])
        prevLblRelH = float(self.labelInitialVarDesc.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Variable Description entry
        self.entryInitialVarDesc = Entry(self.labelFrameDatasetElements)
        self.entryInitialVarDesc.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_ENTRY_REL_W, relheight = prevLblRelH)
        self.entryInitialVarDesc.configure(
            background = Color_support.DATASET_ENTRY_BG, foreground = Color_support.DATASET_ENTRY_FG,
            bd = 1,
            font = UI_support.FONT_DEFAULT,
            disabledforeground = Color_support.FG_DISABLED_COLOR
        )

        # Previous values (1.2)
        prevEntryRelX = float(self.entryInitialVarDesc.place_info()['relx'])
        prevEntryRelW = float(self.entryInitialVarDesc.place_info()['relwidth'])
        prevEntryRelH = float(self.entryInitialVarDesc.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevEntryRelX + prevEntryRelW

        # Variable Description upload
        self.buttonInitialVarDesc = Button(self.labelFrameDatasetElements)
        self.buttonInitialVarDesc.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_BTN_REL_W, relheight = prevLblRelH)

        self.buttonInitialVarDesc.configure(
            background = Color_support.DATASET_BTN_BG, foreground = Color_support.DATASET_BTN_FG,
            text = UI_support.BTN_DATASET_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.DATASET_BTN_BG_ACTIVE,
            activeforeground = Color_support.DATASET_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        # Previous values (1.3)
        prevBtnRelX = float(self.buttonInitialVarDesc.place_info()['relx'])
        prevBtnRelY = float(self.buttonInitialVarDesc.place_info()['rely'])
        prevBtnRelW = float(self.buttonInitialVarDesc.place_info()['relwidth'])
        prevBtnRelH = float(self.buttonInitialVarDesc.place_info()['relheight'])

        newRelY = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL + prevBtnRelY + prevBtnRelH

        # Population Dataset label
        self.labelInitialVarDesc = Label(self.labelFrameDatasetElements)
        self.labelInitialVarDesc.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelInitialVarDesc.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_DATASET_POPULATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Population Dataset entry
        self.entryQueryPopulation = Entry(self.labelFrameDatasetElements)
        self.entryQueryPopulation.place(
            relx = prevEntryRelX, rely = newRelY,
            relwidth = prevEntryRelW, relheight = prevEntryRelH)
        self.entryQueryPopulation.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Population Dataset upload
        self.buttonQueryPopulation = Button(self.labelFrameDatasetElements)
        self.buttonQueryPopulation.place(
            relx = prevBtnRelX, rely = newRelY,
            relwidth = prevBtnRelW, relheight = prevBtnRelH)
        self.buttonQueryPopulation.configure(
            background = Color_support.DATASET_BTN_BG, foreground = Color_support.DATASET_BTN_FG,
            text = UI_support.BTN_DATASET_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.DATASET_BTN_BG_ACTIVE,
            activeforeground = Color_support.DATASET_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

    ''' -> Elements under the VARIABLE DESCRIPTION ("Variable Description Generator") HEADER <- '''
    def configureVariableDescriptionElements(self):
        prevFrameRelY = float(self.labelFrameDataset.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameDataset.place_info()['relheight'])
        newFrameRelY = UI_support.TAB_VARDESC_REL_Y + prevFrameRelY + prevFrameRelH

        # Create the Variable Description Generator parent frame
        self.labelFrameVariableDescriptor = LabelFrame(self.dataTabParentFrame, bd = 0)
        self.labelFrameVariableDescriptor.configure(
            background = Color_support.VARDESC_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_VARDESC)
        self.labelFrameVariableDescriptor.place(
            relx = UI_support.TAB_VARDESC_REL_X, rely = newFrameRelY,
            relwidth = UI_support.TAB_VARDESC_REL_W, relheight = UI_support.TAB_VARDESC_REL_H)

        # Create the Variable Descriptor element parent frame
        self.labelFrameVarDescElements = LabelFrame(self.labelFrameVariableDescriptor, bd = 0)
        self.labelFrameVarDescElements.configure(
            background = Color_support.VARDESC_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameVarDescElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # > VARDESC ELEMENTS

        # Variable File

        # Variable File label
        self.labelVariableFile = Label(self.labelFrameVarDescElements)
        self.labelVariableFile.place(
            relx = UI_support.TAB_3CHILD_LBL_REL_X, rely = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL,
            relwidth = UI_support.TAB_3CHILD_LBL_REL_W, relheight = UI_support.TAB_3CHILD_LBL_REL_H_SMALL)
        self.labelVariableFile.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_VARDESC_VARFILE,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)
        '''
        self.labelVariableFile.configure(
            highlightcolor = Color_support.VARDESC_BTN_BG_ACTIVE,
            highlightbackground = Color_support.FUSCHIA,
            activebackground = Color_support.FUSCHIA,
            highlightthickness = 10,
            takefocus = True,
            state = ACTIVE
        )
        '''
        # Previous values (1.1)
        prevLblRelX = float(self.labelVariableFile.place_info()['relx'])
        prevLblRelY = float(self.labelVariableFile.place_info()['rely'])
        prevLblRelW = float(self.labelVariableFile.place_info()['relwidth'])
        prevLblRelH = float(self.labelVariableFile.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Variable File entry
        self.entryVariableFile = Entry(self.labelFrameVarDescElements)
        self.entryVariableFile.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_ENTRY_REL_W, relheight = prevLblRelH)
        self.entryVariableFile.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.2)
        prevEntryRelX = float(self.entryVariableFile.place_info()['relx'])
        prevEntryRelW = float(self.entryVariableFile.place_info()['relwidth'])
        prevEntryRelH = float(self.entryVariableFile.place_info()['relheight'])

        newRelX = UI_support.TAB_3CHILD_LBL_REL_X + prevEntryRelX + prevEntryRelW

        # Variable File upload
        self.buttonVariableFile = Button(self.labelFrameVarDescElements)
        self.buttonVariableFile.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_3CHILD_BTN_REL_W, relheight = prevLblRelH)
        self.buttonVariableFile.configure(
            background = Color_support.VARDESC_BTN_BG, foreground = Color_support.VARDESC_BTN_FG,
            text = UI_support.BTN_VARDESC_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.VARDESC_BTN_BG_ACTIVE,
            activeforeground = Color_support.VARDESC_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.3)
        prevBtnRelX = float(self.buttonVariableFile.place_info()['relx'])
        prevBtnRelY = float(self.buttonVariableFile.place_info()['rely'])
        prevBtnRelW = float(self.buttonVariableFile.place_info()['relwidth'])
        prevBtnRelH = float(self.buttonVariableFile.place_info()['relheight'])

        newRelY = UI_support.TAB_3CHILD_LBL_REL_Y_SMALL + prevBtnRelY + prevBtnRelH

        # Values File label
        self.labelValuesFile = Label(self.labelFrameVarDescElements)
        self.labelValuesFile.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelValuesFile.configure(
            background = Color_support.VARDESC_LBL_BG, foreground = Color_support.VARDESC_LBL_FG,
            text = UI_support.LBL_VARDESC_VALFILE,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Values File entry
        self.entryValuesFile = Entry(self.labelFrameVarDescElements)
        self.entryValuesFile.place(
            relx = prevEntryRelX, rely = newRelY,
            relwidth = prevEntryRelW, relheight = prevEntryRelH)
        self.entryValuesFile.configure(
            background = Color_support.VARDESC_ENTRY_BG, foreground = Color_support.VARDESC_ENTRY_FG,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Values File upload
        self.buttonValuesFile = Button(self.labelFrameVarDescElements)
        self.buttonValuesFile.place(
            relx = prevBtnRelX, rely = newRelY,
            relwidth = prevBtnRelW, relheight = prevBtnRelH)
        self.buttonValuesFile.configure(
            background = Color_support.VARDESC_BTN_BG, foreground = Color_support.VARDESC_BTN_FG,
            text = UI_support.BTN_VARDESC_UPLOAD,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.VARDESC_BTN_BG_ACTIVE,
            activeforeground = Color_support.VARDESC_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

    ''' -> Elements under the START (" ") HEADER <- '''
    def configureStartElements(self):
        # START
        # Always update to reflect height and width values in winfo when using relheight/relwidth
        self.buttonValuesFile.update()
        self.labelFrameVariableDescriptor.update()

        # print self.buttonValuesFile.place_info()
        print "height " + str(self.buttonValuesFile.winfo_height())
        print "width " + str(self.buttonValuesFile.winfo_width())

        buttonX = 0.5  # self.labelFrameVariableDescriptor.winfo_x()

        prevFrameRelY = float(self.labelFrameVariableDescriptor.place_info()['rely'])
        prevFrameRelH = float(self.labelFrameVariableDescriptor.place_info()['relheight'])
        buttonY = UI_support.TAB_VARDESC_REL_Y + prevFrameRelY + prevFrameRelH

        buttonHeight = self.buttonValuesFile.winfo_height()
        buttonWidth = self.buttonValuesFile.winfo_width()

        self.buttonStartDatasetUpload = Button(self.dataTabParentFrame)
        self.buttonStartDatasetUpload.place(
            relx = buttonX, rely = buttonY,
            width = buttonWidth, height = buttonHeight, anchor = CENTER)
        self.buttonStartDatasetUpload.configure(
            background = Color_support.START_BTN_BG, foreground = Color_support.START_BTN_FG,
            text = UI_support.BTN_START,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.START_BTN_BG_ACTIVE, activeforeground = Color_support.START_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        '''
        self.buttonStartVariableDescriptor = Button(self.dataTabParentFrame)
        self.buttonStartVariableDescriptor.place(
            relx = buttonX, rely = buttonY,
            width = buttonWidth, height = buttonHeight, anchor = CENTER)
        self.buttonStartVariableDescriptor.configure(
            background = Color_support.START_BTN_BG, foreground = Color_support.START_BTN_FG,
            text = UI_support.BTN_START,
            bd = 1, relief = FLAT, overrelief = GROOVE,
            activebackground = Color_support.START_BTN_BG_ACTIVE, activeforeground = Color_support.START_BTN_FG_ACTIVE,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
        '''
    # endregion

    ''' --> Elements under TEST ("TEST") TAB (2) <-- '''
    # region
    ''' -> Elements under the SELECT ("GROUP") HEADER <- '''
    def configureSelectElements(self, parentFrame):

        global queryStrFilterB

        # SELECT TITLE
        self.labelFrameSelectTitle = LabelFrame(parentFrame, bd = 0)
        self.labelFrameSelectTitle.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.12)
        self.labelFrameSelectTitle.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR  # , text = '''FILTER'''
        )

        # Create the top separator
        self.labelFrameSelectHorizontalSeparator = ttk.Separator(self.labelFrameSelectTitle, orient = HORIZONTAL)
        self.labelFrameSelectHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)


        # SELECT NUMBER
        self.labelFrameSelectTitleNumber = Label(self.labelFrameSelectTitle)
        newRelY = UI_support.LABEL_TITLE_REL_Y
        self.labelFrameSelectTitleNumber.place(
            relx = 0.05, rely = newRelY,
            relwidth = 0.04, relheight = 1 - (newRelY * 2), anchor = NW)
        self.labelFrameSelectTitleNumber.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.SELECT_NUMBER_BG, foreground = Color_support.SELECT_NUMBER_FG,
            text = '''1''',
            bd = 1, relief = GROOVE,
            anchor = S
        )
        newRelX = self.getRelX(self.labelFrameSelectTitleNumber) + self.getRelW(self.labelFrameSelectTitleNumber)
        # SELECT TITLE
        self.labelFrameSelectTitleText = Label(self.labelFrameSelectTitle)
        newRelY = self.getRelY(self.labelFrameSelectTitleNumber)
        newRelH = self.getRelH(self.labelFrameSelectTitleNumber)
        self.labelFrameSelectTitleText.place(
            relx = newRelX - 0.001, rely = newRelY,
            relwidth = 0.14, relheight = newRelH, anchor = NW)
        self.labelFrameSelectTitleText.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.SELECT_TITLE_BG, foreground = Color_support.SELECT_TITLE_FG,
            text = '''GROUP''',
            bd = 1, relief = GROOVE,
            anchor = S
        )


        # Top horizontal separator # TODO
        # self.SelectDatasetATitleSeparator = ttk.Separator(self.labelFrameSelectDatasetTitleA, orient = HORIZONTAL)
        # self.SelectDatasetATitleSeparator.place(relx = 0, rely = 1, relwidth = 1)



        # SELECT DATASET A TITLE
        '''
        self.labelFrameSelectDatasetTitleA = Label(self.labelFrameSelectTitle)
        self.labelFrameSelectDatasetTitleA.place(
            relx = 0, rely = 0,
            relwidth = 0.5, relheight = 1)
        self.labelFrameSelectDatasetTitleA.configure(
            font = UI_support.FONT_MED_BOLD,
            background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            text = ''''DATASET A'''',
            anchor = S
        )

        # Top horizontal separator # TODO
        # self.SelectDatasetATitleSeparator = ttk.Separator(self.labelFrameSelectDatasetTitleA, orient = HORIZONTAL)
        # self.SelectDatasetATitleSeparator.place(relx = 0, rely = 1, relwidth = 1)


        # SELECT DATASET B TITLE
        self.labelFrameSelectDatasetTitleB = Label(self.labelFrameSelectTitle)
        self.labelFrameSelectDatasetTitleB.place(
            relx = 0.5, rely = 0,
            relwidth = 0.5, relheight = 1)
        self.labelFrameSelectDatasetTitleB.configure(
            font = UI_support.FONT_MED_BOLD,
            background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            text = ''''DATASET B'''',
            anchor = S
        )

        # Top horizontal separator # TODO
        # self.SelectDatasetBTitleSeparator = ttk.Separator(self.labelFrameSelectDatasetTitleB, orient = HORIZONTAL)
        # self.SelectDatasetBTitleSeparator.place(relx = 0, rely = 1, relwidth = 1)
        '''

        # Create the top separator
        # self.labelFrameSelectHorizontalSeparator = ttk.Separator(self.labelFrameSelectTitle, orient = HORIZONTAL)
        # self.labelFrameSelectHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)

        newRelY = self.getRelY(self.labelFrameSelectTitle) + self.getRelH(self.labelFrameSelectTitle) # + UI_support.TAB_TEST_FILTER_QUERY_REL_Y
        titleRelH = self.getRelH(self.labelFrameSelectTitle)



        self.labelFrameDatasetA = LabelFrame(parentFrame, bd = 0)
        self.labelFrameDatasetA.place(
            relx = 0.05, rely = newRelY,
            relwidth = UI_support.TAB_TEST_SELECT_DATASET_REL_W, relheight = 1 - titleRelH
        )
        self.labelFrameDatasetA.configure(
            background = Color_support.SELECT_BG
        )
        newRelH = self.getRelH(self.labelFrameDatasetA)
        self.labelFrameDatasetB = LabelFrame(parentFrame, bd = 0)
        self.labelFrameDatasetB.place(
            relx = UI_support.TAB_TEST_SELECT_DATASET_REL_W + 0.15, # (2 * self.getRelX(self.labelFrameDatasetA)) + self.getRelW(self.labelFrameDatasetA),
            rely = newRelY, relwidth = 0.4, relheight = newRelH
        )
        self.labelFrameDatasetB.configure(
            background = Color_support.SELECT_BG
        )

        # DATASET SEPARATOR
        self.labelFrameDatasetCenterSeparator = ttk.Separator(parentFrame, orient = VERTICAL)
        self.labelFrameDatasetCenterSeparator.place(relx = 0.5, rely = newRelY + 0.05, relheight = 1 - titleRelH - 0.1)

        # QUERY PARENT (DATASET A)
        self.labelFrameQueryDataA = LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameQueryDataA.place(
            relx = UI_support.TAB_TEST_SELECT_QUERY_REL_X, rely = UI_support.TAB_TEST_SELECT_QUERY_REL_Y,
            relwidth = UI_support.TAB_TEST_SELECT_QUERY_REL_W, relheight = UI_support.TAB_TEST_SELECT_QUERY_REL_H)
        self.labelFrameQueryDataA.configure(
            background = Color_support.SELECT_ENTRY_BG, foreground = Color_support.SELECT_ENTRY_FG,
            relief = GROOVE # , text = '''Dataset A'''
        )

        #  QUERY PARENT (DATASET B)
        self.labelFrameQueryDataB = LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameQueryDataB.place(
            relx = UI_support.TAB_TEST_SELECT_QUERY_REL_X, rely = UI_support.TAB_TEST_SELECT_QUERY_REL_Y,
            relwidth = UI_support.TAB_TEST_SELECT_QUERY_REL_W, relheight = UI_support.TAB_TEST_SELECT_QUERY_REL_H)
        self.labelFrameQueryDataB.configure(
            background = Color_support.SELECT_ENTRY_BG, foreground = Color_support.SELECT_ENTRY_FG,
            relief = GROOVE  # , text = '''Dataset B'''
        )


        # DATASET A
        self.labelFrameBorderQuerySetDataA = LabelFrame(self.labelFrameQueryDataA, bd = 0)
        self.labelFrameBorderQuerySetDataA.place(
            relx = 0, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_LBL_REL_W, relheight = 1
        )
        self.labelFrameBorderQuerySetDataA.configure(
            background = Color_support.SELECT_BUTTONS_BG
        )
        self.labelQuerySetDataA = Label(self.labelFrameBorderQuerySetDataA)
        # self.labelQuerySetDataA.place(
        #     relx = 0, rely = 0,
        #     relwidth = UI_support.TAB_TEST_SELECT_LBL_REL_W, relheight = 1)

        self.labelQuerySetDataA.place(
            relx = 0.01, rely = 0.025,
            relwidth = 0.98, relheight = 0.95)
        self.labelQuerySetDataA.configure(
            background = Color_support.SELECT_LABEL_BG, foreground = Color_support.SELECT_LABEL_FG,
            text = UI_support.SELECT_LABEL_DATASETA_TEXT,
            font = UI_support.SELECT_LABEL_FONT,
            bd = 0, relief = FLAT,
        )

        # DATASET B
        self.labelFrameBorderQuerySetDataB = LabelFrame(self.labelFrameQueryDataB, bd = 0)
        self.labelFrameBorderQuerySetDataB.place(
            relx = 0, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_LBL_REL_W, relheight = 1
        )
        self.labelFrameBorderQuerySetDataB.configure(
            background = Color_support.SELECT_BUTTONS_BG
        )

        self.labelQuerySetDataB = Label(self.labelFrameBorderQuerySetDataB)

        self.labelQuerySetDataB.place(
            relx = self.getRelX(self.labelQuerySetDataA), rely = self.getRelY(self.labelQuerySetDataA),
            relwidth = self.getRelW(self.labelQuerySetDataA), relheight = self.getRelH(self.labelQuerySetDataA))
        self.labelQuerySetDataB.configure(
            background = Color_support.SELECT_LABEL_BG, foreground = Color_support.SELECT_LABEL_FG,
            text = UI_support.SELECT_LABEL_DATASETB_TEXT,
            font = UI_support.SELECT_LABEL_FONT,
            bd = 0, relief = FLAT,
        )


        newRelX = self.getRelX(self.labelFrameBorderQuerySetDataA) + self.getRelW(self.labelFrameBorderQuerySetDataA) # + UI_support.TAB_3CHILD_LBL_REL_X

        # DATASET A
        self.entryQuerySetDataA = Entry(self.labelFrameQueryDataA)
        self.entryQuerySetDataA.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_ENTRY_REL_W, relheight = 1)
        self.entryQuerySetDataA.configure(
            background = Color_support.SELECT_ENTRY_BG, foreground = Color_support.SELECT_ENTRY_FG,
            bd = 1,
            font = UI_support.ENTRY_FONT, insertwidth = UI_support.INSERT_WIDTH,
            selectbackground = Color_support.SELECT_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = Color_support.SELECT_ENTRY_SELECT_INSERT_BG,
            takefocus = UI_support.ENTRY_TAKE_FOCUS, justify = UI_support.SELECT_ENTRY_JUSTIFY
        ) # TODO Constant font definiton

        # ENTER CODE DATASET B

        self.entryQuerySetDataB = Entry(self.labelFrameQueryDataB)
        self.entryQuerySetDataB.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_ENTRY_REL_W, relheight = 1)
        self.entryQuerySetDataB.configure(
            background = Color_support.SELECT_ENTRY_BG, foreground = Color_support.SELECT_ENTRY_FG,
            bd = 1,
            font = UI_support.ENTRY_FONT, insertwidth = UI_support.INSERT_WIDTH,
            selectbackground = Color_support.SELECT_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = Color_support.SELECT_ENTRY_SELECT_INSERT_BG,
            takefocus = UI_support.ENTRY_TAKE_FOCUS, justify = UI_support.SELECT_ENTRY_JUSTIFY
        ) # TODO Constant font definiton


        newRelX = self.getRelX(self.entryQuerySetDataA) + self.getRelW(self.entryQuerySetDataA) # + UI_support.TAB_3CHILD_LBL_REL_X

        # DATASET A
        self.buttonQuerySetDataA = Button(self.labelFrameQueryDataA)
        self.buttonQuerySetDataA.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_BTN_REL_W, relheight = 1)

        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW).resize(Icon_support.SELECT_ICO_SIZE_BUTTONS, PIL.Image.ANTIALIAS)
        btn_query_set_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQuerySetDataA.configure(image = btn_query_set_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQuerySetDataA.image = btn_query_set_icon  # < ! > Required to make images appear

        self.buttonQuerySetDataA.configure(
            background = Color_support.SELECT_BUTTONS_BG, foreground = Color_support.SELECT_BUTTONS_FG,
            activebackground = Color_support.SELECT_BG,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = FLAT, overrelief = GROOVE,
            # text = '''Find Feature'''
        )


        # DATASET B
        self.buttonQuerySetDataB = Button(self.labelFrameQueryDataB)
        self.buttonQuerySetDataB.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TAB_TEST_SELECT_BTN_REL_W, relheight = 1)

        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW).resize(Icon_support.SELECT_ICO_SIZE_BUTTONS, PIL.Image.ANTIALIAS)
        btn_query_set_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQuerySetDataB.configure(image = btn_query_set_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQuerySetDataB.image = btn_query_set_icon  # < ! > Required to make images appear


        self.buttonQuerySetDataB.configure(
            background = Color_support.SELECT_BUTTONS_BG, foreground = Color_support.SELECT_BUTTONS_FG,
            activebackground = Color_support.SELECT_BTN_BG_ACTIVE,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = FLAT, overrelief = GROOVE,
            # text = '''Find Feature'''
        )


        newRelY = UI_support.TAB_TEST_LISTBOX_QUERY_REL_Y + self.getRelY(self.labelFrameQueryDataA) + self.getRelH(self.labelFrameQueryDataA)

        # LISTBOX PARENT (DATASET A)

        self.labelFrameListBoxA = LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameListBoxA.place(
            relx = UI_support.TAB_TEST_LISTBOX_QUERY_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_LISTBOX_QUERY_REL_W, relheight = UI_support.TAB_TEST_LISTBOX_QUERY_REL_H)

        # self.scrollbarQuerySetDataA = Scrollbar(self.labelFrameListBox, orient = VERTICAL)
        # self.listQuerySetDataA = Listbox(self.labelFrameListBoxA, yscrollcommand = self.scrollbarQuerySetDataA.set)

        self.listQuerySetDataA = Listbox(self.labelFrameListBoxA)
        self.listQuerySetDataA.configure(
            background = Color_support.SELECT_LISTBOX_BG, foreground = Color_support.SELECT_LISTBOX_FG,
            selectmode = MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = Color_support.SELECT_LISTBOX_SELECTED_ITEM_BG, selectforeground = Color_support.SELECT_LISTBOX_SELECTED_ITEM_FG,
            font = UI_support.SELECT_LABEL_FONT,
            bd = UI_support.SELECT_LISTBOX_BORDER, relief = UI_support.SELECT_LISTBOX_RELIEF,
            highlightthickness = 0
        )


        self.listQuerySetDataA.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.78 - 0.03)
        # self.listQuerySetDataA.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.78)

        newRelY = self.getRelY(self.listQuerySetDataA) + self.getRelH(self.listQuerySetDataA)
        newRelH = 1 - self.getRelH(self.listQuerySetDataA)
        self.labelQuerySetDataStatusA = Label(self.labelFrameListBoxA)
        self.labelQuerySetDataStatusA.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)
        self.labelQuerySetDataStatusA.configure(
            background = Color_support.SELECT_LISTBOX_STATUS_BG, foreground = Color_support.SELECT_LISTBOX_STATUS_FG,
            bd = UI_support.SELECT_STATUS_LABEL_BORDER, relief = UI_support.SELECT_STATUS_LABEL_RELIEF,
            text = UI_support.LBL_SELECT_NO_DATA,
            font = UI_support.SELECT_STATUS_LABEL_FONT,
        )
        if UI_support.SELECT_STATUS_LABEL_TOP_SEPARATOR:
            self.labelFrameNoDataAHorizontalSeparator = ttk.Separator(self.labelQuerySetDataStatusA, orient = HORIZONTAL)
            self.labelFrameNoDataAHorizontalSeparator.place(relx = 0, rely = 0, relwidth = 1, anchor = NW)

        '''
        self.scrollbarQuerySetDataA.configure(
            command = self.listQuerySetDataA.yview,
            width = 8, relief = FLAT,
            troughcolor = Color_support.ACTIVE_COLOR)
        self.scrollbarQuerySetDataA.pack(side = RIGHT, fill = Y)
        self.listQuerySetDataA.pack(side = LEFT, fill = BOTH, expand = 1)
        '''

        # LISTBOX PARENT (DATASET B)
        newRelY = self.getRelY(self.labelFrameListBoxA)
        newRelH  = self.getRelH(self.labelFrameListBoxA)
        self.labelFrameListBoxB = LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameListBoxB.place(
            relx = UI_support.TAB_TEST_LISTBOX_QUERY_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_LISTBOX_QUERY_REL_W, relheight = newRelH)

        # self.scrollbarQuerySetDataA = Scrollbar(self.labelFrameListBox, orient = VERTICAL)
        # self.listQuerySetDataB = Listbox(self.labelFrameListBox, yscrollcommand = self.scrollbarQuerySetDataA.set)

        self.listQuerySetDataB = Listbox(self.labelFrameListBoxB)
        self.listQuerySetDataB.configure(
            background = Color_support.SELECT_LISTBOX_BG, foreground = Color_support.SELECT_LISTBOX_FG,
            selectmode = MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = Color_support.SELECT_LISTBOX_SELECTED_ITEM_BG,
            selectforeground = Color_support.SELECT_LISTBOX_SELECTED_ITEM_FG,
            font = UI_support.SELECT_LABEL_FONT,
            bd = UI_support.SELECT_LISTBOX_BORDER, relief = UI_support.SELECT_LISTBOX_RELIEF,
            highlightthickness = 0
        )
        '''
            configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR,
            selectmode = MULTIPLE, exportselection = "0",
            selectbackground = Color_support.SELECT_BG_HL, selectforeground = Color_support.FG_COLOR,
            font = "TkFixedFont")
        '''
        newRelY = self.getRelY(self.listQuerySetDataA)
        newRelH = self.getRelH(self.listQuerySetDataA)
        self.listQuerySetDataB.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)

        newRelY = self.getRelY(self.labelQuerySetDataStatusA)
        newRelH = self.getRelH(self.labelQuerySetDataStatusA)
        self.labelQuerySetDataStatusB = Label(self.labelFrameListBoxB)
        self.labelQuerySetDataStatusB.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)
        self.labelQuerySetDataStatusB.configure(
            background = Color_support.SELECT_LISTBOX_STATUS_BG, foreground = Color_support.SELECT_LISTBOX_STATUS_FG,
            bd = UI_support.SELECT_STATUS_LABEL_BORDER, relief = UI_support.SELECT_STATUS_LABEL_RELIEF,
            text = UI_support.LBL_SELECT_NO_DATA,
            font = UI_support.SELECT_STATUS_LABEL_FONT,
        )
        newRelY = UI_support.TAB_TEST_COMMANDS_QUERY_REL_Y + self.getRelY(self.labelFrameListBoxA) + self.getRelH(self.labelFrameListBoxA)

        # COMMANDS PARENT (DATASET A)

        self.labelFrameCommandsA = LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameCommandsA.place(
            relx = UI_support.TAB_TEST_COMMANDS_QUERY_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_COMMANDS_QUERY_REL_W, relheight = UI_support.TAB_TEST_COMMANDS_QUERY_REL_H)

        self.labelFrameCommandsA.configure(
            background = Color_support.WHITE
        )

        # COMMANDS PARENT (DATASET B)

        self.labelFrameCommandsB = LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameCommandsB.place(
            relx = UI_support.TAB_TEST_COMMANDS_QUERY_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_COMMANDS_QUERY_REL_W, relheight = UI_support.TAB_TEST_COMMANDS_QUERY_REL_H)

        self.labelFrameCommandsB.configure(
            background = Color_support.WHITE
        )

        # RESET BUTTON (DATASET A)


        self.buttonQueryResetFilterA = Button(self.labelFrameCommandsA)
        self.buttonQueryResetFilterA.place(
            relx = 0 , rely = 0,
            relwidth = 0.25, relheight = 1)
        self.buttonQueryResetFilterA.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT)
            # text = '''Reset''')

        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterA.configure(image = btn_query_reset_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterA.image = btn_query_reset_icon  # < ! > Required to make images appear

        # RESET BUTTON (DATASET B)

        self.buttonQueryResetFilterB = Button(self.labelFrameCommandsB)
        self.buttonQueryResetFilterB.place(
            relx = 0, rely = 0,
            relwidth = 0.25, relheight = 1)
        self.buttonQueryResetFilterB.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT)
        # text = '''Reset''')

        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterB.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterB.image = btn_query_reset_icon  # < ! > Required to make images appear

        newRelX = self.getRelX(self.buttonQueryResetFilterA) + self.getRelW(self.buttonQueryResetFilterA)


        # QUERY COUNT (DATASET A)
        self.labelFrameQueryCount = LabelFrame(self.labelFrameCommandsA, bd = 1)
        self.labelFrameQueryCount.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.50 - 0.005, relheight = 1
        )
        self.labelFrameQueryCount.configure(
            background = Color_support.SELECT_BG
        )

        # Define count variables
        self.datasetCountA = 0
        self.datasetCountB = 0

        self.labelQueryDataACount = Label(self.labelFrameQueryCount)
        self.labelQueryDataACount.place(relx = 0, rely = 0, relwidth = 1, relheight = UI_support.TAB_TEST_SELECT_COUNT_REL_H)
        self.labelQueryDataACount.configure(
            font = UI_support.FONT_LARGE_BOLD,
            background = Color_support.SELECT_BG,
            text = self.getDatasetCountA()
        )
        self.labelQueryDataACountText = Label(self.labelFrameQueryCount)
        self.labelQueryDataACountText.place(
            relx = 0, rely = self.getRelH(self.labelQueryDataACount),
            relwidth = 1, relheight = UI_support.TAB_TEST_SELECT_COUNT_TEXT_REL_H)
        self.labelQueryDataACountText.configure(
            font = UI_support.FONT_DEFAULT_BOLD,
            background = Color_support.FG_COLOR, foreground = Color_support.SELECT_BG,
            text = '''SAMPLES'''
        )

        # Create the left separator
        # self.labelFrameQueryCountLeftSeparator = ttk.Separator(self.labelFrameQueryCount, orient = VERTICAL)
        # self.labelFrameQueryCountLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        # self.labelFrameQueryCountRightSeparator = ttk.Separator(self.labelFrameQueryCount, orient = VERTICAL)
        # self.labelFrameQueryCountRightSeparator.place(relx = 0.99, rely = 0, relheight = 1)


        # QUERY COUNT (DATASET B)
        self.labelFrameQueryCountB = LabelFrame(self.labelFrameCommandsB, bd = 1)
        self.labelFrameQueryCountB.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.50 - 0.005, relheight = 1
        )
        self.labelFrameQueryCountB.configure(
            background = Color_support.SELECT_BG
        )

        self.labelQueryDataBCount = Label(self.labelFrameQueryCountB)
        self.labelQueryDataBCount.place(relx = 0, rely = 0, relwidth = 1, relheight = UI_support.TAB_TEST_SELECT_COUNT_REL_H)
        self.labelQueryDataBCount.configure(
            font = UI_support.FONT_LARGE_BOLD,
            background = Color_support.SELECT_BG,
            text = self.getDatasetCountB()
        )
        self.labelQueryDataBCountText = Label(self.labelFrameQueryCountB)
        self.labelQueryDataBCountText.place(
            relx = 0, rely = self.getRelH(self.labelQueryDataBCount),
            relwidth = 1, relheight = UI_support.TAB_TEST_SELECT_COUNT_TEXT_REL_H)
        self.labelQueryDataBCountText.configure(
            font = UI_support.FONT_DEFAULT_BOLD,
            background = Color_support.FG_COLOR, foreground = Color_support.SELECT_BG,
            text = '''SAMPLES'''
        )

        # Create the left separator
        # self.labelFrameQueryCountLeftSeparatorB = ttk.Separator(self.labelFrameQueryCountB, orient = VERTICAL)
        # self.labelFrameQueryCountLeftSeparatorB.place(relx = 0, rely = 0, relheight = 1)

        # self.labelFrameQueryCountRightSeparatorB = ttk.Separator(self.labelFrameQueryCountB, orient = VERTICAL)
        # self.labelFrameQueryCountRightSeparatorB.place(relx = 0.99, rely = 0, relheight = 1)

        # FILTER BUTTON (DATASET A)
        newRelX = self.getRelX(self.labelFrameQueryCount) + self.getRelW(self.labelFrameQueryCount)

        self.buttonQueryAddFilterA = Button(self.labelFrameCommandsA, compound = CENTER)
        self.buttonQueryAddFilterA.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.25 - 0.005, relheight = 1
        )

        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryAddFilterA.configure(image = btn_query_filter_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterA.image = btn_query_filter_icon  # < ! > Required to make images appear

        self.buttonQueryAddFilterA.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT)
            # text = '''Filter''')
        self.buttonQueryAddFilterA.pack(side = RIGHT)


        self.buttonQueryResetFilterA.pack(side = LEFT)


        # FILTER BUTTON (DATASET B)
        newRelX = self.getRelX(self.labelFrameQueryCountB) + self.getRelW(self.labelFrameQueryCountB)

        self.buttonQueryAddFilterB = Button(self.labelFrameCommandsB, compound = CENTER)
        self.buttonQueryAddFilterB.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.25 - 0.005, relheight = 1
        )

        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryAddFilterB.configure(image = btn_query_filter_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterB.image = btn_query_filter_icon  # < ! > Required to make images appear

        self.buttonQueryAddFilterB.configure(
            background = Color_support.SELECT_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT)
            # text = '''Filter''')
        self.buttonQueryAddFilterB.pack(side = RIGHT)


        self.buttonQueryResetFilterB.pack(side = LEFT)

    ''' -> Elements under the FILTER ("FILTER") HEADER <- '''
    def configureFilterElements(self, parentFrame):
        global queryStrFilterA

        # FILTER TITLE
        self.labelFrameFilterTitle = LabelFrame(parentFrame, bd = 0)
        self.labelFrameFilterTitle.place(relx = 0, rely = 0.08, relwidth = 1, relheight = UI_support.TAB_TEST_FILTER_TITLE_REL_H)
        self.labelFrameFilterTitle.configure(
            background = Color_support.FILTER_BG, foreground = Color_support.FG_COLOR  # , text = '''FILTER'''
        )


        # Create the top separator
        self.labelFrameFilterHorizontalSeparator = ttk.Separator(self.labelFrameFilterTitle, orient = HORIZONTAL)
        self.labelFrameFilterHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)

        # FILTER NUMBER
        self.labelFrameFilterTitleNumber = Label(self.labelFrameFilterTitle)
        newRelY = self.getRelY(self.labelFrameSelectTitleNumber)
        newRelH = self.getRelH(self.labelFrameSelectTitleNumber)
        self.labelFrameFilterTitleNumber.place(
            relx = 0.05, rely = newRelY,
            relwidth = 0.04, relheight = newRelH, anchor = NW)
        self.labelFrameFilterTitleNumber.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.FILTER_NUMBER_BG, foreground = Color_support.FILTER_NUMBER_FG,
            text = '''2''',
            bd = 1, relief = GROOVE,
            anchor = S
        )

        # newRelX = self.getRelX(self.labelFrameSelectTitleNumber) + self.getRelW(self.labelFrameSelectTitleNumber)
        newRelX = self.getRelX(self.labelFrameSelectTitleText)

        # FILTER TITLE
        self.labelFrameFilterTitleText = Label(self.labelFrameFilterTitle)
        self.labelFrameFilterTitleText.place(
            relx = newRelX, rely = newRelY,
            relwidth = 0.15, relheight = newRelH, anchor = NW)
            # place(
            # relx = 0.5, rely = 0.5,
            # relwidth = 0.15, relheight = 1, anchor = CENTER)
        self.labelFrameFilterTitleText.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.FILTER_TITLE_BG, foreground = Color_support.FILTER_TITLE_FG,
            text = '''FILTER''',
            bd = 1, relief = GROOVE,
            anchor = S
        )

        # Top horizontal separator # TODO
        # self.SelectDatasetATitleSeparator = ttk.Separator(self.labelFrameSelectDatasetTitleA, orient = HORIZONTAL)
        # self.SelectDatasetATitleSeparator.place(relx = 0, rely = 1, relwidth = 1)

        newRelY = self.getRelY(self.labelFrameFilterTitle) + self.getRelH(self.labelFrameFilterTitle) + UI_support.TAB_TEST_FILTER_QUERY_REL_Y


        # FILTER QUERY PARENT
        self.labelFrameFilterQueryData = LabelFrame(parentFrame, bd = 0)
        self.labelFrameFilterQueryData.place(
            relx = UI_support.TAB_TEST_FILTER_QUERY_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_QUERY_REL_W, relheight = UI_support.TAB_TEST_FILTER_QUERY_REL_H
        )
        self.labelFrameFilterQueryData.configure(
            background = Color_support.FILTER_BG
        )

        # FILTER QUERY LABEL



        self.labelFrameBorderQueryFeature = LabelFrame(self.labelFrameFilterQueryData, bd = 0)
        self.labelFrameBorderQueryFeature.place(
            relx = 0, rely = 0,
            relwidth = UI_support.TAB_TEST_FILTER_QUERY_LBL_REL_W, relheight = 1)
        self.labelFrameBorderQueryFeature.configure(
            background = Color_support.FILTER_BUTTONS_BG
        )


        self.labelQueryFeature = Label(self.labelFrameBorderQueryFeature)
        self.labelQueryFeature.place(
            relx = 0.01, rely = 0.025,
            relwidth = 0.98, relheight = 0.95)
        self.labelQueryFeature.configure(
            background = Color_support.FILTER_LABEL_BG, foreground = Color_support.FILTER_LABEL_FG,
            text = UI_support.FILTER_LABEL_QUERY_FEATURE_TEXT,
            font = UI_support.FILTER_LABEL_FONT,
            bd = 0, relief = FLAT,
        )




        newRelX = self.getRelX(self.labelFrameBorderQueryFeature) + self.getRelW(self.labelFrameBorderQueryFeature)

        # FILTER QUERY ENTRY
        self.entryQueryFeature = Entry(self.labelFrameFilterQueryData)
        self.entryQueryFeature.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TAB_TEST_FILTER_QUERY_ENTRY_REL_W - 0.001, relheight = 1)
        self.entryQueryFeature.configure(
            background = Color_support.FILTER_ENTRY_BG, foreground = Color_support.FILTER_ENTRY_FG,
            bd = 1,
            font = UI_support.ENTRY_FONT, insertwidth = UI_support.INSERT_WIDTH,
            selectbackground = Color_support.FILTER_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = Color_support.FILTER_ENTRY_SELECT_INSERT_BG,
            takefocus = UI_support.ENTRY_TAKE_FOCUS, justify = UI_support.FILTER_ENTRY_JUSTIFY
        )

        newRelX = self.getRelX(self.entryQueryFeature) + self.getRelW(self.entryQueryFeature)

        # FILTER QUERY BUTTON
        self.buttonQueryFeature = Button(self.labelFrameFilterQueryData)
        self.buttonQueryFeature.place(
            relx = newRelX, rely = 0,
            relwidth = 0.041, relheight = 1)
            # relwidth = UI_support.TAB_TEST_SELECT_BTN_REL_W, relheight = 1)


        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW).resize(Icon_support.FILTER_ICO_SIZE_BUTTONS, PIL.Image.ANTIALIAS)
        btn_query_feature_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryFeature.configure(image = btn_query_feature_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryFeature.image = btn_query_feature_icon  # < ! > Required to make images appear


        self.buttonQueryFeature.configure(
            background = Color_support.FILTER_BUTTONS_BG, foreground = Color_support.FILTER_BUTTONS_FG,
            activebackground = Color_support.SELECT_BTN_BG_ACTIVE,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = FLAT, overrelief = FLAT
        )

        newRelY = self.getRelY(self.labelFrameFilterQueryData) + self.getRelH(self.labelFrameFilterQueryData)

        # FILTER OVERLAY
        '''
        self.labelOverlayQueryFeature = Label(self.labelFrameFilterQueryData)
        self.labelOverlayQueryFeature.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1)
        self.labelOverlayQueryFeature.configure(
            # background = Color_support.FILTER_LABEL_OVERLAY_BG,
            foreground = Color_support.FILTER_LABEL_FG,
            font = UI_support.FILTER_LABEL_FONT,
            bd = 0, relief = FLAT,
        )

        im = PIL.Image.open(Icon_support.OVERLAY_ICO_BLACK_70).resize(Icon_support.FILTER_ICO_SIZE_BUTTONS, PIL.Image.ANTIALIAS)
        lbl_overlay_icon = PIL.ImageTk.PhotoImage(im)
        self.labelOverlayQueryFeature.configure(image = lbl_overlay_icon)
        self.labelOverlayQueryFeature.image = lbl_overlay_icon  # < ! > Required to make images appear
        '''


        # FILTER LIST PARENT
        self.labelFrameFilterListData = LabelFrame(parentFrame, bd = 0)

        self.labelFrameFilterListData.place(
            relx = UI_support.TAB_TEST_FILTER_LIST_DATA_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_LIST_DATA_REL_W, relheight = UI_support.TAB_TEST_FILTER_LIST_DATA_REL_H
        )
        self.labelFrameFilterListData.configure(
            background = Color_support.FILTER_BG
        )


        # TOP LABEL FEATURE NAME
        self.labelQueryDataFeatureName = Label(self.labelFrameFilterListData)
        self.labelQueryDataFeatureName.place(
            relx = 0, rely = 0,
            relheight = UI_support.TAB_TEST_FILTER_QUERY_FEATURE_NAME_REL_H, relwidth = 1)
        self.labelQueryDataFeatureName.configure(
            background = Color_support.FILTER_LISTBOX_FEATURE_STATUS_BG, foreground = Color_support.FILTER_LISTBOX_FEATURE_STATUS_FG,
            bd = UI_support.FILTER_STATUS_LABEL_BORDER, relief = UI_support.FILTER_STATUS_LABEL_RELIEF,
            text = UI_support.FILTER_STATUS_NO_FEATURE_TEXT,
            font = UI_support.FILTER_STATUS_LABEL_FONT,
        )


        newRelY = self.getRelY(self.labelQueryDataFeatureName) + self.getRelH(self.labelQueryDataFeatureName)
        newRelH = 1 - (self.getRelY(self.labelQueryDataFeatureName) + self.getRelH(self.labelQueryDataFeatureName)) - 0.2

        # FILTER LIST DATA A PARENT
        self.labelFrameFilterListDataA = LabelFrame(self.labelFrameFilterListData, bd = 0)
        self.labelFrameFilterListDataA.place(
            relx = UI_support.TAB_TEST_FILTER_LISTBOX_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_REL_W, relheight = newRelH # UI_support.TAB_TEST_FILTER_LISTBOX_REL_H
        )
        self.labelFrameFilterListDataA.configure(
            background = Color_support.FILTER_BG
        )

        # FILTER LIST BOX - DATASET A

        self.listQueryDataA = Listbox(self.labelFrameFilterListDataA, bd = 0)
        self.listQueryDataA.place(
            relx = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_X, rely = 0,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_W, relheight = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_H)

        self.listQueryDataA.configure(
            background = Color_support.FILTER_LISTBOX_BG, foreground = Color_support.FILTER_LISTBOX_FG,
            selectmode = MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = Color_support.FILTER_LISTBOX_SELECTED_ITEM_BG, selectforeground = Color_support.FILTER_LISTBOX_SELECTED_ITEM_FG,
            font = UI_support.FILTER_LABEL_FONT,
            bd = UI_support.FILTER_LISTBOX_BORDER, relief = UI_support.FILTER_LISTBOX_RELIEF,
            highlightthickness = 0
        )


        newRelY = self.getRelY(self.listQueryDataA) + self.getRelH(self.listQueryDataA)
        newRelH = 1 - (self.getRelY(self.listQueryDataA) + self.getRelH(self.listQueryDataA))

        # BOTTOM STATUS LABEL - DATASET A
        self.labelQueryDataA = Label(self.labelFrameFilterListDataA)
        self.labelQueryDataA.place(
            relx = UI_support.TAB_TEST_FILTER_LISTBOX_STATUS_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_STATUS_REL_W, relheight = newRelH)

        self.labelQueryDataA.configure(
            background = Color_support.FILTER_LISTBOX_STATUS_BG, foreground = Color_support.FILTER_LISTBOX_STATUS_FG,
            bd = UI_support.FILTER_STATUS_LABEL_BORDER, relief = UI_support.FILTER_STATUS_LABEL_RELIEF,
            text = UI_support.FILTER_STATUS_NO_DATA_TEXT,
            font = UI_support.FILTER_STATUS_LABEL_FONT,
        )




        newRelX = self.getRelX(self.labelFrameFilterListDataA) + self.getRelW(self.labelFrameFilterListDataA)
        newRelY = self.getRelY(self.labelFrameFilterListDataA)
        # FILTER LIST DATA B PARENT
        self.labelFrameFilterListDataB = LabelFrame(self.labelFrameFilterListData, bd = 0)

        newRelH = self.getRelH(self.labelFrameFilterListDataA)
        self.labelFrameFilterListDataB.place(
            relx = newRelX, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_REL_W, relheight = newRelH # UI_support.TAB_TEST_FILTER_LISTBOX_REL_H
        )
        self.labelFrameFilterListDataB.configure(
            background = Color_support.FILTER_BG
        )

        # FILTER LIST BOX - DATASET B


        self.listQueryDataB = Listbox(self.labelFrameFilterListDataB, bd = 0)
        self.listQueryDataB.place(
            relx = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_X, rely = 0,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_W,
            relheight = UI_support.TAB_TEST_FILTER_LISTBOX_LIST_REL_H)

        self.listQueryDataB.configure(
            background = Color_support.FILTER_LISTBOX_BG, foreground = Color_support.FILTER_LISTBOX_FG,
            selectmode = MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = Color_support.FILTER_LISTBOX_SELECTED_ITEM_BG, selectforeground = Color_support.FILTER_LISTBOX_SELECTED_ITEM_FG,
            font = UI_support.FILTER_LABEL_FONT,
            bd = UI_support.FILTER_LISTBOX_BORDER, relief = UI_support.FILTER_LISTBOX_RELIEF,
            highlightthickness = 0
        )

        newRelY = self.getRelY(self.listQueryDataB) + self.getRelH(self.listQueryDataB)
        newRelH = 1 - (self.getRelY(self.listQueryDataA) + self.getRelH(self.listQueryDataA))
        # BOTTOM STATUS LABEL - DATASET B
        self.labelQueryDataB = Label(self.labelFrameFilterListDataB)
        self.labelQueryDataB.place(
            relx = UI_support.TAB_TEST_FILTER_LISTBOX_STATUS_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_FILTER_LISTBOX_STATUS_REL_W,
            relheight = newRelH)

        self.labelQueryDataB.configure(
            background = Color_support.FILTER_LISTBOX_STATUS_BG, foreground = Color_support.FILTER_LISTBOX_STATUS_FG,
            bd = UI_support.FILTER_STATUS_LABEL_BORDER, relief = UI_support.FILTER_STATUS_LABEL_RELIEF,
            text = UI_support.FILTER_STATUS_NO_DATA_TEXT,
            font = UI_support.FILTER_STATUS_LABEL_FONT,
        )


        #### TODO Move functionality to new query elements

        '''
        # ENTER CODE DATASET A
        self.entryQueryFeatureA = Entry(self.labelFrameQueryDataA)
        self.entryQueryFeatureA.place(
            relx = 0.23, rely = 0.32,
            relwidth = 0, relheight = 0
        ) # 0.76)


        self.entryQueryFeatureA.configure(background = "white")
        self.entryQueryFeatureA.configure(disabledforeground = "#a3a3a3")
        self.entryQueryFeatureA.configure(font = "TkFixedFont")
        self.entryQueryFeatureA.configure(foreground = "#000000")
        self.entryQueryFeatureA.configure(insertbackground = "black")

        self.buttonQueryFeatureA = Button(self.labelFrameQueryDataA)
        self.buttonQueryFeatureA.place(relx = 0.02, rely = 0.32, height = 0, width = 0 ) # 96)

        self.buttonQueryFeatureA.configure(activebackground = "#d9d9d9")
        self.buttonQueryFeatureA.configure(activeforeground = "#000000")
        self.buttonQueryFeatureA.configure(background = "#d9d9d9")
        self.buttonQueryFeatureA.configure(disabledforeground = "#a3a3a3")
        self.buttonQueryFeatureA.configure(foreground = "#000000")
        self.buttonQueryFeatureA.configure(highlightbackground = "#d9d9d9")
        self.buttonQueryFeatureA.configure(highlightcolor = "black")
        self.buttonQueryFeatureA.configure(pady = "0")

        # ENTER CODE DATASET B
        self.entryQueryFeatureB = Entry(self.labelFrameQueryDataB)
        self.entryQueryFeatureB.place(relx = 0.23, rely = 0.32, relheight = 0
                                      , relwidth = 0 ) # 0.76)
        self.entryQueryFeatureB.configure(background = "white")
        self.entryQueryFeatureB.configure(disabledforeground = "#a3a3a3")
        self.entryQueryFeatureB.configure(font = "TkFixedFont")
        self.entryQueryFeatureB.configure(foreground = "#000000")
        self.entryQueryFeatureB.configure(insertbackground = "black")

        self.buttonQueryFeatureB = Button(self.labelFrameQueryDataB)
        self.buttonQueryFeatureB.place(relx = 0.02, rely = 0.32, height = 0, width = 0) # 96)

        self.buttonQueryFeatureB.configure(activebackground = "#d9d9d9")
        self.buttonQueryFeatureB.configure(activeforeground = "#000000")
        self.buttonQueryFeatureB.configure(background = "#d9d9d9")
        self.buttonQueryFeatureB.configure(disabledforeground = "#a3a3a3")
        self.buttonQueryFeatureB.configure(foreground = "#000000")
        self.buttonQueryFeatureB.configure(highlightbackground = "#d9d9d9")
        self.buttonQueryFeatureB.configure(highlightcolor = "black")
        self.buttonQueryFeatureB.configure(pady = "0")
        '''

    ''' -> Elements under the PROCESS ("TEST") HEADER <- '''
    def configureProcessElements(self, parentFrame):

        # PROCESS TITLE
        self.labelFrameProcessTitle = LabelFrame(parentFrame, bd = 0)
        self.labelFrameProcessTitle.place(relx = 0, rely = 0, relwidth = 1, relheight = UI_support.TAB_TEST_PROCESS_TITLE_REL_H)
        self.labelFrameProcessTitle.configure(
            background = Color_support.PROCESS_BG, foreground = Color_support.FG_COLOR  # , text = '''PROCESS'''
        )
        # Create the top separator
        self.labelFrameProcessHorizontalSeparator = ttk.Separator(self.labelFrameProcessTitle, orient = HORIZONTAL)
        self.labelFrameProcessHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)


        # FILTER NUMBER
        self.labelFrameProcessTitleNumber = Label(self.labelFrameProcessTitle)
        newRelY = self.getRelY(self.labelFrameSelectTitleNumber)
        newRelH = self.getRelH(self.labelFrameSelectTitleNumber)
        self.labelFrameProcessTitleNumber.place(
            relx = 0.05, rely = newRelY,
            relwidth = 0.04, relheight = newRelH, anchor = NW)
        self.labelFrameProcessTitleNumber.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.PROCESS_NUMBER_BG, foreground = Color_support.PROCESS_NUMBER_FG,
            text = '''3''',
            bd = 1, relief = GROOVE,
            anchor = S
        )

        # newRelX = self.getRelX(self.labelFrameProcessTitleNumber) + self.getRelW(self.labelFrameProcessTitleNumber)
        newRelX = self.getRelX(self.labelFrameSelectTitleText)


        # PROCESS TITLE
        self.labelFrameProcessTitleText = Label(self.labelFrameProcessTitle)
        self.labelFrameProcessTitleText.place(
            relx = newRelX, rely = newRelY,
            relwidth = 0.15, relheight = newRelH, anchor = NW)
            # place(
            # relx = 0.5, rely = 0.5,
            # relwidth = 0.15, relheight = 1, anchor = CENTER)
        self.labelFrameProcessTitleText.configure(
            font = UI_support.FONT_MED_BOLD,
            # background = Color_support.BG_TITLE, foreground = Color_support.FG_TITLE,
            background = Color_support.PROCESS_TITLE_BG, foreground = Color_support.PROCESS_TITLE_FG,
            bd = 1, relief = GROOVE,
            text = '''TEST''',
            anchor = S
        )

        # Top horizontal separator # TODO
        # self.SelectDatasetATitleSeparator = ttk.Separator(self.labelFrameSelectDatasetTitleA, orient = HORIZONTAL)
        # self.SelectDatasetATitleSeparator.place(relx = 0, rely = 1, relwidth = 1)


        newRelY = self.getRelH(self.labelFrameProcessTitle) + UI_support.TAB_TEST_PROCESS_COMMANDS_REL_Y


        # PROCESS COMMANDS PARENT
        self.labelFrameProcessCommands = LabelFrame(parentFrame, bd = 0)
        self.labelFrameProcessCommands.place(
            relx = UI_support.TAB_TEST_PROCESS_COMMANDS_REL_X, rely = newRelY,
            relwidth = UI_support.TAB_TEST_PROCESS_COMMANDS_REL_W, relheight = UI_support.TAB_TEST_PROCESS_COMMANDS_REL_H
        )
        self.labelFrameProcessCommands.configure(
            background = Color_support.PROCESS_BG
        )


        # PROCESS Z-TEST PARENT
        self.labelFrameProcessZTest = LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessZTest.place(
            relx = 0, rely = 0,
            relwidth = UI_support.TEST_PROCESS_Z_TEST_PARENT, relheight = 1
        )
        self.labelFrameProcessZTest.configure(
            background = Color_support.PROCESS_BG
        )


        # PROCESS Z-TEST TITLE
        self.labelFrameProcessZTestTitle = Label(self.labelFrameProcessZTest)
        self.labelFrameProcessZTestTitle.place(
            relx = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X, rely = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W, relheight = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessZTestTitle.configure(
            font = UI_support.FONT_MED_BOLD,
            background = Color_support.PROCESS_Z_TEST_TITLE_BG, foreground = Color_support.PROCESS_Z_TEST_TITLE_FG,
            text = '''Z - TEST''',
            anchor = CENTER,
            bd = 1, relief = GROOVE
        )

        # Top horizontal separator # TODO
        # self.zTestTitleSeparator = ttk.Separator(self.labelFrameProcessZTestTitle, orient = HORIZONTAL)
        # self.zTestTitleSeparator.place(relx = 0, rely = 1, relwidth = 1)

        global arrQueryCriticalValue
        arrQueryCriticalValue = ["0.80", "0.90", "0.95", "0.98", "0.99"]

        global arrQueryCriticalValueMapping
        arrQueryCriticalValueMapping = {"0.80": 1.28, "0.90": 1.645, "0.95": 1.96, "0.98": 2.33, "0.99": 2.58}

        newRelY = self.getRelY(self.labelFrameProcessZTestTitle) + self.getRelH(self.labelFrameProcessZTestTitle) + UI_support.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_Y

        # SPINBOX ELEMENTS
        self.labelFrameProcessZTestConfidence = LabelFrame(self.labelFrameProcessZTest, bd = 0)
        self.labelFrameProcessZTestConfidence.place(
            relx = 0.11, rely = newRelY,
            relwidth = 0.525, relheight = UI_support.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_H
        )
        self.labelFrameProcessZTestConfidence.configure(
            background = Color_support.PROCESS_BG
        )


        newRelX = self.getRelX(self.labelFrameProcessZTestConfidence) + self.getRelW(self.labelFrameProcessZTestConfidence)
        newRelY = self.getRelY(self.labelFrameProcessZTestConfidence)

        # BUTTON ELEMENTS
        self.labelFrameProcessZTestButtonElements = LabelFrame(self.labelFrameProcessZTest, bd = 0)
        self.labelFrameProcessZTestButtonElements.place(
            relx = newRelX + 0.05, rely = newRelY,
            relwidth = 1 - (newRelX + self.getRelX(self.labelFrameProcessZTestConfidence)),
            # relwidth = 0.5 - 2 * self.getRelX(self.labelFrameProcessZTestConfidence),
            relheight = 0.35
        )
        self.labelFrameProcessZTestButtonElements.configure(
            background = Color_support.PROCESS_BG
        )





        # CONFIDENCE SPINBOX LABEL
        self.labelQueryZConfidenceText = Label(self.labelFrameProcessZTestConfidence)
        self.labelQueryZConfidenceText.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = UI_support.TAB_TEST_PROCESS_CONFIDENCE_TEXT_REL_H)
        self.labelQueryZConfidenceText.configure(
            font = UI_support.FONT_DEFAULT_BOLD,
            background = Color_support.FG_COLOR, foreground = Color_support.SELECT_BG,
            text = '''CONFIDENCE'''
        )


        newRelY = self.getRelY(self.labelQueryZConfidenceText) + self.getRelH(self.labelQueryZConfidenceText)
        newRelH = 1 - self.getRelH(self.labelQueryZConfidenceText)

        # CONFIDENCE SPINBOX
        self.spinBoxQueryZConfidence = Spinbox(self.labelFrameProcessZTestConfidence, values = arrQueryCriticalValue)
        self.spinBoxQueryZConfidence.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH
        )
        self.spinBoxQueryZConfidence.configure(
            font = UI_support.FONT_LARGE_BOLD,
            background = Color_support.WHITE, foreground = Color_support.FG_COLOR,
            exportselection = 0,
            buttonbackground = Color_support.WHITE,
            buttonuprelief = FLAT, buttondownrelief = GROOVE,
            justify = CENTER

        )


        # newRelX = self.getRelX(self.labelFrameProcessZTestConfidence) + self.getRelW(self.labelFrameProcessZTestConfidence)
        # newRelY = self.getRelY(self.labelFrameProcessZTestConfidence)
        # newRelH = self.getRelH(self.labelFrameProcessZTestConfidence)

        # Z-TEST BUTTON
        self.buttonQueryZTest = Button(self.labelFrameProcessZTestButtonElements, compound = CENTER)

        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryZTest.configure(image = btn_query_z_test_icon) # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryZTest.image = btn_query_z_test_icon  # < ! > Required to make images appear

        self.buttonQueryZTest.configure(
            background = Color_support.PROCESS_BG, foreground = Color_support.PROCESS_BUTTONS_FG,
            bd = 1, relief = FLAT, overrelief = FLAT)
            # text = '''Test''')

        self.buttonQueryZTest.pack(anchor = CENTER)
        self.buttonQueryZTest.update()

        # Z-TEST RESULTS
        self.labelQueryZTest = Label(self.labelFrameProcessZTest)  ## TODO functionality switch
        self.labelQueryZTest.place(relx = 0.47, rely = 0.01, height = 0, width = 0)
        self.labelQueryZTest.configure(disabledforeground = "#a3a3a3")
        self.labelQueryZTest.configure(foreground = "#000000")
        self.labelQueryZTest.configure(text = '''NO DATA''')




        newRelX = self.getRelX(self.labelFrameProcessZTest) + self.getRelW(self.labelFrameProcessZTest)

        # PROCESS CHI-SQUARE PARENT
        self.labelFrameProcessChiSquare = LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessChiSquare.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TEST_PROCESS_CHI_SQUARE_PARENT, relheight = 1
        )
        self.labelFrameProcessChiSquare.configure(
            background = Color_support.PROCESS_BG
        )

        # newRelX = self.getRelX(self.labelFrameProcessChiSquare) + self.getRelW(self.labelFrameProcessChiSquare)

        # PROCESS CHI-SQUARE TITLE
        self.labelFrameProcessChiSquareTitle = Label(self.labelFrameProcessChiSquare)
        self.labelFrameProcessChiSquareTitle.place(
            relx = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X, rely = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W, relheight = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessChiSquareTitle.configure(
            font = UI_support.FONT_MED_BOLD,
            background = Color_support.PROCESS_CHI_SQUARE_TITLE_BG, foreground = Color_support.PROCESS_CHI_SQUARE_TITLE_FG,
            text = '''CHI - SQUARE''',
            anchor = CENTER,
            bd = 1, relief = GROOVE
        )

        # Top horizontal separator # TODO
        self.chiSquareTitleSeparator = ttk.Separator(self.labelFrameProcessChiSquareTitle, orient = HORIZONTAL)
        self.chiSquareTitleSeparator.place(relx = 0, rely = 1, relwidth = 1)

        # self.chiSquareRightSeparator = ttk.Separator(self.labelFrameProcessChiSquare, orient = VERTICAL)
        # self.chiSquareRightSeparator.place(relx = 0.99, rely = 0, relheight = 1)

        newRelY = self.getRelY(self.labelFrameProcessZTestTitle) + self.getRelH(
            self.labelFrameProcessZTestTitle) + UI_support.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_Y


        # BUTTON ELEMENTS
        self.labelFrameProcessChiSquareElements = LabelFrame(self.labelFrameProcessChiSquare, bd = 0)
        self.labelFrameProcessChiSquareElements.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = 0.35
        )
        self.labelFrameProcessChiSquareElements.configure(
            background = Color_support.PROCESS_BG
        )

        # QUEUE ELEMENTS
        self.labelFrameProcessChiSquareQueue = LabelFrame(self.labelFrameProcessChiSquareElements, bd = 1)
        self.labelFrameProcessChiSquareQueue.place(
            relx = 0.275, rely = 0,
            relwidth = 0.45, relheight = 1
        )
        self.labelFrameProcessChiSquareQueue.configure(
            background = Color_support.PROCESS_BG
        )

        newRelX = self.getRelX(self.labelFrameProcessChiSquare) + self.getRelW(
            self.labelFrameProcessChiSquare)


        # > QUEUE COUNT
        self.labelQueueText = Label(self.labelFrameProcessChiSquareQueue)
        self.labelQueueText.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = UI_support.TAB_TEST_PROCESS_QUEUE_TEXT_REL_H
        )
        self.labelQueueText.configure(
            font = UI_support.FONT_DEFAULT_BOLD,
            background = Color_support.FG_COLOR, foreground = Color_support.SELECT_BG,
            text = '''QUEUE SIZE'''
        )

        newRelY = self.getRelY(self.labelQueueText) + self.getRelH(self.labelQueueText)
        newRelH = 1 - self.getRelH(self.labelQueueText)

        self.labelQueueCount = Label(self.labelFrameProcessChiSquareQueue)
        self.labelQueueCount.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH)
        self.labelQueueCount.configure(
            font = UI_support.FONT_LARGE_BOLD,
            background = Color_support.SELECT_BG,
            text = '''0'''
        )



        newRelX = self.getRelX(self.labelFrameProcessChiSquareQueue) + self.getRelW(self.labelFrameProcessChiSquareQueue)

        # ENQUEUE BUTTON
        # Enqueue button parent (to handle centering after pack)
        self.labelFrameProcessQueue = LabelFrame(self.labelFrameProcessChiSquareElements, bd = 0)
        self.labelFrameProcessQueue.place(
            relx = newRelX + 0.025, rely = 0,
            relwidth = 0.25, relheight = 1
        )
        self.labelFrameProcessQueue.configure(
            background = Color_support.PROCESS_BG
        )

        # Enqueue button
        self.buttonQueue = Button(self.labelFrameProcessQueue, compound = CENTER)

        im = PIL.Image.open(Icon_support.TAB_ICO_ADD).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_queue_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueue.configure(
            image = btn_queue_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueue.image = btn_queue_icon  # < ! > Required to make images appear

        self.buttonQueue.configure(
            background = Color_support.PROCESS_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT)

        self.buttonQueue.pack(side = LEFT)
        self.buttonQueue.update()


        # CLEAR QUEUE BUTTON

        # Clear queue button parent (to handle centering after pack)
        self.labelFrameProcessClearQueue = LabelFrame(self.labelFrameProcessChiSquareElements, bd = 0)
        self.labelFrameProcessClearQueue.place(
            relx = 0, rely = 0,
            relwidth = 0.25, relheight = 1
        )
        self.labelFrameProcessClearQueue.configure(
            background = Color_support.PROCESS_BG
        )

        self.buttonClearQueue = Button(self.labelFrameProcessClearQueue, compound = CENTER)

        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_clear_queue_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonClearQueue.configure(
            image = btn_clear_queue_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonClearQueue.image = btn_clear_queue_icon  # < ! > Required to make images appear

        self.buttonClearQueue.configure(
            background = Color_support.PROCESS_BG, foreground = Color_support.FG_COLOR,
            bd = 1, relief = FLAT, overrelief = FLAT
        )

        self.buttonClearQueue.pack(side = RIGHT)
        self.buttonClearQueue.update()


        newRelX = self.getRelX(self.labelFrameProcessChiSquare) + self.getRelW(self.labelFrameProcessChiSquare)

        # PROCESS RUN PARENT
        self.labelFrameProcessRun = LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessRun.place(
            relx = newRelX, rely = 0,
            relwidth = UI_support.TEST_PROCESS_RUN_PARENT, relheight = 1
        )
        self.labelFrameProcessRun.configure(
            background = Color_support.PROCESS_BG
        )

        # PROCESS RUN MINER TITLE
        self.labelFrameProcessRunMinerTitle = Label(self.labelFrameProcessRun)
        self.labelFrameProcessRunMinerTitle.place(
            relx = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X, rely = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W, relheight = UI_support.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessRunMinerTitle.configure(
            font = UI_support.FONT_MED_BOLD,
            background = Color_support.PROCESS_RUN_MINER_TITLE_BG, foreground = Color_support.PROCESS_RUN_MINER_TITLE_FG,
            text = '''RUN MINER''',
            anchor = CENTER,
            bd = 1, relief = GROOVE
        )

        # Top horizontal separator # TODO
        self.runMinerTitleSeparator = ttk.Separator(self.labelFrameProcessRunMinerTitle, orient = HORIZONTAL)
        self.runMinerTitleSeparator.place(relx = 0, rely = 1, relwidth = 1)

        newRelY = self.getRelH(self.labelFrameProcessRunMinerTitle) + self.getRelY(self.labelFrameProcessRunMinerTitle)
        newRelH = 1 - (self.getRelH(self.labelFrameProcessRunMinerTitle) + self.getRelY(self.labelFrameProcessRunMinerTitle))
        self.labelFrameRunMiner = LabelFrame(self.labelFrameProcessRun, bd = 0)
        self.labelFrameRunMiner.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH
        )
        self.labelFrameRunMiner.configure(
            background = Color_support.PROCESS_BG
        )
        self.labelFrameRunMinerElements = LabelFrame(self.labelFrameRunMiner, bd = 0)
        self.labelFrameRunMinerElements.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
        )
        self.labelFrameRunMinerElements.configure(
            background = Color_support.PROCESS_BG
        )

        # RUN MINER BUTTON
        self.buttonTestQueue = Button(self.labelFrameRunMinerElements, compound = CENTER)

        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW).resize(Icon_support.RUN_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_queue_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonTestQueue.configure(
            image = btn_queue_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonTestQueue.image = btn_queue_icon  # < ! > Required to make images appear


        self.buttonTestQueue.configure(
            background = Color_support.PROCESS_BUTTONS_BG, foreground = Color_support.PROCESS_BUTTONS_FG,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = FLAT, overrelief = FLAT)

        self.buttonTestQueue.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
        )
        self.buttonTestQueue.pack(side = RIGHT)
        # self.buttonTestQueue.update()
        self.labelFrameRunMinerElements.pack(fill = Y, expand = True)



        self.runLeftSeparator = ttk.Separator(self.labelFrameProcessRun, orient = VERTICAL)
        self.runLeftSeparator.place(relx = 0, rely = 0, relheight = 1)


        # SEPARATOR  ELEMENTS
        newRelX = self.getRelX(self.labelFrameProcessChiSquare) # + self.getRelW(self.labelFrameProcessZTest)
        self.zTestRightSeparator = ttk.Separator(self.labelFrameProcessCommands, orient = VERTICAL)
        self.zTestRightSeparator.place(relx = 0.335, rely = 0, relheight = 1, anchor = NE)

        newRelX = self.getRelX(self.labelFrameProcessRun) # + self.getRelW(self.labelFrameProcessChiSquare)
        self.runLeftSeparator = ttk.Separator(self.labelFrameProcessCommands, orient = VERTICAL)
        self.runLeftSeparator.place(relx = 0.6666, rely = 0, relheight = 1)

    ''' -> Elements under the CONSOLE ("") HEADER <- '''
    def configureConsoleElements(self, parentFrame):
        # TODO
        print ("TODO")
    # endregion

    ''' --> Elements under INFO ("INFO") TAB (2) <-- '''
    # region
    def configureAboutElements(self):
        # Create the About parent frame
        self.labelFrameAbout = LabelFrame(self.infoTabParentFrame, bd = 0)
        self.labelFrameAbout.configure(
            background = Color_support.ABOUT_BG, foreground = Color_support.FG_COLOR, text = UI_support.TITLE_ABOUT)
        self.labelFrameAbout.place(
            relx = UI_support.TAB_ABOUT_REL_X, rely = UI_support.TAB_ABOUT_REL_Y + UI_support.TAB_CHILD_PADDING_TOP,
            relwidth = UI_support.TAB_ABOUT_REL_W, relheight = UI_support.TAB_ABOUT_REL_H)

        # Create the About element parent frame
        self.labelFrameAboutElements = LabelFrame(self.labelFrameAbout, bd = 0)
        self.labelFrameAboutElements.configure(
            background = Color_support.ABOUT_BG, foreground = Color_support.FG_COLOR)
        self.labelFrameAboutElements.place(
            relx = UI_support.TAB_ELEMENT_REL_X, rely = 0.1,
            relwidth = UI_support.TAB_ELEMENT_REL_W, relheight = 0.80)

        # > ABOUT ELEMENTS
        # Version label
        self.labelVersion = Label(self.labelFrameAboutElements)
        self.labelVersion.place(
            relx = UI_support.TAB_CHILD_LBL_REL_X, rely = UI_support.TAB_CHILD_LBL_REL_Y,
            relwidth = UI_support.TAB_CHILD_LBL_REL_W, relheight = UI_support.TAB_CHILD_LBL_REL_H)
        self.labelVersion.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_VER,
            disabledforeground = Color_support.FG_DISABLED_COLOR,
            bd = 1)

        # Previous values (1.1)
        prevLblRelX = float(self.labelVersion.place_info()['relx'])
        prevLblRelY = float(self.labelVersion.place_info()['rely'])
        prevLblRelW = float(self.labelVersion.place_info()['relwidth'])
        prevLblRelH = float(self.labelVersion.place_info()['relheight'])

        newRelX = UI_support.TAB_CHILD_LBL_REL_X + prevLblRelX + prevLblRelW

        # Version text
        self.labelVersionText = Label(self.labelFrameAboutElements)
        self.labelVersionText.place(
            relx = newRelX, rely = prevLblRelY,
            relwidth = UI_support.TAB_CHILD_STR_REL_W, relheight = prevLblRelH)
        self.labelVersionText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_VER,
            bd = 1,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous values (1.2)
        prevStrRelX = float(self.labelVersionText.place_info()['relx'])
        prevStrRelY = float(self.labelVersionText.place_info()['rely'])
        prevStrRelW = float(self.labelVersionText.place_info()['relwidth'])
        prevStrRelH = float(self.labelVersionText.place_info()['relheight'])

        newRelY = UI_support.TAB_CHILD_LBL_REL_Y + prevLblRelY + prevLblRelH

        # Author label
        self.labelAuthor = Label(self.labelFrameAboutElements)
        self.labelAuthor.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelAuthor.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_AUTHOR,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Author text
        self.labelAuthorText = Label(self.labelFrameAboutElements)
        self.labelAuthorText.place(
            relx = prevStrRelX, rely = newRelY,
            relwidth = prevStrRelW, relheight = prevStrRelH)
        self.labelAuthorText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_AUTHOR,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Previous Y values
        prevLblRelY = float(self.labelAuthor.place_info()['rely'])
        prevStrRelY = float(self.labelAuthorText.place_info()['rely'])

        newRelY = UI_support.TAB_CHILD_LBL_REL_Y + prevLblRelY + prevLblRelH

        # Affiliation label
        self.labelAffiliation = Label(self.labelFrameAboutElements)
        self.labelAffiliation.place(
            relx = prevLblRelX, rely = newRelY,
            relwidth = prevLblRelW, relheight = prevLblRelH)
        self.labelAffiliation.configure(
            background = Color_support.ABOUT_LBL_BG, foreground = Color_support.ABOUT_LBL_FG,
            text = UI_support.LBL_ABOUT_AFFILIATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR)

        # Affiliation text
        self.labelAffiliationText = Label(self.labelFrameAboutElements)
        self.labelAffiliationText.place(
            relx = prevStrRelX, rely = newRelY,
            relwidth = prevStrRelW, relheight = prevStrRelH)
        self.labelAffiliationText.configure(
            background = Color_support.ABOUT_STR_BG, foreground = Color_support.ABOUT_STR_FG,
            text = UI_support.STR_ABOUT_AFFILIATION,
            disabledforeground = Color_support.FG_DISABLED_COLOR)
    # endregion

    # endregion



    """ >>> HELPER FUNCTIONS UI ELEMENTS <<< """
    # region
    def getRelX(self, element):
        return float(element.place_info()['relx'])
    def getRelY(self, element):
        return float(element.place_info()['rely'])
    def getRelW(self, element):
        return float(element.place_info()['relwidth'])
    def getRelH(self, element):
        return float(element.place_info()['relheight'])
    def getW(self, element):
        return float(element.place_info()['width'])
    def getH(self, element):
        return float(element.place_info()['height'])
    def getInfoH(self, element):
        return element.winfo_height()
    def getInfoW(self, element):
        return element.winfo_width()

    def getDatasetCountA(self):
        return str(self.datasetCountA)
    def getDatasetCountB(self):
        return str(self.datasetCountB)
    # endregion



    """ >>> FUNCTIONS CALLED FOR BINDING ELEMENTS <<< """
    # region
    ''' --> General call to all binding sub-functions <-- '''
    def configureBindings(self):
        print ("TODO")
        self.configureDataTabBindings()
        self.configureTestTabBindings()

    ''' --> Binding elements under the DATA ("DATA") TAB (1) <-- '''
    # region
    def configureDataTabBindings(self):
        # TODO Add integrity check - if ENTRY is edited, change the file input
        self.buttonInitialVarDesc.bind('<Button-1>', self.selectInitVarDesc)
        self.buttonQueryPopulation.bind('<Button-1>', self.selectSetPopulation)

        self.buttonVariableFile.bind('<Button-1>', self.getVariableFile)
        self.buttonValuesFile.bind('<Button-1>', self.getValuesFile)

        # self.buttonStartVariableDescriptor.bind('<Button-1>', self.makeInitialVarDesc) ### TODO
        self.buttonStartDatasetUpload.bind('<Button-1>', self.uploadDataset)

    # endregion

    ''' --> Binding elements under the TEST ("TEST") TAB (2) <-- '''
    # region
    def configureTestTabBindings(self):
        # BUTTONS
        self.buttonQuerySetDataA.bind('<Button-1>', self.querySetDataA)
        self.buttonQuerySetDataB.bind('<Button-1>', self.querySetDataB)

        self.buttonQueryAddFilterA.bind('<Button-1>', self.queryAddFilterA)
        self.buttonQueryAddFilterB.bind('<Button-1>', self.queryAddFilterB)

        # self.buttonQueryFeature.bind('<Button-1>', self.querySetFeature)
        self.buttonQueryFeature.configure(command = self.querySetFeature)
        # self.buttonQueryFeatureA.bind('<Button-1>', self.querySetFeatureA)
        # self.buttonQueryFeatureB.bind('<Button-1>', self.querySetFeatureB)

        self.buttonQueryZTest.bind('<Button-1>', self.queryZTest)
        self.buttonQueryZTestSvP.bind('<Button-1>', self.querySVP)
        self.buttonQueue.bind('<Button-1>', self.queue)

        self.buttonClearQueue.bind('<Button-1>', self.clearQueue)
        self.buttonTestQueue.bind('<Button-1>', self.testQueue)

        self.buttonQueryResetFilterA.bind('<Button-1>', self.queryResetDatasetA)
        self.buttonQueryResetFilterB.bind('<Button-1>', self.queryResetDatasetB)



        # ENTER / LEAVE
        self.buttonQuerySetDataA.bind("<Enter>", self.enterRightArrowPlainIcon)
        self.buttonQuerySetDataA.bind("<Leave>", self.leaveRightArrowPlainIcon)

        self.buttonQuerySetDataB.bind("<Enter>", self.enterRightArrowPlainIcon)
        self.buttonQuerySetDataB.bind("<Leave>", self.leaveRightArrowPlainIcon)
        # self.buttonQuerySetDataB.bind("<Enter>", lambda event, iconSize =  Icon_support.SELECT_ICO_SIZE_BUTTONS: self.enterRightArrowIcon(event, Icon_support.SELECT_ICO_SIZE_BUTTONS))
        # self.buttonQuerySetDataB.bind("<Leave>", self.leaveRightArrowIcon(Icon_support.SELECT_ICO_SIZE_BUTTONS))

        self.buttonQueryAddFilterA.bind("<Enter>", self.enterCheckIcon)
        self.buttonQueryAddFilterA.bind("<Leave>", self.leaveCheckIcon)

        self.buttonQueryAddFilterB.bind("<Enter>", self.enterCheckIcon)
        self.buttonQueryAddFilterB.bind("<Leave>", self.leaveCheckIcon)

        self.buttonQueryFeature.bind("<Enter>", self.enterRightArrowPlainIcon)
        self.buttonQueryFeature.bind("<Leave>", self.leaveRightArrowPlainIcon)

        self.buttonQueryZTest.bind("<Enter>", self.enterCheckIcon)
        self.buttonQueryZTest.bind("<Leave>", self.leaveCheckIcon)

        self.buttonQueue.bind("<Enter>", self.enterAddIcon)
        self.buttonQueue.bind("<Leave>", self.leaveAddIcon)
        # self.buttonQueue.bind("<Enter>", self.enterDownArrowIcon)
        # self.buttonQueue.bind("<Leave>", self.leaveDownArrowIcon)

        self.buttonClearQueue.bind("<Enter>", self.enterCrossIcon)
        self.buttonClearQueue.bind("<Leave>", self.leaveCrossIcon)

        self.buttonTestQueue.bind("<Enter>", self.enterRightArrowIcon)
        self.buttonTestQueue.bind("<Leave>", self.leaveRightArrowIcon)

        self.buttonQueryResetFilterA.bind("<Enter>", self.enterCrossIcon)
        self.buttonQueryResetFilterA.bind("<Leave>", self.leaveCrossIcon)

        self.buttonQueryResetFilterB.bind("<Enter>", self.enterCrossIcon)
        self.buttonQueryResetFilterB.bind("<Leave>", self.leaveCrossIcon)

        # LISTBOX
        self.listQuerySetDataA.bind('<<ListboxSelect>>', self.querySelectDataValuesA)
        self.listQuerySetDataB.bind('<<ListboxSelect>>', self.querySelectDataValuesB)

        self.listQueryDataA.bind('<<ListboxSelect>>', self.setFocusFeatureValues)
        self.listQueryDataB.bind('<<ListboxSelect>>', self.setFocusFeatureValues)

        # MOUSEWHEEL
        self.listQueryDataA.bind("<MouseWheel>", self.scrollFilterListBox)
        self.listQueryDataB.bind("<MouseWheel>", self.scrollFilterListBox)

        # COMBOBOX
        self.comboQueryTest.bind('<<ComboboxSelected>>', self.querySetType)
    # endregion

    # endregion



    """ >>> FUNCTIONS CALLED BY BOUNDED ELEMENTS (e.g. buttons, listboxes) <<< """
    # region

    ''' --> Elements under the DATA ("DATA") TAB (1) <-- '''
    # region
    ''' (?) Generates the initial variable description '''
    def makeInitialVarDesc(self, evt):
        varFileDir = self.entryVariableFile.get()
        valFileDir = self.entryValuesFile.get()

        # tkMessageBox.showinfo("Work in progress",'Make the Initial Variable Descriptor! (WIP)') # TODO!!
        print self.entryQueryPopulation.get()[-4:]

        if self.entryInitialVarDesc.get()[-4:] != ".csv": # TODO Properly check for valid files
            tkMessageBox.showinfo("System Message", "Please enter a valid Variable Description CSV file") # TODO!!

        elif self.entryQueryPopulation.get()[-4:] != ".csv":
            tkMessageBox.showinfo("System Message", "Please enter a valid Population Dataset CSV file") # TODO!!

        else:
            tkMessageBox.showinfo("System Message", "Dataset successfully uploaded!") # TODO!!
            self.Tabs.select(UI_support.TAB_TEST_INDEX)
        return "break"

    ''' (?) Uploads the variable file '''
    def getVariableFile(self, evt):
        varFileDir = askopenfilename(title = "Select variable file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryVariableFile.delete(0, END)
        self.entryVariableFile.insert(0, varFileDir)
        return "break"

    ''' (?) Uploads the values file '''
    def getValuesFile(self, evt):
        valFileDir = askopenfilename(title = "Select values file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryValuesFile.delete(0,END)
        self.entryValuesFile.insert(0, valFileDir)
        return "break"
    ''' Start dataset upload '''

    def uploadDataset(self, evt):
        # Upload initVarDesc (Variable Description)

        if not self.hasUploadedVariableDescription: # Check if variable description was uploaded
            tkMessageBox.showerror("Error: Upload Variable description",
                                   "Please select a valid variable description file.")
            return "break"
        else:
            global features
            features = readFeatures(self.initVarDisc, "^")
            if (len(features)) <= 0:
                tkMessageBox.showerror("Error: Upload Variable description",
                                       "Please select a valid variable description file.")
                return "break"
            # else:
                # tkMessageBox.showinfo("Variable description set", "Variable description uploaded")
                # # getCommonGroups(features)



        # Upload populationDir (Population Dataset)
        if not self.hasUploadedPopulation: # Check if population dataset was uploaded
            tkMessageBox.showerror("Error: Upload Population Dataset",
                                   "Please select a population dataset file.")
            return "break"
        else:
            global populationDir

            self.populationDataset = readCSVDict(populationDir)
            self.populationDatasetOriginalA['Data'] = []
            self.populationDatasetOriginalB['Data'] = []
            self.datasetA['Data'] = []
            self.datasetB['Data'] = []

            if (len(list(self.populationDataset)) <= 0):
                tkMessageBox.showerror("Error: Upload error",
                                       "Error uploading population dataset. Please select a valid file and try again.")
                return "break"

            else:
                # tkMessageBox.showinfo("Population set", "Population dataset uploaded")
                self.populationDataset = readCSVDict(populationDir) # Must read this again here, or it won't register
                for record in self.populationDataset:
                    self.datasetA['Data'].append(record)
                    self.datasetB['Data'].append(record)
                    self.populationDatasetOriginalA['Data'].append(record) # This keeps a copy of the unaltered dataset
                    self.populationDatasetOriginalB['Data'].append(record) # This keeps a copy of the unaltered dataset

                # TODO Show the total samples of the unaltered dataset
                # self.datasetCountA = len(self.datasetA['Data'])
                # self.datasetCountB = len(self.datasetB['Data'])
                self.datasetCountA = 0
                self.datasetCountB = 0

                self.labelQueryDataACount.configure(text = self.getDatasetCountA())
                self.labelQueryDataBCount.configure(text = self.getDatasetCountB())

                print "UPLOADED"

                tkMessageBox.showinfo("System Message", "Dataset successfully uploaded!")
                self.Tabs.select(UI_support.TAB_TEST_INDEX)

        return "break"


    ''' Selects the variable description file '''
    def selectInitVarDesc(self, evt):
        self.hasUploadedVariableDescription = False

        self.initVarDisc = askopenfilename(title = "Select file", filetypes = (("csv files", "*.csv"), ("all files", "*.*")))

        if len(self.initVarDisc) == 0:
            tkMessageBox.showerror("Error: Upload Variable description",
                                   "Please select a valid variable description file.")
        else:
            self.hasUploadedVariableDescription = True
            self.entryInitialVarDesc.delete(0, END)
            self.entryInitialVarDesc.insert(0, self.initVarDisc)

        return "break" # this "unsinks" the button after opening the file explorer

    ''' Selects the population module file '''
    def selectSetPopulation(self, evt):
        self.hasUploadedPopulation = False

        global populationDir
        populationDir = askopenfilename(title = "Select file", filetypes = (("csv files", "*.csv"), ("all files", "*.*")))

        if len(populationDir) == 0:
            tkMessageBox.showerror("Error: Upload error", "Please select a valid population dataset.")
        else:
            self.hasUploadedPopulation = True
            self.entryQueryPopulation.delete(0, END)
            self.entryQueryPopulation.insert(0, populationDir)
        return "break"

    ''' (REMOVE) Shows the project details '''
    def showAbout(self):
        strAbout = "OTOO Miner v4.0\n" \
                   "by TE3D House\n" \
                   "De La Salle University - Laguna"
        tkMessageBox.showinfo("About", strAbout)

    # endregion

    ''' --> Elements under the TEST ("TEST") TAB (2) <-- '''
    # region

    ''' Adds test to the queue '''
    def addToQueue(self, testType, **params):
        global tests
        test = {'Type':testType}
        for key in params:
            if(key == 'popDirArg'):
                test['Population Path'] = copy.copy(params[key])
            elif(key == 'sampleFeatArg'):
                test['Sample Feature'] = copy.copy(params[key])
            elif(key == 'selectedFeatArg'):
                test['Selected Feature'] = copy.copy(params[key])
            elif(key == 'allValArg'):
                test['SF All Values'] = copy.copy(params[key])
            elif(key == 'selValArg'):
                test['SF Selected Values'] = copy.copy(params[key])
            elif(key == 'datasetArgs'):
                test['Datasets'] = copy.deepcopy(params[key])
            elif(key == 'zArg'):
                test['Z Critical Value'] = copy.copy(params[key])
        tests.append(test)
        self.labelQueueCount.configure(text = str(len(tests)))
        tkMessageBox.showinfo("Test queued", test['Type'] + " has been queued.")


        '''
        self.buttonInitialVarDesc.configure(
            background=Color_support.DATASET_BTN_BG, foreground=Color_support.DATASET_BTN_FG,
            text=UI_support.BTN_DATASET_UPLOAD,
            bd=1, relief=GROOVE,
            activebackground=Color_support.DATASET_BTN_BG_ACTIVE, activeforeground=Color_support.DATASET_BTN_FG_ACTIVE,
            disabledforeground=Color_support.FG_DISABLED_COLOR)
        '''

    ''' Function that happens when the 'Enqueue' button is pressed. Adds Chi-Test to the queue '''
    def queue(self, evt):
        self.buttonQueue.configure(relief = FLAT)
        datasets = []
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        global queryType
        if (queryType == 'Sample vs Sample'):
            self.addToQueue(queryType, datasetArgs = datasets)
        else:
            tkMessageBox.showerror("Error: Sample vs Sample not selected", "Please select Sample vs Sample test")
        return "break"

    ''' Conducts all of the chi-tests in the queue (RUN MINER) '''
    def testQueue(self, evt):
        if len(tests) == 0:
            tkMessageBox.showerror("Error: Empty queue", "Queue is empty. Please queue a test.")
            return "break"
            # return -1
        # self.listQueryDataB.delete(0, END)
        i = 0
        for test in tests:
            fileNames = []
            if(test['Type'] == 'Sample vs Sample'):
                i +=  1
                for dataset in test['Datasets']:
                    convertDatasetValuesToGroups(dataset, features)
                    fileName = makeFileName(dataset)
                    writeCSVDict(fileName, dataset['Data'])
                    fileNames.append(fileName)
                if not (os.path.isfile("Updated-Variables.csv")):
                    makeUpdatedVariables(features, "Updated-Variables.csv")
                saveFile = ct.chiTest(fileNames)
                # tempString = "Chi-test complete. " + str(i) + "/" + str(len(tests)) + "complete."
                # self.listQueryDataB.insert(END, tempString) #### TODO Put this somewhere else (CONSOLE)
                removeFiles(fileNames)
        tkMessageBox.showinfo("Test Queue Complete", "All of the tests in the queue have been completed.")
        return "break"

    ''' Clears the tests in the queue. '''
    def clearQueue(self, evt):
        tests[:] = []
        self.labelQueueCount.configure(text = str(len(tests)))
        tkMessageBox.showinfo("Reset", "Queue cleared.")
        self.buttonQueue.configure(relief = FLAT)
        return "break"

    ''' Simultaneously scrolls the FILTER listbox A and B'''
    def scrollFilterListBox (self, evt): # To simultaneously scroll Filter listbox A and B
        self.listQueryDataA.yview("scroll", evt.delta,"units")
        self.listQueryDataB.yview("scroll",evt.delta,"units")
        # this prevents default bindings from firing, which
        # would end up scrolling the widget twice
        return "break"

    '''
    def setFocusFeatureValuesA(self, evt):
        selectedItems = self.listQueryDataA.curselection()
        self.setFocusFeatureValues(selectedItems)

    def setFocusFeatureValuesB(self, evt):
        selectedItems = self.listQueryDataB.curselection()
        self.setFocusFeatureValues(selectedItems)
    '''

    def setFocusFeatureValues(self, evt): ### TODO Add checker if listbox is not empty
        listBox = evt.widget
        selectedItems = listBox.curselection()
        setFocusFeatureValues(self.listQueryDataA, self.datasetA, selectedItems, self.labelQueryDataA, False)
        setFocusFeatureValues(self.listQueryDataB, self.datasetB, selectedItems, self.labelQueryDataB, True)



    ''' Initial (SELECT) query for DATA A '''
    def querySetDataA(self, evt):
        # CLEAR filter feature box first
        self.queryResetFilterDetails(evt)

        try:
            # findFeature(self.entryQuerySetDataA.get(), self.listQuerySetDataA, self.datasetA, "Dataset_Feature")
            findFeature(self.entryQuerySetDataA.get(), self.listQuerySetDataA, self.datasetA, self.populationDatasetOriginalA, True, "Dataset_Feature")
        except NameError:
            tkMessageBox.showerror("Error: No features", "Features not found. Please upload your variable description file.")
        return "break"

    ''' Initial (SELECT) query for DATA B '''
    def querySetDataB(self, evt):
        # CLEAR filter feature box first
        self.queryResetFilterDetails(evt)
        try:
            # findFeature(self.entryQuerySetDataB.get(), self.listQuerySetDataB, self.datasetB, "Dataset_Feature")
            findFeature(self.entryQuerySetDataB.get(), self.listQuerySetDataB, self.datasetB, self.populationDatasetOriginalB, True, "Dataset_Feature")

        except NameError:
            tkMessageBox.showerror("Error: No features", "Features not found. Please upload your variable description file.")
        return "break"

    def queryResetDatasetA(self, evt):
        self.buttonQueryResetFilterA.configure(relief = FLAT)

        self.datasetA = resetDataset()
        self.entryQuerySetDataA.configure(text = '')
        self.entryQueryFeature.configure(text = '')
        self.labelQuerySetDataStatusA.configure(
            text = UI_support.SELECT_STATUS_NO_DATA_TEXT,
            background = Color_support.SELECT_LISTBOX_STATUS_BG,
            foreground = Color_support.SELECT_LISTBOX_STATUS_FG
        )

        # self.labelFrameQueryDataA.configure(text = "Dataset A") ### TODO
        # self.labelQuerySetDataStatusA.configure(text = UI_support.LBL_SELECT_NO_DATA)

        # if self.datasetA['Data'] is []:

        self.datasetCountA = 0 # len(self.datasetA['Data'])
        self.labelQueryDataACount.configure(text = self.getDatasetCountA())
        # self.labelQueryDataACount.configure(text = "" + str(len(self.datasetA['Data']))) ### TODO

        # Empty FILTER details of BOTH A and B
        self.queryResetFilterDetails(evt)
        self.listQuerySetDataA.delete(0, END)


        return "break"

    def queryResetDatasetB(self, evt):
        self.buttonQueryResetFilterB.configure(relief = FLAT)
        self.datasetB = resetDataset()
        self.entryQuerySetDataB.configure(text = '')
        self.entryQueryFeature.configure(text = '')

        # self.labelFrameQueryDataB.configure(text = "Dataset B")
        self.labelQuerySetDataStatusB.configure(
            text = UI_support.SELECT_STATUS_NO_DATA_TEXT,
            background = Color_support.SELECT_LISTBOX_STATUS_BG,
            foreground = Color_support.SELECT_LISTBOX_STATUS_FG
        )

        # if self.datasetB['Data'] is []:
        self.datasetCountB = 0 # len(self.datasetB['Data'])
        self.labelQueryDataBCount.configure(text = self.getDatasetCountB())

        # Empty FILTER details of BOTH A and B
        self.queryResetFilterDetails(evt)
        self.listQuerySetDataB.delete(0,END)

        return "break"

    def queryResetFilterDetails(self, evt):
        # Empty FILTER details of BOTH A and B
        self.labelQueryDataA.configure(text = UI_support.SELECT_STATUS_NO_DATA_TEXT)
        self.listQueryDataA.delete(0, END)

        self.labelQueryDataB.configure(text = UI_support.SELECT_STATUS_NO_DATA_TEXT)
        self.listQueryDataB.delete(0, END)

        self.labelQueryDataFeatureName.configure(
            text = UI_support.FILTER_STATUS_NO_FEATURE_TEXT,
        )


    def querySelectDataValuesA(self, evt):
        self.isReadyDatasetA = False # When a listbox element is de/selected, mark the dataset as not ready
        self.checkIfDatasetReady() # Update dataset status accordingly

        # self.datasetCountA = selectDatasetValues(evt, self.datasetA, self.populationDataset)

        # Do search in populationDatasetOriginal, not filtered dataset A
        # selectDatasetValues(evt, self.datasetA)
        self.datasetCountA = selectDatasetValues(evt, self.populationDatasetOriginalA)

        print ("Pop Dataset A" + str(len(self.populationDatasetOriginalA['Data'])))
        print ("Dataset A" + str(len(self.datasetA['Data'])))

        self.labelQueryDataACount.configure(text = self.getDatasetCountA())
    
    def querySelectDataValuesB(self, evt):
        self.isReadyDatasetB = False # When a listbox element is de/selected, mark the dataset as not ready
        self.checkIfDatasetReady() # Update dataset status accordingly

        # self.datasetCountB = selectDatasetValues(evt, self.datasetB, self.populationDataset)

        # Do search in populationDatasetOriginal, not filtered dataset B
        # self.datasetCountB = selectDatasetValues(evt, self.datasetB)
        self.datasetCountB = selectDatasetValues(evt, self.populationDatasetOriginalB)

        print ("Pop Dataset B" + str(len(self.populationDatasetOriginalB['Data'])))
        print ("Dataset B" + str(len(self.datasetB['Data'])))

        self.labelQueryDataBCount.configure(text = self.getDatasetCountB())

    def queryAddFilterA(self, evt):
        self.isReadyDatasetA = False
        self.buttonQueryAddFilterA.configure(relief = FLAT)
        print ("LEN (Prev) IS " + str(len(self.datasetA['Data'])))
        print ("Dataset A COUNT IS " + str(self.datasetCountA))

        # If the dataset is empty, do not push through with filtering.
        if len(self.datasetA['Data']) <= 0:
            tkMessageBox.showerror("Error: Empty dataset", "Dataset is empty. Please check if you uploaded your population dataset")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)

        # If there are 0 samples in the selection, do not push through with filtering
        elif self.datasetCountA <= 0:
            tkMessageBox.showerror("Error: No samples selected for A", "You must have at least 1 sample in your selection.")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)
            self.labelQuerySetDataStatusA.configure(
                text = UI_support.SELECT_STATUS_NO_DATA_TEXT,
                background = Color_support.SELECT_LISTBOX_STATUS_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_FG
            )
            # return -1

        else:
            # CLEAR filter feature box first
            self.queryResetFilterDetails(evt)
            self.isReadyDatasetA = True
            self.checkIfDatasetReady()
            self.datasetA = copy.deepcopy(self.populationDatasetOriginalA)

            # Filter the data given the feature inputted and its values selected
            try:
                new_data = filterDataset(self.datasetA, self.datasetA['Feature'], self.datasetA['Feature']['Selected Responses'])
                # new_data = filterDataset(self.populationDatasetOriginalA, self.populationDatasetOriginalA['Feature'], self.populationDatasetOriginalA['Feature']['Selected Responses'])
            except KeyError:
                tkMessageBox.showerror("Error: No selected responses", "You did not select any responses. Please select at least one.")
                # return -1
                return "break"

            # Add the feature to the dataset's filtered features
            self.datasetA['Filter Features'].append(self.datasetA['Feature'])
            # self.populationDatasetOriginalA['Filter Features'].append(self.datasetA['Feature'])

            # Assign the new set of filtered data
            self.datasetA['Data'] = new_data
            # self.populationDatasetOriginalA['Data'] = new_data

            if(queryType == 'Sample vs Sample'):
                queryStrFilterA = ''
                # queryStrFilterA = 'Dataset A'
            else:
                # queryStrFilterA = 'Population'
                queryStrFilterA = ''

            # Write the breadcrumb trail of the features and values the dataset was filtered by
            for i in range(0, len(self.datasetA['Filter Features'])):
                # queryStrFilterA = queryStrFilterA + "->" + self.datasetA['Filter Features'][i]['Code']
                queryStrFilterA = " [ " + self.datasetA['Filter Features'][i]['Code'] + " | "
                for j in range(0,len(self.datasetA['Filter Features'][i]['Selected Responses'])):
                    # if j == 0:
                    #     queryStrFilterA = queryStrFilterA + " [ "
                    queryStrFilterA = queryStrFilterA + self.datasetA['Filter Features'][i]['Selected Responses'][j]['Code'] + " "
                    if j == (len(self.datasetA['Filter Features'][i]['Selected Responses']) - 1):
                        queryStrFilterA = queryStrFilterA + "]"

            # self.labelFrameQueryDataA.configure(text = queryStrFilterA) ### TODO
            self.labelQuerySetDataStatusA.configure(
                text = UI_support.LBL_SELECT_READY + "" + queryStrFilterA,
                background = Color_support.SELECT_LISTBOX_STATUS_READY_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_READY_FG
            )

        print ("LEN (After) IS " + str(len(self.datasetA['Data'])))
        print ("Dataset A COUNT IS " + str(self.datasetCountA))
        print ("")
        return "break"

    def queryAddFilterB(self, evt):
        self.isReadyDatasetB = False

        self.buttonQueryAddFilterB.configure(relief = FLAT)
        print ("LEN (Prev) IS " + str(len(self.datasetA['Data'])))
        print ("Dataset B COUNT IS " + str(self.datasetCountB))

        # If the dataset is empty, do not push through with filtering.
        if len(self.datasetB['Data']) <= 0:
            tkMessageBox.showerror("Error: Empty dataset", "Dataset is empty. Please check if you uploaded your population dataset")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)


        # If there are 0 samples in the selection, do not push through with filtering
        elif self.datasetCountB <= 0:
            tkMessageBox.showerror("Error: No samples selected for B", "You must have at least 1 sample in your selection.")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)

            self.labelQuerySetDataStatusB.configure(
                text = UI_support.SELECT_STATUS_NO_DATA_TEXT,
                background = Color_support.SELECT_LISTBOX_STATUS_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_FG
            )
            # return -1

        else:
            # CLEAR filter feature box first
            self.queryResetFilterDetails(evt)
            self.isReadyDatasetB = True
            self.checkIfDatasetReady()
            self.datasetB = copy.deepcopy(self.populationDatasetOriginalB)

            # Filter the data given the feature inputted and its values selected

            try:
                new_data = filterDataset(self.datasetB, self.datasetB['Feature'], self.datasetB['Feature']['Selected Responses'])
            except KeyError:
                tkMessageBox.showerror("Error: No selected responses", "You did not select any responses. Please select at least one.")
                # return -1
                return "break"

            # Add the feature to the dataset's filtered features
            self.datasetB['Filter Features'].append(self.datasetB['Feature'])

            # Assign the new set of filtered data
            self.datasetB['Data'] = new_data

            if(queryType == 'Sample vs Sample'): ### TODO
                queryStrFilterB = ''
            else:
                queryStrFilterB = ''

            # Write the breadcrumb trail of the features and values the dataset was filtered by
            for i in range(0, len(self.datasetB['Filter Features'])):
                # queryStrFilterB = queryStrFilterB + "->" + self.datasetB['Filter Features'][i]['Code']
                queryStrFilterB = " [ " + self.datasetB['Filter Features'][i]['Code'] + " | "
                for j in range(0,len(self.datasetB['Filter Features'][i]['Selected Responses'])):
                    # if j == 0:
                    #     queryStrFilterB = queryStrFilterB + "("
                    queryStrFilterB = queryStrFilterB + self.datasetB['Filter Features'][i]['Selected Responses'][j]['Code'] + " "
                    if j == (len(self.datasetB['Filter Features'][i]['Selected Responses'])-1):
                        queryStrFilterB = queryStrFilterB + "]"


            # Concat the Filter String Here
            # self.labelFrameQueryDataB.configure(text = queryStrFilterB)
            self.labelQuerySetDataStatusB.configure(
                text = UI_support.LBL_SELECT_READY + "" + queryStrFilterB,
                background = Color_support.SELECT_LISTBOX_STATUS_READY_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_READY_FG
            )

        print ("LEN (After) IS " + str(len(self.datasetA['Data'])))
        print ("Dataset B COUNT IS " + str(self.datasetCountB))
        print ("")
        return "break"

    def querySetFeature(self, evt = None):
        entryQuery = self.entryQueryFeature.get()

        # If the dataset is empty, do not continue finding the feature
        if(len(self.datasetA['Data']) <= 0 or len(self.datasetB['Data']) <= 0):
            tkMessageBox.showerror("Error: Empty dataset", "Dataset is empty. Please check if you uploaded your population dataset")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)

        # If one of the sample groups is empty, do not continue finding the feature
        elif self.datasetCountA <= 0:
            tkMessageBox.showerror("Error: No samples selected for A",
                                   "You must have at least 1 sample in your selection.")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)

        elif self.datasetCountB <= 0:
            tkMessageBox.showerror("Error: No samples selected for B",
                                   "You must have at least 1 sample in your selection.")
            # CLEAR filter feature box
            self.queryResetFilterDetails(evt)

        else :
            try:
                self.querySetFeatureA(entryQuery)
                self.querySetFeatureB(entryQuery)

                # Get the feature description
                featureDesc = self.datasetA['Focus Feature']['Description'] # Doesn't matter if you use datasetA or datasetB

                # If the description is too long
                if len(featureDesc) > 70:
                    featureDesc = featureDesc[:71] + '...'  # Shorten it

                # Display the description
                self.labelQueryDataFeatureName.config(text = featureDesc)

            except NameError:
                tkMessageBox.showerror("Error: No features", "Features not found. Please upload your variable description file.")
            except:
                print ("Exception in " + "def querySetFeature(self, evt)")
        return "break"

    ''' Find the feature and display the dataset's frequencies and proportions for each of its values '''
    def querySetFeatureA(self, entryQuery):
        # findFeature(entryQuery, self.listQueryDataA, self.datasetA,"Focus_Feature")
        findFeature(entryQuery, self.listQueryDataA, self.datasetA, self.populationDatasetOriginalA, False, "Focus_Feature")
        '''
        # Get the feature description
        featureDesc = self.datasetA['Focus Feature']['Description']

        # If the description is too long
        if len(featureDesc) > 70:
            featureDesc = featureDesc[:71] + '...' #Shorten it

        # Display the description
        self.labelQueryDataFeatureName.config(text = featureDesc)
        '''

    ''' Find the feature and display the dataset's frequencies and proportions for each of its values '''
    def querySetFeatureB(self, entryQuery):
        # findFeature(entryQuery, self.listQueryDataB, self.datasetB, "Focus_Feature")
        findFeature(entryQuery, self.listQueryDataB, self.datasetB, self.populationDatasetOriginalB, True, "Focus_Feature")


    ''' Conduct the Z-Test between the two samples. '''
    def queryZTest(self, evt):
        self.buttonQueryZTest.configure(relief = FLAT)
        # Get selected confidence interval
        # confidenceInterval = self.comboQueryCriticalValue.get()
        confidenceInterval = self.spinBoxQueryZConfidence.get()

        # Get corresponding Z Critical Value of the confidence interval
        zCritical = arrQueryCriticalValueMapping[confidenceInterval] 

        if 'Focus Feature' in self.datasetA:
            # Check if the selected focus feature and selected values of it are the same for both samples
            isSame = isSameFocusFeat(self.datasetA, self.datasetB, self.datasetA['Focus Feature']['Selected Values'], self.datasetB['Focus Feature']['Selected Values'])
            if(isSame == 1):
                # Calculate Z score between the two samples
                zScore, pPrime, SE = svs.ZTest(self.datasetA['Total'], self.datasetA['ProportionPercent'], self.datasetB['Total'], self.datasetB['ProportionPercent'])
                # Get result if accept/reject compared to the zCritical value
                zResult = svs.compareZtoZCritical(zScore, zCritical)
                # Display Z score and whether accept/reject at inputted confidence interval
                self.labelQueryZTest.configure(text = 'Z-Score: ' + str(round(zScore,2)) +  ', ' + str(float(confidenceInterval)) + ' confidence: '+ zResult)

        return "break"

    ''' Conduct Z-Test between the population and all samples '''
    def querySVP(self,evt):
        confidenceInterval = self.comboQueryCriticalValueSvP.get() #Get selected confidence interval
        zCritical = arrQueryCriticalValueMapping[confidenceInterval] #Get corresponding Z Critical Value
        sampleFeature = self.datasetB['Feature']['Code']
        self.listQueryDataB.delete(0,END)
        #Iterate through every sample 
        for sampleResponse in self.datasetB['Feature']['Responses']:
            resultsRows = []

            sampleValue = sampleResponse['Code'] #Get sample code to get the samples by
            
            #Header of the results file
            header = ['Feature Code','N','F','P','Sample','n','f','p','SE','Z Score','Z Critical Value','LB','UB','Accept/Reject']
            resultsRows.append(header)
            
            #Iterate through every feature
            for feature in features:
                featureValues = [] #Values that are not in group -1. This will be all values of the feature.
                selectedFeatureValues = []#Values within featureValues that are selected by the user. By default, it is just those with group 'b'

                #Iterate through the values of the feature
                for response in feature['Responses']:
                    #If the group of that value is not -1
                    if response['Group'] != '-1': 
                        featureValues.append(response['Code'])#Add to the allValues that will determine n

                        #If the group of the value is 'a'
                        if(response['Group'] == 'a'): #MODIFY THIS SUCH THAT IT CAN BE SELECTED BY THE USER
                            selectedFeatureValues.append(response['Code'])#Add to selectedValues that will determine p
                
                #Convert allValues to string separated by ':'
                allValString = concatListToString(featureValues, ':')

                #Convert selectedValues to string separated by ':'
                selectedValString = concatListToString(selectedFeatureValues, ':')

                #Get results of that sample vs population based on a feature given its values that determine
                # n and values that determine p
                resultRow = svp.sampleVsPopulationSpecific(self.datasetA['Data'],sampleFeature, sampleValue,feature['Code'], allValString, selectedValString,zCritical, ':')
                
                resultsRows.append(resultRow)
            #Write all results of all Z-Tests on all features of that sample in to a .csv file
            fileName = "SVP.csv"
            try:
                fileName = "Z-Test_Sample " +sampleFeature+"("+ sampleValue +")" + "_vs_Pop" + self.datasetA['Feature']['Code']+".csv"
            except KeyError:
                fileName = "Z-Test_Sample " +sampleFeature+"("+ sampleValue +")" + "_vs_Pop.csv"
            writeOnCSV(resultsRows, fileName)
            self.listQueryDataB.insert(END, "Z-Test complete. Saved as " + fileName)
        tkMessageBox.showinfo(testType, testType + " completed.")

    ''' Sets test type: Sample vs Sample (Chi-Test, Z-Test) or Sample vs Population (Z-Test) '''
    def querySetType(self, evt):
        global queryType
        queryType = self.comboQueryTest.get()
        self.adjustQueryViews()

    ''' Disables/enables views (buttons, entry fields etc.) based on test type selected '''
    def adjustQueryViews(self):
        self.buttonQueryFeature.configure(state = "normal")
        # self.buttonQueryFeatureA.configure(state = "normal")
        # self.buttonQueryFeatureB.configure(state = "normal")

        self.entryQueryFeatureA.configure(state = "normal")
        self.entryQueryFeatureB.configure(state = "normal")
        self.buttonQueryZTest.configure(state = "normal")

        self.spinBoxQueryZConfidence.configure(state = "normal")
        # self.comboQueryCriticalValue.configure(state = "normal")

        self.buttonQueue.configure(state = "normal")
        self.buttonClearQueue.configure(state = "normal")
        self.buttonTestQueue.configure(state = "normal")
        #self.buttonTest.configure(state = "normal")
        self.labelQueryZTest.configure(state = "normal")
        self.labelQueryDataA.configure(state = "normal")
        self.labelQueryDataB.configure(state = "normal")
        self.buttonQueryZTestSvP.configure(state = "normal")
        self.comboQueryCriticalValueSvP.configure(state = "normal")
        self.labelQueryZTestSvP.configure(state = "normal")
        self.listQueryDataA.configure(state = "normal")
        self.listQueryDataB.configure(state = "normal")

        self.datasetA = resetDataset()
        self.entryQuerySetDataA.configure(text = '')
        self.entryQueryFeatureA.configure(text = '')
        if self.datasetA is not []:
            self.datasetCountA = len(self.datasetA['Data'])
            self.labelQueryDataACount.configure(text = self.getDatasetCountA())
        self.labelQueryDataA.configure(text = "")
        self.listQueryDataA.delete(0,END)
        self.listQuerySetDataA.delete(0,END)

        self.datasetB = resetDataset()
        self.entryQuerySetDataB.configure(text = '')
        self.entryQueryFeatureB.configure(text = '')
        if self.datasetB is not []:
            self.datasetCountB = len(self.datasetB['Data'])
            self.labelQueryDataBCount.configure(text = self.getDatasetCountB())
        self.labelQueryDataB.configure(text = "")
        self.listQueryDataB.delete(0,END)
        self.listQuerySetDataB.delete(0,END)

        if queryType == 'Sample vs Population':
            self.buttonQueryFeature.configure(state = "disabled")
            # self.buttonQueryFeatureA.configure(state = "disabled")
            # self.buttonQueryFeatureB.configure(state = "disabled")
            self.entryQueryFeatureA.configure(state = "disabled")
            self.entryQueryFeatureB.configure(state = "disabled")
            self.buttonQueryZTest.configure(state = "disabled")

            self.spinBoxQueryZConfidence.configure(state = "disabled")
            # self.comboQueryCriticalValue.configure(state = "disabled")

            self.buttonQueue.configure(state = "disabled")
            self.buttonClearQueue.configure(state = "disabled")
            self.buttonTestQueue.configure(state = "disabled")
            #self.buttonTest.configure(state = "disabled")
            self.labelQueryZTest.configure(state = "disabled")
            self.labelQueryDataA.configure(state = "disabled")
            self.labelQueryDataB.configure(state = "disabled")
            self.listQueryDataA.configure(state = "disabled")
            # self.labelFrameQueryDataA.configure(text = "Population") ### TODO
            # self.labelFrameQueryDataB.configure(text = "Samples")
            self.labelQuerySetDataStatusA.configure(
                text = UI_support.LBL_SELECT_NO_DATA,
                background = Color_support.L_GRAY
            )
            self.labelQuerySetDataStatusB.configure(
                text = UI_support.LBL_SELECT_NO_DATA,
                background = Color_support.L_GRAY
            )

            # self.labelQueryDataBCount.configure(text = "")

        else:
            self.buttonQueryZTestSvP.configure(state = "disabled")

            self.comboQueryCriticalValueSvP.configure(state = "disabled")

            self.labelQueryZTestSvP.configure(state = "disabled")
            # self.labelFrameQueryDataA.configure(text = "Dataset A") ### TODO
            # self.labelFrameQueryDataB.configure(text = "Dataset B")
            self.labelQuerySetDataStatusA.configure(
                text = UI_support.LBL_SELECT_NO_DATA,
                background = Color_support.L_GRAY
            )
            self.labelQuerySetDataStatusB.configure(
                text = UI_support.LBL_SELECT_NO_DATA,
                background = Color_support.L_GRAY
            )

    def querySetAllFeatures(self):
        #Test items
        global strarrAllFeatures
        strarrAllFeatures = list(self.listQuerySetDataA.get(0, END))
    # endregion

    # endregion




    """ >>> HELPER FUNCTIONS CALLED BY BOUNDED ELEMENTS (e.g. enter, leave) <<< """
    # TODO Optimize (avoid resizing, keep a reference)
    # region
    def enterCheckIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_check_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_check_icon)
        item.image = btn_check_icon  # < ! > Required to make images appear

    def leaveCheckIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_check_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_check_icon)
        item.image = btn_check_icon  # < ! > Required to make images appear

    def enterCrossIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_cross_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_cross_icon)
        item.image = btn_cross_icon  # < ! > Required to make images appear

    def leaveCrossIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_cross_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_cross_icon)
        item.image = btn_cross_icon  # < ! > Required to make images appear

    def enterAddIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_ADD_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_add_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_add_icon)
        item.image = btn_add_icon  # < ! > Required to make images appear

    def leaveAddIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_ADD).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_add_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_add_icon)
        item.image = btn_add_icon  # < ! > Required to make images appear

    def enterDownArrowIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        item = event.widget

        im = PIL.Image.open(Icon_support.TAB_ICO_DOWN_ARROW_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_down_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item.configure(
            image = btn_down_arrow_icon)
        item.image = btn_down_arrow_icon  # < ! > Required to make images appear

    def leaveDownArrowIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_DOWN_ARROW).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_down_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_down_arrow_icon)
        item.image = btn_down_arrow_icon  # < ! > Required to make images appear

    def enterRightArrowIcon(self, event, iconSize = Icon_support.RUN_ICO_SIZE):
        item = event.widget

        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_right_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item.configure(
            image = btn_right_arrow_icon)
        item.image = btn_right_arrow_icon  # < ! > Required to make images appear

    def leaveRightArrowIcon(self, event, iconSize = Icon_support.RUN_ICO_SIZE):
        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_right_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_right_arrow_icon)
        item.image = btn_right_arrow_icon  # < ! > Required to make images appear

    def enterRightArrowPlainIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE_BUTTONS):
        item = event.widget

        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW_PLAIN_ON).resize(iconSize, PIL.Image.ANTIALIAS)

        btn_right_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item.configure(
            image = btn_right_arrow_icon)
        item.image = btn_right_arrow_icon  # < ! > Required to make images appear

    def leaveRightArrowPlainIcon(self, event, iconSize = Icon_support.SELECT_ICO_SIZE_BUTTONS):
        im = PIL.Image.open(Icon_support.TAB_ICO_RIGHT_ARROW_PLAIN).resize(iconSize, PIL.Image.ANTIALIAS)
        btn_right_arrow_icon = PIL.ImageTk.PhotoImage(im)
        item = event.widget
        item.configure(
            image = btn_right_arrow_icon)
        item.image = btn_right_arrow_icon  # < ! > Required to make images appear

    '''
    def enterQueryAddFilterA(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK_ON).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryAddFilterA.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterA.image = btn_query_filter_icon  # < ! > Required to make images appear

    def leaveQueryAddFilterA(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryAddFilterA.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterA.image = btn_query_filter_icon  # < ! > Required to make images appear

    def enterQueryAddFilterB(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK_ON).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonQueryAddFilterB.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterB.image = btn_query_filter_icon  # < ! > Required to make images appear


    def leaveQueryAddFilterB(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonQueryAddFilterB.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryAddFilterB.image = btn_query_filter_icon  # < ! > Required to make images appear


    def enterQueryResetFilterA(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS_ON).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)

        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonQueryResetFilterA.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterA.image = btn_query_reset_icon  # < ! > Required to make images appear


    def leaveQueryResetFilterA(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonQueryResetFilterA.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterA.image = btn_query_reset_icon  # < ! > Required to make images appear


    def enterQueryResetFilterB(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS_ON).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterB.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterB.image = btn_query_reset_icon  # < ! > Required to make images appear

    def leaveQueryResetFilterB(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CROSS).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterB.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterB.image = btn_query_reset_icon  # < ! > Required to make images appear
    '''

    def enterQueryZTest(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK_ON).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryZTest.configure(
            image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryZTest.image = btn_query_z_test_icon  # < ! > Required to make images appear

    def leaveQueryZTest(self, event):
        im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryZTest.configure(
            image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryZTest.image = btn_query_z_test_icon  # < ! > Required to make images appear
    # endregion


    """ >>> GENERAL HELPER FUNCTIONS <<< """
    # region
    def checkIfDatasetReady(self):
        if not self.isReadyDatasetA: # If Dataset A is not ready
            # Clear and disable filter features option
            self.disableFilter()
            self.setDatasetStatusReady(False, self.labelQuerySetDataStatusA)

        if not self.isReadyDatasetB: # If Dataset B is not ready
            # Clear and disable filter features option
            self.disableFilter()
            self.setDatasetStatusReady(False, self.labelQuerySetDataStatusB)

        if self.isReadyDatasetA and self.isReadyDatasetB: # If both are ready
            # Enable filter feature option
            self.enableFilter()


    def disableFilter(self):
        # Clear filter results
        event = None
        self.queryResetFilterDetails(event)

        # Disable entry
        self.entryQueryFeature.configure(
            state = DISABLED
        )
        # Disable button
        self.buttonQueryFeature.configure(
            state = DISABLED
        )
    def enableFilter(self):
        # Enable entry
        self.entryQueryFeature.configure(
            state = NORMAL
        )
        # Enable button
        self.buttonQueryFeature.configure(
            state = NORMAL
        )

    def setDatasetStatusReady(self, isReady, statusWidget):
        if isReady:
            statusWidget.configure(
                background = Color_support.SELECT_LISTBOX_STATUS_READY_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_READY_FG,
                relief = GROOVE
            )
        else:
            statusWidget.configure(
                text = UI_support.SELECT_STATUS_NO_DATA_TEXT,
                background = Color_support.SELECT_LISTBOX_STATUS_BG,
                foreground = Color_support.SELECT_LISTBOX_STATUS_FG,
                relief = UI_support.SELECT_LISTBOX_RELIEF
            )

    # endregion


if __name__ == '__main__':
    vp_start_gui()




