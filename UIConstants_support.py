
import collections

# Constants for Automated Mining
# For RFE
MAX_RANK = 3  # The max rank of SSFs that RFE will select

# For AM UI
LIST_LEVELS_MAPPING = {"1": 1, "2": 2, "3": 3}
# LIST_LEVELS = ["1", "2", "3"]
LIST_LEVELS = [1, 2, 3]


# For Cross Process
MAX_CROSS_REFERENCE = 3  # Tells until which CROSS type to perform
MAX_LEVEL_REFERENCE = 3  # Tells until which LEVEL to do per cross type
STRING_VS = " VS "

# TODO Change SpinBox Defaults if this is changed permanently
MAX_CROSS = 1  # Tells until which CROSS type to perform
MAX_LEVEL = 1  # Tells until which LEVEL to do per cross type

# For Chi-square
P_CUTOFF = 0.001

# For Multiprocessing
PROCESS_COUNT = 3
POOL_COUNT = 3


# For Progress Bar

# global KEY_RFE_MODULE, KEY_FILTERING_MODULE, KEY_PRE_CROSS_MODULE, KEY_CROSS_MODULE
KEY_RFE_MODULE = "RFE"
KEY_FILTERING_MODULE = "FILTERING"
KEY_PRE_CROSS_MODULE = "PRE_CROSS_PROCESS"
KEY_CROSS_MODULE = "CROSS_PROCESS"
KEY_OUTPUT_MODULE = "OUTPUT"

# global RFE_SECTION_NUMBER, RFE_MAX_PROCESS_COUNT, RFE_PROCESS_ITERATOR
RFE_SECTION_NUMBER = 1
RFE_MAX_PROCESS_COUNT = 5  # Manually update this according to module
RFE_PROCESS_ITERATOR = 0

# global FILTERING_SECTION_NUMBER, FILTERING_MAX_PROCESS_COUNT, FILTERING_PROCESS_ITERATOR
FILTERING_SECTION_NUMBER = 2
FILTERING_MAX_PROCESS_COUNT = 2  # Manually update this according to module
FILTERING_PROCESS_ITERATOR = 0

# global PRE_CROSS_SECTION_NUMBER, PRE_CROSS_MAX_PROCESS_COUNT, PRE_CROSS_PROCESS_ITERATOR
PRE_CROSS_SECTION_NUMBER = 3
PRE_CROSS_MAX_PROCESS_COUNT = 4  # Manually update this according to module
PRE_CROSS_PROCESS_ITERATOR = 0


# global CROSS_SECTION_NUMBER, CROSS_MAX_PROCESS_COUNT, CROSS_PROCESS_ITERATOR
CROSS_SECTION_NUMBER = 4
CROSS_MAX_PROCESS_COUNT = 1  # Update this through the code
CROSS_PROCESS_ITERATOR = 0

# global OUTPUT_SECTION_NUMBER, OUTPUT_MAX_PROCESS_COUNT, OUTPUT_PROCESS_ITERATOR
OUTPUT_SECTION_NUMBER = 5
OUTPUT_MAX_PROCESS_COUNT = 2  # Manually update this according to module
OUTPUT_PROCESS_ITERATOR = 0


TOTAL_SECTIONS = float(OUTPUT_SECTION_NUMBER)
RFE_SECTION_PERCENT = float(RFE_SECTION_NUMBER) / TOTAL_SECTIONS
FILTERING_SECTION_PERCENT = float(FILTERING_SECTION_NUMBER) / TOTAL_SECTIONS
PRE_CROSS_SECTION_PERCENT = float(PRE_CROSS_SECTION_NUMBER) / TOTAL_SECTIONS
CROSS_SECTION_PERCENT = float(CROSS_SECTION_NUMBER) / TOTAL_SECTIONS
OUTPUT_SECTION_PERCENT = float(OUTPUT_SECTION_NUMBER) / TOTAL_SECTIONS

IS_INITIALIZED = False




'''
    Given a key, iterate through the declared keys in this
     script and return the necessary values.
'''
def getProcessKeyValues(key):

    if key is KEY_RFE_MODULE:
        return [RFE_MAX_PROCESS_COUNT, RFE_PROCESS_ITERATOR]

    if key is KEY_FILTERING_MODULE:
        return [FILTERING_MAX_PROCESS_COUNT, FILTERING_PROCESS_ITERATOR]

    if key is KEY_PRE_CROSS_MODULE:
        return [CROSS_MAX_PROCESS_COUNT, CROSS_PROCESS_ITERATOR]

    if key is KEY_CROSS_MODULE:
        return [CROSS_MAX_PROCESS_COUNT, CROSS_PROCESS_ITERATOR]



'''
    Iterate through process keys then increment and return their
    corresponding iterator values accordingly.
'''
def iterateProcessKey(key):
    global RFE_SECTION_NUMBER, RFE_MAX_PROCESS_COUNT, RFE_PROCESS_ITERATOR
    global FILTERING_SECTION_NUMBER, FILTERING_MAX_PROCESS_COUNT, FILTERING_PROCESS_ITERATOR
    global PRE_CROSS_SECTION_NUMBER, PRE_CROSS_MAX_PROCESS_COUNT, PRE_CROSS_PROCESS_ITERATOR
    global CROSS_SECTION_NUMBER, CROSS_MAX_PROCESS_COUNT, CROSS_PROCESS_ITERATOR
    global OUTPUT_SECTION_NUMBER, OUTPUT_MAX_PROCESS_COUNT, OUTPUT_PROCESS_ITERATOR


    if key is KEY_RFE_MODULE:
        if RFE_PROCESS_ITERATOR <= RFE_MAX_PROCESS_COUNT:
            RFE_PROCESS_ITERATOR = RFE_PROCESS_ITERATOR + 1
        else:
            RFE_PROCESS_ITERATOR = RFE_MAX_PROCESS_COUNT

    if key is KEY_FILTERING_MODULE:
        if FILTERING_PROCESS_ITERATOR <= FILTERING_MAX_PROCESS_COUNT:
            FILTERING_PROCESS_ITERATOR = FILTERING_PROCESS_ITERATOR + 1
        else:
            FILTERING_PROCESS_ITERATOR = FILTERING_MAX_PROCESS_COUNT

    if key is KEY_PRE_CROSS_MODULE:
        if PRE_CROSS_PROCESS_ITERATOR <= PRE_CROSS_MAX_PROCESS_COUNT:
            PRE_CROSS_PROCESS_ITERATOR = PRE_CROSS_PROCESS_ITERATOR + 1
        else:
            PRE_CROSS_PROCESS_ITERATOR = PRE_CROSS_MAX_PROCESS_COUNT

    if key is KEY_CROSS_MODULE:
        if CROSS_PROCESS_ITERATOR <= CROSS_MAX_PROCESS_COUNT:
            CROSS_PROCESS_ITERATOR = CROSS_PROCESS_ITERATOR + 1
        else:
            CROSS_PROCESS_ITERATOR = CROSS_MAX_PROCESS_COUNT

    if key is KEY_OUTPUT_MODULE:
        if OUTPUT_PROCESS_ITERATOR <= OUTPUT_MAX_PROCESS_COUNT:
            OUTPUT_PROCESS_ITERATOR = OUTPUT_PROCESS_ITERATOR + 1
        else:
            OUTPUT_PROCESS_ITERATOR = OUTPUT_MAX_PROCESS_COUNT

def getSectionPercent(key):
    if key is KEY_RFE_MODULE:
        return RFE_SECTION_PERCENT

    if key is KEY_FILTERING_MODULE:
        return FILTERING_SECTION_PERCENT

    if key is KEY_PRE_CROSS_MODULE:
        return PRE_CROSS_SECTION_PERCENT

    if key is KEY_CROSS_MODULE:
        return CROSS_SECTION_PERCENT

















