#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 26, 2018 12:01:25 PM

"""
{Description}
Manual Mining User Interface
"""

__author__ = ["Arren Antioquia", "Arces Talavera", "Jet Virtusio",
              "Edmund Gerald Cruz", "Rgee Gallega",
              "Candy Espulgar"]

__copyright__ = "Copyright 2019, TE3D House"
__credits__ = ["Arnulfo Azcarraga"]
__version__ = "3.0"


from tkinter.ttk import *
import tkinter as tk
from tkinter import Entry
import _Icon_support
import PIL.Image
import PIL.ImageTk
import CONSTANTS as const
import _UI_support as US
import Function_support as FS
import _Widget_support as WS
import _Color_support as CS
import __Loader_support as LS

import _UIConstants_support as UICS


class AutomatedMining_View:

    def __init__(self, parentFrame, root):
        self.__parentFrame = parentFrame
        self.root = root
        self.configureTestTabElements(parentFrame)
        self.configureTestTabConsoleElements(parentFrame)

        self.configureSeparators(parentFrame)

    def setArrQueryCriticalValue(self, arrayValue):
        self.arrQueryCriticalValue = arrayValue

    def setArrQueryCriticalValueMapping(self, arrayValue):
        self.arrQueryCriticalValueMapping = arrayValue

    def configureSeparators(self, parentFrame):
        parentFrame.update()

        # region emborder console
        borderX = (FS.rootWidth - FS.rootTabWidth) * (float(self.labelFrameConsoleElements.place_info()['relx']) - 0.015)
        WS.emborder(parentFrame,
                    [borderX, 0, 1, FS.rootHeight],
                    [False, False, False, True])
        # endregion emborder console

        # region emborder for tab
        WS.emborder(parentFrame,
                    [0, 0, 1, FS.rootHeight],
                    [False, False, False, True])
        # endregion emborder for tab

    """ >>> CONFIGURE MAIN TABS <<< """
    # region
    ''' --> Configure TEST ("TEST") TAB (2.1) <-- '''

    def configureTestTabElements(self, parentFrame):
        self.testTabParentFrame = tk.LabelFrame(parentFrame, bd = 0)
        self.testTabParentFrame.place(
            relx = US.TAB_REL_X, rely = US.TAB_REL_Y,
            relwidth = US.TAB_REL_W, relheight = US.TAB_REL_H
        )
        self.testTabParentFrame.configure(
            background = CS.TAB_BG_COLOR, foreground = CS.FG_COLOR
        )

        # TYPE Parent Frame
        self.labelFrameTypeElements = tk.LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameTypeElements.place(
            relx = US.TAB_TEST_TYPE_REL_X, rely = US.TAB_TEST_TYPE_REL_Y,
            relwidth = US.TAB_TEST_TYPE_REL_W, relheight = US.TAB_TEST_TYPE_REL_H
            # + 0.05 # TODO Type edit
        )
        self.labelFrameTypeElements.configure(
            background = CS.TYPE_BG, foreground = CS.FG_COLOR  # , text = '''TYPE'''
        )

        newRelY = FS.getRelY(self.labelFrameTypeElements) + FS.getRelH(self.labelFrameTypeElements)






        # PROCESS Parent Frame (Datasets)
        self.labelFrameProcessElements = tk.LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameProcessElements.place(
            # relx = US.TAB_TEST_PROCESS_REL_X,
            relx = US.TAB_TEST_PROCESS_REL_X,
            rely = newRelY,
            relwidth = US.TAB_TEST_PROCESS_REL_W,
            relheight = US.TAB_TEST_PROCESS_REL_H
        )
        self.labelFrameProcessElements.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR  # , text = '''PROCESS'''
        )
        self.configureProcessElements(self.labelFrameProcessElements)  # Configures all sub elements under FILTER








        # tk.SELECT Parent Frame
        newRelY = FS.getRelY(self.labelFrameProcessElements) + FS.getRelH(self.labelFrameProcessElements) - 0.025

        self.labelFrameSelectElements = tk.LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameSelectElements.place(
            relx = FS.getRelX(self.labelFrameProcessElements),
            rely = newRelY,
            relwidth = US.TAB_TEST_SELECT_REL_W, relheight = US.TAB_TEST_SELECT_REL_H
        )
        self.labelFrameSelectElements.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR  # , text = '''SELECT'''
        )
        self.configureSelectElements(self.labelFrameSelectElements)  # Configures all sub elements under tk.SELECT



        prevFrameRelX = float(self.labelFrameSelectElements.place_info()['relx'])
        prevFrameRelW = float(self.labelFrameSelectElements.place_info()['relwidth'])
        newRelX = prevFrameRelX + prevFrameRelW






        newRelY = FS.getRelY(self.labelFrameSelectElements) + FS.getRelH(
            self.labelFrameSelectElements)  + 0.025  # TODO Make constant (space in between)

        # FILTER Parent Frame
        self.labelFrameFilterElements = tk.LabelFrame(self.testTabParentFrame, bd = 0)
        self.labelFrameFilterElements.place(
            relx = US.TAB_TEST_FILTER_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_REL_W, relheight = US.TAB_TEST_FILTER_REL_H
        )
        self.labelFrameFilterElements.configure(
            background = CS.FILTER_BG, foreground = CS.FG_COLOR  # , text = '''FILTER'''
        )

        self.configureFilterElements(self.labelFrameFilterElements)  # Configures all sub elements under FILTER








        # CONSOLE Parent Frame
        self.labelFrameConsoleElements = tk.LabelFrame(self.testTabParentFrame, bd = 0, relief = tk.GROOVE)
        # self.labelFrameConsoleElements.place(
        #     relx = newRelX, rely = US.TAB_TEST_CONSOLE_REL_Y,
        #     relwidth = US.TAB_TEST_CONSOLE_REL_W, relheight = US.TAB_TEST_CONSOLE_REL_H
        # )
        self.labelFrameConsoleElements.place(
            relx = newRelX, rely = 0,
            relwidth = US.TAB_TEST_CONSOLE_REL_W, relheight = 1
        )
        self.labelFrameConsoleElements.configure(
            background = CS.WHITE, foreground = CS.FG_COLOR  # , text = '''CONSOLE'''
        )

        self.configureConsoleElements(self.labelFrameConsoleElements)  # Configures all sub elements under CONSOLE



    ''' --> Configure TEST ("TEST") TAB (2.2) <-- '''

    def configureTestTabConsoleElements(self, parentFrame):
        self.testTabConsoleParentFrame = tk.LabelFrame(parentFrame, bd = 0)
        newRelW = 0.2
        # self.testTabConsoleParentFrame.place(
        #     relx = 1 - newRelW,
        #     rely = FS.getRelY(self.testTabParentFrame),
        #     relwidth = newRelW,
        #     relheight = FS.getRelH(self.testTabParentFrame)
        # )
        self.testTabConsoleParentFrame.configure(
            background = CS.D_BLUE, foreground = CS.FG_COLOR
        )


    # endregion



    """ >>> FUNCTIONS FOR THE CONFIGURATION OF UI ELEMENTS <<< """
    # region

    ''' --> Elements under TEST ("TEST") TAB (2) <-- '''
    # region
    ''' -> Elements under the tk.SELECT ("GROUP") HEADER <- '''

    def configureSelectElements(self, parentFrame):

        global queryStrFilterB

        # tk.SELECT TITLE
        self.labelFrameSelectTitle = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameSelectTitle.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.12)
        self.labelFrameSelectTitle.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR  # , text = '''FILTER'''
        )

        # Create the top separator
        # self.labelFrameSelectHorizontalSeparator = Separator(self.labelFrameSelectTitle, orient = tk.HORIZONTAL)
        # self.labelFrameSelectHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)

        # COLORED tk.SEPARATOR
        self.separatorlabelFrameSelectTitleNumber = self.createLabelSeparator(
            self.labelFrameSelectTitle, 1,
            False, CS.FILTER_TITLE_BG, US.TITLE_SEPARATOR_H,
            0.5, tk.W
        )

        # tk.SELECT NUMBER
        self.labelFrameSelectTitleNumber = tk.Label(self.labelFrameSelectTitle)
        newRelY = US.LABEL_TITLE_REL_Y
        self.labelFrameSelectTitleNumber.place(
            relx = 0, rely = newRelY,
            relwidth = 0.04 + 0.05,
            relheight = 1 - (newRelY * 2), anchor = tk.NW)

        self.labelFrameSelectTitleNumber.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.FILTER_NUMBER_BG, foreground = CS.FILTER_NUMBER_FG,
            text = '''2  ''',
            bd = 1, relief = tk.GROOVE,
            anchor = tk.SE
        )
        newRelX = FS.getRelX(self.labelFrameSelectTitleNumber) + FS.getRelW(self.labelFrameSelectTitleNumber)

        # tk.SELECT TITLE
        self.labelFrameSelectTitleText = tk.Label(self.labelFrameSelectTitle)
        newRelY = FS.getRelY(self.labelFrameSelectTitleNumber)
        newRelH = FS.getRelH(self.labelFrameSelectTitleNumber)
        self.labelFrameSelectTitleText.place(
            relx = newRelX - 0.001, rely = newRelY,
            relwidth = 0.15, relheight = newRelH, anchor = tk.NW)
        self.labelFrameSelectTitleText.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.FILTER_TITLE_BG, foreground = CS.FILTER_TITLE_FG,
            text = '''SEARCH''',
            bd = 0, relief = tk.GROOVE,
            anchor = tk.S
        )
        # Title border
        self.separatorlabelFrameSelectTitleText = self.createLabelSeparator(
            self.labelFrameSelectTitleText, 1,
            True, CS.WHITE,
            coordinate = 0.99, specifiedAnchor = tk.NW
        )

        newRelY = FS.getRelY(self.labelFrameSelectTitle) + FS.getRelH(
            self.labelFrameSelectTitle)  # + US.TAB_TEST_FILTER_QUERY_REL_Y
        titleRelH = FS.getRelH(self.labelFrameSelectTitle)

        self.labelFrameDatasetA = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameDatasetA.place(
            relx = 0.05, rely = newRelY,
            # relwidth = US.TAB_TEST_SELECT_DATASET_REL_W, relheight = 1 - titleRelH
            relwidth = 0.46, relheight = 1 - titleRelH
        )
        self.labelFrameDatasetA.configure(
            background = CS.PROCESS_BG
        )
        newRelH = FS.getRelH(self.labelFrameDatasetA)
        self.labelFrameDatasetB = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameDatasetB.place(
            relx = US.TAB_TEST_SELECT_DATASET_REL_W + 0.15 - 0.06,
            # (2 * FS.getRelX(self.labelFrameDatasetA)) + FS.getRelW(self.labelFrameDatasetA),
            # rely = newRelY, relwidth = 0.4, relheight = newRelH
            rely = newRelY, relwidth = 0.46, relheight = newRelH
        )
        self.labelFrameDatasetB.configure(
            background = CS.PROCESS_BG
        )

        # DATASET tk.SEPARATOR
        self.labelFrameDatasetCenterSeparator = Separator(parentFrame, orient = tk.VERTICAL)
        self.labelFrameDatasetCenterSeparator.place(relx = 0.5, rely = newRelY + 0.05, relheight = 1 - titleRelH - 0.1)

        # QUERY PARENT (DATASET A)
        self.labelFrameQueryDataA = tk.LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameQueryDataA.place(
            relx = US.TAB_TEST_SELECT_QUERY_REL_X, rely = US.TAB_TEST_SELECT_QUERY_REL_Y,
            relwidth = US.TAB_TEST_SELECT_QUERY_REL_W, relheight = US.TAB_TEST_SELECT_QUERY_REL_H)
        self.labelFrameQueryDataA.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.PROCESS_ENTRY_FG,
            relief = tk.GROOVE  # , text = '''Dataset A'''
        )

        # QUERY tk.STATUS CHILD - DATASET A
        # region
        self.lblStatusSourceFolder = tk.Label(self.labelFrameQueryDataA)
        # self.labelQuerySetDataStatusA = tk.Label(self.labelFrameQuerySetDataStatusA)
        # self.labelQuerySetDataStatusA = tk.Label(self.labelFrameListBoxA)
        self.lblStatusSourceFolder.place(relx = 0, rely = 0, relwidth = 1, relheight = 1)
        # self.labelQuerySetDataStatusA.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)
        self.lblStatusSourceFolder.configure(
            background = CS.PROCESS_LISTBOX_STATUS_BG, foreground = CS.PROCESS_LISTBOX_STATUS_FG,
            bd = US.SELECT_STATUS_LABEL_BORDER, relief = US.SELECT_STATUS_LABEL_RELIEF,
            text = "SIGNIFICANT FEATURES",
            font = US.SELECT_STATUS_LABEL_FONT,
        )
        if US.SELECT_STATUS_LABEL_TOP_SEPARATOR:
            self.labelFrameNoDataAHorizontalSeparator = Separator(self.lblStatusSourceFolder,
                                                                      orient = tk.HORIZONTAL)
            self.labelFrameNoDataAHorizontalSeparator.place(relx = 0, rely = 0, relwidth = 1, anchor = tk.NW)
        # endregion

        # LISTBOX PARENT (DATASET A)
        # region
        newRelY = US.TAB_TEST_LISTBOX_QUERY_REL_Y + FS.getRelY(self.labelFrameQueryDataA) + FS.getRelH(
            self.labelFrameQueryDataA)

        self.labelFrameListBoxA = tk.LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameListBoxA.place(
            relx = US.TAB_TEST_LISTBOX_QUERY_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_LISTBOX_QUERY_REL_W, relheight = US.TAB_TEST_LISTBOX_QUERY_REL_H)

        # QUERY tk.STATUS PARENT - DATASET A
        # region
        # newRelY = FS.getRelY(self.listQuerySetDataA) + FS.getRelH(self.listQuerySetDataA)
        # newRelH = 1 - FS.getRelH(self.listQuerySetDataA)

        self.labelFrameQuerySetDataStatusA = tk.LabelFrame(self.labelFrameListBoxA, bd = 0)
        # self.labelFrameQuerySetDataStatusA.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)
        specifiedListBoxHeight = (0.78 - 0.03)
        newRelH = 1 - specifiedListBoxHeight  # TODO Make constant (0.78 - 0.03) is the listbox's supposed height
        self.labelFrameQuerySetDataStatusA.place(relx = 0, rely = 0, relwidth = 1, relheight = newRelH)

        # QUERY TOP tk.STRIPE PARENT - DATASET A
        # region
        # newRelH = FS.getRelH(self.labelFrameQuerySetDataStatusA) * 7 / 11 # 5 / 8 # TODO Make constant reference
        newRelH = FS.getRelH(
            self.labelFrameQuerySetDataStatusA) * US.SELECT_LABEL_STRIPES_REL_H_MULTIPLIER  # 5 / 8 # TODO Make constant reference
        self.lblStripesFeatureCodes = tk.Label(self.labelFrameListBoxA, bd = 0, relief = tk.GROOVE)
        self.lblStripesFeatureCodes.place(
            relx = 0,
            rely = 0,
            # rely = newRelY,
            relwidth = 1,
            relheight = newRelH,
            anchor = tk.NW
        )
        newRelY = FS.getRelY(self.lblStripesFeatureCodes) + FS.getRelH(self.lblStripesFeatureCodes)
        self.labelFrameQuerySetDataStatusA.place(
            relx = FS.getRelX(self.labelFrameQuerySetDataStatusA),
            rely = newRelY,
            relwidth = FS.getRelW(self.labelFrameQuerySetDataStatusA),
            relheight = FS.getRelH(self.labelFrameQuerySetDataStatusA),
        )
        im = PIL.Image.open(
            _Icon_support.TEXTURE_STRIPE_ORANGE)
        texture_pink_stripes = PIL.ImageTk.PhotoImage(im)
        self.lblStripesFeatureCodes.configure(
            image = texture_pink_stripes,
            anchor = tk.SW
        )
        self.lblStripesFeatureCodes.image = texture_pink_stripes  # < ! > Required to make images appear
        # endregion

        # QUERY FRAME - DATASET A
        # region
        # self.labelFrameBorderQuerySetDataA = tk.LabelFrame(self.labelFrameQueryDataA, bd = 0)
        self.labelFrameBorderQuerySetDataA = tk.LabelFrame(self.labelFrameQuerySetDataStatusA, bd = 0)
        self.labelFrameBorderQuerySetDataA.place(
            relx = 0, rely = 0,
            relwidth = US.TAB_TEST_SELECT_LBL_REL_W, relheight = 1
        )
        self.labelFrameBorderQuerySetDataA.configure(
            background = CS.FILTER_BUTTONS_BG
        )

        self.lblQuerySourceFolder = tk.Label(self.labelFrameBorderQuerySetDataA)

        self.lblQuerySourceFolder.place(
            relx = 0.01, rely = 0.025,
            relwidth = 0.98, relheight = 0.95)
        self.lblQuerySourceFolder.configure(
            background = CS.FILTER_LABEL_BG, foreground = CS.FILTER_TITLE_BG,
            text = "Folder Name",
            font = US.SELECT_LABEL_FONT,
            bd = 0, relief = tk.FLAT,
        )

        newRelX = FS.getRelX(self.labelFrameBorderQuerySetDataA) + FS.getRelW(
            self.labelFrameBorderQuerySetDataA)  # + US.TAB_3CHILD_LBL_REL_X

        # ENTRY - DATASET A
        # region
        # self.entryQuerySetDataA = Entry(self.labelFrameQueryDataA)

        self.entrySourceFolderFilename = Entry(self.labelFrameQuerySetDataStatusA)
        self.entrySourceFolderFilename.place(
            relx = newRelX, rely = 0,
            relwidth = US.TAB_TEST_SELECT_ENTRY_REL_W, relheight = 1)
        self.entrySourceFolderFilename.configure(
            background = CS.FILTER_ENTRY_BG, foreground = CS.FILTER_ENTRY_FG,
            bd = 1,
            font = US.ENTRY_FONT, insertwidth = US.INSERT_WIDTH,
            selectbackground = CS.FILTER_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = CS.FILTER_ENTRY_SELECT_INSERT_BG,
            takefocus = US.ENTRY_TAKE_FOCUS, justify = US.SELECT_ENTRY_JUSTIFY,
        )  # TODO Constant font definiton
        self.entrySourceFolderFilename.insert(0, LS.GL_AM_EXCEL_FOLDER_NAME)
        # endregion
        # QUERY BUTTON - DATASET A
        # region
        newRelX = FS.getRelX(self.entrySourceFolderFilename) + FS.getRelW(
            self.entrySourceFolderFilename)  # + US.TAB_3CHILD_LBL_REL_X

        # self.buttonQuerySetDataA = tk.Button(self.labelFrameQueryDataA)
        self.btnLoadSource = tk.Button(self.labelFrameQuerySetDataStatusA)  # TODO Query Features
        self.btnLoadSource.place(
            relx = newRelX, rely = 0,
            relwidth = US.TAB_TEST_SELECT_BTN_REL_W, relheight = 1)

        im = PIL.Image.open(_Icon_support.TAB_ICO_RIGHT_ARROW_PLAIN).resize(_Icon_support.SELECT_ICO_SIZE_BUTTONS,
                                                                            PIL.Image.ANTIALIAS)
        btn_query_set_icon = PIL.ImageTk.PhotoImage(im)
        self.btnLoadSource.configure(
            image = btn_query_set_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.btnLoadSource.image = btn_query_set_icon  # < ! > Required to make images appear

        self.btnLoadSource.configure(
            background = CS.FILTER_BUTTONS_BG, foreground = CS.FILTER_BUTTONS_FG,
            activebackground = CS.FILTER_BG,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = tk.FLAT, overrelief = tk.GROOVE,
            # text = '''Find Feature'''
        )
        # endregion

        # endregion

        # endregion

        # LISTBOX - DATASET A
        # region
        # self.scrollbarQuerySetDataA = tk.Scrollbar(self.labelFrameListBox, orient = tk.VERTICAL)
        # self.listQuerySetDataA = tk.Listbox(self.labelFrameListBoxA, yscrollcommand = self.scrollbarQuerySetDataA.set)

        self.listFeatureCodes = tk.Listbox(self.labelFrameListBoxA)
        self.listFeatureCodes.configure(
            background = CS.PROCESS_LISTBOX_BG, foreground = CS.PROCESS_LISTBOX_FG,
            selectmode = tk.MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = CS.FILTER_LISTBOX_SELECTED_ITEM_BG,
            selectforeground = CS.FILTER_LISTBOX_SELECTED_ITEM_FG,
            font = US.FONT_AM_LISTBOX_DEFAULT,
            bd = US.SELECT_LISTBOX_BORDER, relief = US.SELECT_LISTBOX_RELIEF,
            highlightthickness = 0
        )
        newRelY = FS.getRelY(self.labelFrameQuerySetDataStatusA) + FS.getRelH(self.labelFrameQuerySetDataStatusA)
        newRelH = 1 - (FS.getRelH(self.labelFrameQuerySetDataStatusA) + FS.getRelH(self.lblStripesFeatureCodes))
        self.listFeatureCodes.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)

        # self.listQuerySetDataA.place(
        #     relx = 0.01, rely = 0.025,
        #     relwidth = 0.98, relheight = 0.95)
        # # self.listQuerySetDataA.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.78 - 0.03)
        # endregion

        newRelY = US.TAB_TEST_COMMANDS_QUERY_REL_Y + FS.getRelY(self.labelFrameListBoxA) + FS.getRelH(
            self.labelFrameListBoxA)

        # COMMANDS PARENT (DATASET A)
        # region

        self.labelFrameCommandsA = tk.LabelFrame(self.labelFrameDatasetA, bd = 0)
        self.labelFrameCommandsA.place(
            relx = US.TAB_TEST_COMMANDS_QUERY_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_COMMANDS_QUERY_REL_W,
            relheight = US.TAB_TEST_COMMANDS_QUERY_REL_H * 0.85)  # TODO Reduced size

        self.labelFrameCommandsA.configure(
            background = CS.WHITE
        )

        # RESET BUTTON (DATASET A)
        # region
        self.buttonQueryResetFilterA = tk.Button(self.labelFrameCommandsA)  # TODO Check if this is correct
        self.buttonQueryResetFilterA.place(
            relx = 0, rely = 0,
            relwidth = 0.25, relheight = 1)
        self.buttonQueryResetFilterA.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)
        # text = '''Reset''')

        im = PIL.Image.open(_Icon_support.TAB_ICO_CROSS).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterA.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterA.image = btn_query_reset_icon  # < ! > Required to make images appear
        # endregion

        # QUERY COUNT (DATASET A)
        # region
        newRelX = FS.getRelX(self.buttonQueryResetFilterA) + FS.getRelW(self.buttonQueryResetFilterA)

        self.labelFrameQueryCount = tk.LabelFrame(self.labelFrameCommandsA, bd = 1)
        self.labelFrameQueryCount.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.50 - 0.005, relheight = 1
        )
        self.labelFrameQueryCount.configure(
            background = CS.PROCESS_BG
        )

        # Define count variables
        self.datasetCountA = 0
        self.datasetCountB = 0

        self.lblSelectedFeatureCount = tk.Label(self.labelFrameQueryCount)
        self.lblSelectedFeatureCount.place(relx = 0, rely = 0, relwidth = 1,
                                           relheight = US.TAB_TEST_SELECT_COUNT_REL_H)
        self.lblSelectedFeatureCount.configure(
            font = US.FONT_LARGE_BOLD,
            background = CS.PROCESS_BG,
            text = str(0)
        )
        self.lblSelectedFeatureTitle = tk.Label(self.labelFrameQueryCount)
        self.lblSelectedFeatureTitle.place(
            relx = 0, rely = FS.getRelH(self.lblSelectedFeatureCount),
            relwidth = 1, relheight = US.TAB_TEST_SELECT_COUNT_TEXT_REL_H)
        self.lblSelectedFeatureTitle.configure(
            font = US.FONT_DEFAULT_BOLD,
            background = CS.FG_COLOR, foreground = CS.PROCESS_BG,
            text = '''SELECTED'''
        )
        # endregion

        # COMMAND BORDERS - DATASET A
        # region
        newRelY = FS.getRelY(self.labelFrameListBoxA) + FS.getRelH(self.labelFrameListBoxA)

        self.separatorlabelFrameCommandsARight = tk.Label(self.labelFrameDatasetA)
        self.separatorlabelFrameCommandsARight.place(
            relx = FS.getRelX(self.labelFrameQueryDataA),
            rely = newRelY,
            relheight = 1 - newRelY - 0.025,  # TODO To adjust border height, just adjust this
            width = 1)
        self.separatorlabelFrameCommandsARight.configure(background = CS.DISABLED_D_BLUE)

        self.separatorlabelFrameCommandsALeft = tk.Label(self.labelFrameDatasetA)
        self.separatorlabelFrameCommandsALeft.place(
            relx = 1 - FS.getRelX(self.labelFrameQueryDataA),
            rely = FS.getRelY(self.separatorlabelFrameCommandsARight),
            relheight = FS.getRelH(self.separatorlabelFrameCommandsARight),
            width = 1
        )
        self.separatorlabelFrameCommandsALeft.configure(background = CS.DISABLED_D_BLUE)

        self.separatorlabelFrameCommandsABottom = tk.Label(self.labelFrameDatasetA)
        self.separatorlabelFrameCommandsABottom.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsARight),
            # rely = 0.997,
            rely = FS.getRelY(self.separatorlabelFrameCommandsALeft) +
                   FS.getRelH(self.separatorlabelFrameCommandsALeft) - 0.003,
            relwidth = FS.getRelX(self.separatorlabelFrameCommandsALeft) - FS.getRelX(
                self.separatorlabelFrameCommandsARight),
            height = 1)
        self.separatorlabelFrameCommandsABottom.configure(background = CS.DISABLED_D_BLUE)

        newRelY = FS.getRelY(self.labelFrameListBoxA) + FS.getRelH(self.labelFrameListBoxA)

        self.separatorlabelFrameCommandsATop = tk.Label(self.labelFrameDatasetA)
        self.separatorlabelFrameCommandsATop.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsARight),
            rely = newRelY,
            relwidth = FS.getRelW(self.separatorlabelFrameCommandsABottom),
            height = 1)
        self.separatorlabelFrameCommandsATop.configure(background = CS.DISABLED_D_BLUE)

        # endregion

        # endregion

        #  QUERY PARENT (DATASET B)
        # region
        self.labelFrameQueryDataB = tk.LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameQueryDataB.place(
            relx = FS.getRelX(self.labelFrameQueryDataA),
            rely = FS.getRelY(self.labelFrameQueryDataA),
            relwidth = FS.getRelW(self.labelFrameQueryDataA),
            relheight = FS.getRelH(self.labelFrameQueryDataA))
        self.labelFrameQueryDataB.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.PROCESS_ENTRY_FG,
            relief = tk.GROOVE  # , text = '''Dataset B'''
        )
        # endregion
        # LISTBOX PARENT (DATASET B)
        # region
        self.labelFrameListBoxB = tk.LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameListBoxB.place(
            relx = FS.getRelX(self.labelFrameListBoxA),
            rely = FS.getRelY(self.labelFrameListBoxA),
            relwidth = FS.getRelW(self.labelFrameListBoxA),
            relheight = FS.getRelH(self.labelFrameListBoxA)
        )

        # tk.STATUS CHILDREN - DATASET B
        # region

        # QUERY TOP tk.STRIPE PARENT - DATASET B
        # region
        self.lblStripesFeatureGroups = tk.Label(self.labelFrameListBoxB, bd = 0, relief = tk.GROOVE)
        self.lblStripesFeatureGroups.place(
            relx = FS.getRelX(self.lblStripesFeatureCodes),
            rely = FS.getRelY(self.lblStripesFeatureCodes),
            relwidth = FS.getRelW(self.lblStripesFeatureCodes),
            relheight = FS.getRelH(self.lblStripesFeatureCodes)
        )
        im = PIL.Image.open(
            _Icon_support.TEXTURE_STRIPE_ORANGE)
        texture_pink_stripes = PIL.ImageTk.PhotoImage(im)
        self.lblStripesFeatureGroups.configure(
            image = texture_pink_stripes,
            anchor = tk.SW
        )
        self.lblStripesFeatureGroups.image = texture_pink_stripes  # < ! > Required to make images appear
        # endregion

        self.lblFeatureGroupsHeader = tk.Label(self.labelFrameQueryDataB)
        # self.labelQuerySetDataStatusB = tk.Label(self.labelFrameListBoxB)
        self.lblFeatureGroupsHeader.place(
            relx = FS.getRelX(self.lblStatusSourceFolder),
            rely = FS.getRelY(self.lblStatusSourceFolder),
            relwidth = FS.getRelW(self.lblStatusSourceFolder),
            relheight = FS.getRelH(self.lblStatusSourceFolder)
        )
        # self.labelQuerySetDataStatusB.place(relx = 0, rely = newRelY, relwidth = 1, relheight = newRelH)
        self.lblFeatureGroupsHeader.configure(
            background = CS.PROCESS_LISTBOX_STATUS_BG, foreground = CS.PROCESS_LISTBOX_STATUS_FG,
            bd = US.SELECT_STATUS_LABEL_BORDER, relief = US.SELECT_STATUS_LABEL_RELIEF,
            text = "FEATURE GROUPS",
            font = US.SELECT_STATUS_LABEL_FONT,
        )
        # endregion

        # endregion

        self.listFeatureGroups = tk.Listbox(self.labelFrameListBoxB)
        self.listFeatureGroups.configure(
            background = CS.PROCESS_LISTBOX_BG, foreground = CS.PROCESS_LISTBOX_FG,
            selectmode = tk.MULTIPLE, exportselection = "0",
            activestyle = "none",
            selectbackground = CS.FILTER_LISTBOX_SELECTED_ITEM_BG,
            selectforeground = CS.FILTER_LISTBOX_SELECTED_ITEM_FG,
            font = US.FONT_AM_LISTBOX_SMALL,
            bd = US.SELECT_LISTBOX_BORDER, relief = US.SELECT_LISTBOX_RELIEF,
            highlightthickness = 0
        )

        self.listFeatureGroups.place(
            relx = FS.getRelX(self.listFeatureCodes),
            rely = FS.getRelY(self.listFeatureCodes),
            relwidth = FS.getRelW(self.listFeatureCodes),
            relheight = FS.getRelH(self.listFeatureCodes)
        )

        # tk.STATUS - DATASET B
        # region
        self.labelFrameQuerySetDataStatusB = tk.LabelFrame(self.labelFrameListBoxB, bd = 0)
        self.labelFrameQuerySetDataStatusB.place(
            relx = FS.getRelX(self.labelFrameQuerySetDataStatusA),
            rely = FS.getRelY(self.labelFrameQuerySetDataStatusA),
            relwidth = FS.getRelW(self.labelFrameQuerySetDataStatusA),
            relheight = FS.getRelH(self.labelFrameQuerySetDataStatusA)
        )
        # endregion

        # QUERY CHILDREN - DATASET B
        # region
        self.labelFrameBorderQuerySetDataB = tk.LabelFrame(self.labelFrameQuerySetDataStatusB, bd = 0)
        self.labelFrameBorderQuerySetDataB.place(
            relx = FS.getRelX(self.labelFrameBorderQuerySetDataA),
            rely = FS.getRelY(self.labelFrameBorderQuerySetDataA),
            relwidth = FS.getRelW(self.labelFrameBorderQuerySetDataA),
            relheight = FS.getRelH(self.labelFrameBorderQuerySetDataA))
        self.labelFrameBorderQuerySetDataB.configure(
            background = CS.FILTER_BUTTONS_BG
        )

        self.labelQuerySetDataB = tk.Label(self.labelFrameBorderQuerySetDataB)

        self.labelQuerySetDataB.place(
            relx = FS.getRelX(self.lblQuerySourceFolder),
            rely = FS.getRelY(self.lblQuerySourceFolder),
            relwidth = FS.getRelW(self.lblQuerySourceFolder),
            relheight = FS.getRelH(self.lblQuerySourceFolder))
        self.labelQuerySetDataB.configure(
            background = CS.FILTER_LABEL_BG, foreground = CS.FILTER_TITLE_BG,
            text = "Filter",
            font = US.SELECT_LABEL_FONT,
            bd = 0, relief = tk.FLAT,
        )

        # ENTER CODE DATASET B

        self.entryQuerySetDataB = Entry(self.labelFrameQuerySetDataStatusB)
        self.entryQuerySetDataB.place(
            relx = FS.getRelX(self.entrySourceFolderFilename),
            rely = FS.getRelY(self.entrySourceFolderFilename),
            relwidth = FS.getRelW(self.entrySourceFolderFilename),
            relheight = FS.getRelH(self.entrySourceFolderFilename))
        self.entryQuerySetDataB.configure(
            background = CS.FILTER_ENTRY_BG, foreground = CS.FILTER_ENTRY_FG,
            bd = 1,
            font = US.ENTRY_FONT, insertwidth = US.INSERT_WIDTH,
            selectbackground = CS.FILTER_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = CS.FILTER_ENTRY_SELECT_INSERT_BG,
            takefocus = US.ENTRY_TAKE_FOCUS, justify = US.SELECT_ENTRY_JUSTIFY
        )  # TODO Constant font definiton

        # DATASET B
        self.buttonQuerySetDataB = tk.Button(self.labelFrameQuerySetDataStatusB)
        self.buttonQuerySetDataB.place(
            relx = FS.getRelX(self.btnLoadSource),
            rely = FS.getRelY(self.btnLoadSource),
            relwidth = FS.getRelW(self.btnLoadSource),
            relheight = FS.getRelH(self.btnLoadSource))

        im = PIL.Image.open(_Icon_support.TAB_ICO_RIGHT_ARROW_PLAIN).resize(_Icon_support.SELECT_ICO_SIZE_BUTTONS,
                                                                            PIL.Image.ANTIALIAS)
        btn_query_set_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQuerySetDataB.configure(
            image = btn_query_set_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQuerySetDataB.image = btn_query_set_icon  # < ! > Required to make images appear

        self.buttonQuerySetDataB.configure(
            background = CS.FILTER_BUTTONS_BG, foreground = CS.FILTER_BUTTONS_FG,
            activebackground = CS.FILTER_BTN_BG_ACTIVE,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = tk.FLAT, overrelief = tk.GROOVE,
            # text = '''Find Feature'''
        )
        # endregion

        # COMMANDS PARENT (DATASET B)
        # region
        self.labelFrameCommandsB = tk.LabelFrame(self.labelFrameDatasetB, bd = 0)
        self.labelFrameCommandsB.place(
            relx = FS.getRelX(self.labelFrameCommandsA),
            rely = FS.getRelY(self.labelFrameCommandsA),
            relwidth = FS.getRelW(self.labelFrameCommandsA),
            relheight = FS.getRelH(self.labelFrameCommandsA)
        )
        # self.labelFrameCommandsB.place(
        #     relx = US.TAB_TEST_COMMANDS_QUERY_REL_X, rely = newRelY,
        #     relwidth = US.TAB_TEST_COMMANDS_QUERY_REL_W, relheight = US.TAB_TEST_COMMANDS_QUERY_REL_H)

        self.labelFrameCommandsB.configure(
            background = CS.WHITE
        )
        # endregion

        # RESET BUTTON (DATASET B)
        # region
        self.buttonQueryResetFilterB = tk.Button(self.labelFrameCommandsB)
        self.buttonQueryResetFilterB.place(
            relx = 0, rely = 0,
            relwidth = 0.25, relheight = 1)
        self.buttonQueryResetFilterB.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)
        # text = '''Reset''')

        im = PIL.Image.open(_Icon_support.TAB_ICO_CROSS).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_reset_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonQueryResetFilterB.configure(
            image = btn_query_reset_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonQueryResetFilterB.image = btn_query_reset_icon  # < ! > Required to make images appear

        # endregion

        # COMMAND BORDERS - DATASET B
        # region
        # newRelY = FS.getRelY(self.labelFrameListBoxB) + FS.getRelH(self.labelFrameListBoxB)

        self.separatorlabelFrameCommandsBRight = tk.Label(self.labelFrameDatasetB)
        self.separatorlabelFrameCommandsBRight.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsARight),
            rely = FS.getRelY(self.separatorlabelFrameCommandsARight),
            relheight = FS.getRelH(self.separatorlabelFrameCommandsARight),
            width = 1
        )
        self.separatorlabelFrameCommandsBRight.configure(background = CS.DISABLED_D_BLUE)

        self.separatorlabelFrameCommandsBLeft = tk.Label(self.labelFrameDatasetB)
        self.separatorlabelFrameCommandsBLeft.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsALeft),
            rely = FS.getRelY(self.separatorlabelFrameCommandsALeft),
            relheight = FS.getRelH(self.separatorlabelFrameCommandsALeft),
            width = 1
        )
        self.separatorlabelFrameCommandsBLeft.configure(background = CS.DISABLED_D_BLUE)

        self.separatorlabelFrameCommandsBBottom = tk.Label(self.labelFrameDatasetB)
        self.separatorlabelFrameCommandsBBottom.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsABottom),
            rely = FS.getRelY(self.separatorlabelFrameCommandsABottom),
            relwidth = FS.getRelW(self.separatorlabelFrameCommandsABottom),
            height = 1)
        self.separatorlabelFrameCommandsBBottom.configure(background = CS.DISABLED_D_BLUE)

        newRelY = FS.getRelY(self.labelFrameListBoxA) + FS.getRelH(self.labelFrameListBoxA)

        self.separatorlabelFrameCommandsBTop = tk.Label(self.labelFrameDatasetA)
        self.separatorlabelFrameCommandsBTop.place(
            relx = FS.getRelX(self.separatorlabelFrameCommandsATop),
            rely = FS.getRelY(self.separatorlabelFrameCommandsATop),
            relwidth = FS.getRelW(self.separatorlabelFrameCommandsATop),
            height = 1)
        self.separatorlabelFrameCommandsATop.configure(background = CS.DISABLED_PALER_YELLOW)

        # endregion

        # QUERY COUNT (DATASET B)
        # region
        self.labelFrameQueryCountB = tk.LabelFrame(self.labelFrameCommandsB, bd = 1)
        self.labelFrameQueryCountB.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.50 - 0.005, relheight = 1
        )
        self.labelFrameQueryCountB.configure(
            background = CS.PROCESS_BG
        )

        self.lblSelectedGroupCount = tk.Label(self.labelFrameQueryCountB)
        self.lblSelectedGroupCount.place(relx = 0, rely = 0, relwidth = 1,
                                         relheight = US.TAB_TEST_SELECT_COUNT_REL_H)
        self.lblSelectedGroupCount.configure(
            font = US.FONT_LARGE_BOLD,
            background = CS.PROCESS_BG,
            text = str(0)
        )
        self.labelQueryDataBCountText = tk.Label(self.labelFrameQueryCountB)
        self.labelQueryDataBCountText.place(
            relx = 0, rely = FS.getRelH(self.lblSelectedGroupCount),
            relwidth = 1, relheight = US.TAB_TEST_SELECT_COUNT_TEXT_REL_H)
        self.labelQueryDataBCountText.configure(
            font = US.FONT_DEFAULT_BOLD,
            background = CS.FG_COLOR, foreground = CS.PROCESS_BG,
            text = '''SELECTED'''
        )

        # Create the left separator
        # self.labelFrameQueryCountLeftSeparatorB = Separator(self.labelFrameQueryCountB, orient = tk.VERTICAL)
        # self.labelFrameQueryCountLeftSeparatorB.place(relx = 0, rely = 0, relheight = 1)

        # self.labelFrameQueryCountRightSeparatorB = Separator(self.labelFrameQueryCountB, orient = tk.VERTICAL)
        # self.labelFrameQueryCountRightSeparatorB.place(relx = 0.99, rely = 0, relheight = 1)
        # endregion

        # FILTER BUTTON (DATASET A)
        # region
        newRelX = FS.getRelX(self.labelFrameQueryCount) + FS.getRelW(self.labelFrameQueryCount)
        newRelX = FS.getRelX(self.labelFrameQueryCount) + FS.getRelW(self.labelFrameQueryCount)

        self.btnAddFeatureCode = tk.Button(self.labelFrameCommandsA, compound = tk.CENTER)
        self.btnAddFeatureCode.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.25 - 0.005, relheight = 1
        )

        im = PIL.Image.open(_Icon_support.TAB_ICO_CHECK).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.btnAddFeatureCode.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.btnAddFeatureCode.image = btn_query_filter_icon  # < ! > Required to make images appear

        self.btnAddFeatureCode.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)
        # text = '''Filter''')
        self.btnAddFeatureCode.pack(side = tk.RIGHT)
        self.buttonQueryResetFilterA.pack(side = tk.LEFT)

        # endregion
        # FILTER BUTTON (DATASET B)
        # region
        newRelX = FS.getRelX(self.labelFrameQueryCountB) + FS.getRelW(self.labelFrameQueryCountB)

        self.btnCompareSelectedFeatureGroups = tk.Button(self.labelFrameCommandsB, compound = tk.CENTER)
        self.btnCompareSelectedFeatureGroups.place(
            relx = newRelX + 0.005, rely = 0,
            relwidth = 0.25 - 0.005, relheight = 1
        )

        im = PIL.Image.open(_Icon_support.TAB_ICO_CHECK).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_filter_icon = PIL.ImageTk.PhotoImage(im)
        self.btnCompareSelectedFeatureGroups.configure(
            image = btn_query_filter_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.btnCompareSelectedFeatureGroups.image = btn_query_filter_icon  # < ! > Required to make images appear

        self.btnCompareSelectedFeatureGroups.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)
        # text = '''Filter''')
        self.btnCompareSelectedFeatureGroups.pack(side = tk.RIGHT)

        self.buttonQueryResetFilterB.pack(side = tk.LEFT)
        # endregion

    ''' -> Elements under the FILTER ("FILTER") HEADER <- '''

    def configureFilterElements(self, parentFrame):
        global queryStrFilterA

        # FILTER TITLE
        self.labelFrameFilterTitle = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameFilterTitle.place(relx = 0, rely = 0.08, relwidth = 1,
                                         relheight = US.TAB_TEST_FILTER_TITLE_REL_H)
        self.labelFrameFilterTitle.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR  # , text = '''FILTER'''
        )

        # COLORED tk.SEPARATOR
        self.separatorlabelFrameFilterTitleNumber = self.createLabelSeparator(
            self.labelFrameFilterTitle, 1,
            False, CS.PROCESS_TITLE_BG, US.TITLE_SEPARATOR_H,
            0.5, tk.W
        )

        # FILTER NUMBER
        self.labelFrameFilterTitleNumber = tk.Label(self.labelFrameFilterTitle)
        newRelY = FS.getRelY(self.labelFrameProcessTitleNumber)
        newRelH = FS.getRelH(self.labelFrameProcessTitleNumber)
        self.labelFrameFilterTitleNumber.place(
            relx = FS.getRelX(self.labelFrameProcessTitleNumber),
            rely = FS.getRelY(self.labelFrameProcessTitleNumber),
            relwidth = FS.getRelW(self.labelFrameProcessTitleNumber),
            relheight = FS.getRelH(self.labelFrameProcessTitleNumber),
            anchor = tk.NW)

        self.labelFrameFilterTitleNumber.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.PROCESS_NUMBER_BG, foreground = CS.PROCESS_NUMBER_FG,
            text = '''3  ''',
            bd = 1, relief = tk.GROOVE,
            anchor = tk.SE
        )

        # newRelX = FS.getRelX(self.labelFrameSelectTitleNumber) + FS.getRelW(self.labelFrameSelectTitleNumber)
        newRelX = FS.getRelX(self.labelFrameProcessTitleText)

        # FILTER TITLE
        self.labelFrameFilterTitleText = tk.Label(self.labelFrameFilterTitle)
        self.labelFrameFilterTitleText.place(
            relx = FS.getRelX(self.labelFrameProcessTitleText),
            rely = FS.getRelY(self.labelFrameProcessTitleText),
            relwidth = FS.getRelW(self.labelFrameProcessTitleText),
            relheight = FS.getRelH(self.labelFrameProcessTitleText),
            anchor = tk.NW)
        self.labelFrameFilterTitleText.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.PROCESS_TITLE_BG, foreground = CS.PROCESS_TITLE_FG,
            text = '''RESULTS''',
            bd = 0, relief = tk.GROOVE,
            anchor = tk.S
        )

        # Title border
        self.separatorlabelFrameFilterTitleText = self.createLabelSeparator(
            self.labelFrameFilterTitleText, 1,
            True, CS.WHITE,
            coordinate = 0.99, specifiedAnchor = tk.NW
        )

        newRelY = FS.getRelY(self.labelFrameFilterTitle) + FS.getRelH(
            self.labelFrameFilterTitle) + US.TAB_TEST_FILTER_QUERY_REL_Y

        # TOP LABEL FEATURE NAME
        # self.labelQueryDataFeatureName = tk.Label(self.labelFrameFilterListData)
        self.labelQueryDataFeatureName = tk.Label(parentFrame)
        # self.labelQueryDataFeatureName.place(
        #     relx = 0, rely = 0,
        #     relheight = US.TAB_TEST_FILTER_QUERY_FEATURE_NAME_REL_H, relwidth = 1)

        self.labelQueryDataFeatureName.place(
            # relx = US.TAB_TEST_FILTER_QUERY_REL_X, rely = 0,
            relx = US.TAB_TEST_FILTER_QUERY_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_QUERY_REL_W, relheight = US.TAB_TEST_FILTER_QUERY_REL_H
        )
        self.labelQueryDataFeatureName.configure(
            background = CS.PROCESS_LISTBOX_FEATURE_STATUS_BG,
            foreground = CS.PROCESS_LISTBOX_FEATURE_STATUS_FG,
            bd = US.PROCESS_STATUS_LABEL_BORDER, relief = US.PROCESS_STATUS_LABEL_RELIEF,
            text = US.PROCESS_STATUS_NO_FEATURE_TEXT,
            font = US.PROCESS_STATUS_LABEL_FONT,
        )

        newRelY = FS.getRelY(self.labelQueryDataFeatureName) + FS.getRelH(self.labelQueryDataFeatureName)

        # FILTER LIST PARENT
        self.labelFrameFilterListData = tk.LabelFrame(parentFrame, bd = 0)

        self.labelFrameFilterListData.place(
            relx = US.TAB_TEST_FILTER_LIST_DATA_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LIST_DATA_REL_W,
            relheight = US.TAB_TEST_FILTER_LIST_DATA_REL_H
        )
        self.labelFrameFilterListData.configure(
            background = CS.PROCESS_BG
        )

        # FILTER QUERY PARENT
        # self.labelFrameFilterQueryData = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameFilterQueryData = tk.LabelFrame(self.labelFrameFilterListData, bd = 0)
        self.labelFrameFilterQueryData.place(
            relx = 0, rely = 0,
            relheight = US.TAB_TEST_FILTER_QUERY_FEATURE_NAME_REL_H, relwidth = 1
        )
        #     .place(
        #     relx = US.TAB_TEST_FILTER_QUERY_REL_X, rely = 0,
        #     # relx = US.TAB_TEST_FILTER_QUERY_REL_X, rely = newRelY,
        #     relwidth = US.TAB_TEST_FILTER_QUERY_REL_W, relheight = US.TAB_TEST_FILTER_QUERY_REL_H
        # )
        self.labelFrameFilterQueryData.configure(
            background = CS.PROCESS_BG
        )

        # FILTER QUERY LABEL
        # region
        self.labelFrameBorderQueryFeature = tk.LabelFrame(self.labelFrameFilterQueryData, bd = 0)
        self.labelFrameBorderQueryFeature.place(
            relx = 0, rely = 0,
            relwidth = US.TAB_TEST_FILTER_QUERY_LBL_REL_W, relheight = 1)
        self.labelFrameBorderQueryFeature.configure(
            background = CS.PROCESS_BUTTONS_BG
        )

        self.labelQueryFeature = tk.Label(self.labelFrameBorderQueryFeature)
        self.labelQueryFeature.place(
            relx = 0.01, rely = 0.025,
            relwidth = 0.98, relheight = 0.95)
        self.labelQueryFeature.configure(
            background = CS.PROCESS_LABEL_BG, foreground = CS.PROCESS_LABEL_FG,
            text = '''Filter Groups''',
            font = US.FILTER_LABEL_FONT,
            bd = 0, relief = tk.FLAT,
        )
        # endregion

        newRelX = FS.getRelX(self.labelFrameBorderQueryFeature) + FS.getRelW(self.labelFrameBorderQueryFeature)

        # FILTER QUERY ENTRY
        # region
        rel_width = 0.319
        self.entryQueryLeft = Entry(self.labelFrameFilterQueryData)
        self.entryQueryLeft.place(
            relx = newRelX, rely = 0,
            # relwidth = US.TAB_TEST_FILTER_QUERY_ENTRY_REL_W - 0.001, relheight = 1)
            relwidth = rel_width, relheight = 1)
        self.entryQueryLeft.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.PROCESS_ENTRY_FG,
            bd = 1,
            font = US.ENTRY_FONT, insertwidth = US.INSERT_WIDTH,
            selectbackground = CS.PROCESS_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = CS.PROCESS_ENTRY_SELECT_INSERT_BG,
            takefocus = US.ENTRY_TAKE_FOCUS, justify = US.FILTER_ENTRY_JUSTIFY
        )

        # varQueryLeft = tk.StringVar(self.__parentFrame)
        # varQueryLeft.set("one")  # default value

        # style = Style()
        # style.theme_use('alt')
        # style.map('custom.TCombobox', fieldbackground = [('readonly', 'white')])
        # style.map('custom.TCombobox', foreground = [('readonly', 'black')])


        # combostyle = Style()
        # combostyle.theme_create('combostyle', parent = 'alt',
        #                         settings = {
        #                             'TCombobox': {
        #                                 'configure': {
        #                                     'fieldbackground': '#E6C4FF',
        #                                     'selectbackground': '#FFFFFF',
        #                                     'selectforeground': '#D437FF',
        #                                 }
        #                             }
        #                         }
        #                         )


        # self.root.option_add("*TCombobox*Listbox*Background", '#FFFFFF')  # '#E6C4FF'
        # self.root.option_add("*TCombobox*Listbox*Foreground", '#D437FF')
        # self.root.option_add("*TCombobox*Listbox*Font", US.FONT_SMALL)
        # self.root.option_add("*TCombobox*Listbox*SelectForeground", '#E6C4FF')  # '#E6C4FF'
        # # self.root.option_add("*TCombobox*Listbox*ArrowSize", 20)  # '#E6C4FF'
        # # self.root.option_add("*TCombobox*Listbox*arrowsize", 20)  # '#E6C4FF'
        # self.root.option_add("*TCombobox*Listbox*ArrowSize", 50)  # '#E6C4FF'


        # combostyle = Style()
        # combostyle.theme_use('combostyle')
        self.style = Style()  # self.get_style()
        # self.style.theme_use('combostyle')
        self.root.option_add('*TCombobox*Listbox.foreground', CS.D_BLUE)
        self.root.option_add('*TCombobox*Listbox.selectBackground', '#D437FF')
        # self.root.option_add('*TCombobox*Listbox.selectForeground', '#D437FF')
        self.root.option_add('*TCombobox*Listbox.arrowcolor', '#D437FF')
        self.root.option_add('*TCombobox*Listbox.arrowSize', 20)
        self.root.option_add('*TCombobox*Listbox.background', '#FFFFFF')
        self.root.option_add('*TCombobox*Listbox.bordercolor ', '#D437FF')
        self.root.option_add('*TCombobox*Listbox.fieldbackground', '#D437FF')
        self.root.option_add('*TCombobox*Listbox.arrowcolor', '#D437FF')

        self.style.map('TCombobox', fieldbackground = [('readonly', '#FFFFFF')])


        self.dropQueryLeft = Combobox(self.labelFrameFilterQueryData, state = "readonly")
        self.dropQueryLeft.place(
            relx = newRelX, rely = 0,
            # relwidth = US.TAB_TEST_FILTER_QUERY_ENTRY_REL_W - 0.001, relheight = 1)
            relwidth = rel_width + 0.042, relheight = 1)
        self.dropQueryLeft.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.D_BLUE
        )
        self.dropQueryLeft.config(font = US.FONT_AM_LISTBOX_BOLD)


        newRelX = FS.getRelX(self.entryQueryLeft) + FS.getRelW(self.entryQueryLeft)
        self.entryQueryRight = Entry(self.labelFrameFilterQueryData)
        self.entryQueryRight.place(
            relx = newRelX, rely = 0,
            relwidth = rel_width + US.TAB_TEST_FILTER_QUERY_LBL_REL_W + 0.037, relheight = 1)
        self.entryQueryRight.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.PROCESS_ENTRY_FG,
            bd = 1,
            font = US.ENTRY_FONT, insertwidth = US.INSERT_WIDTH,
            selectbackground = CS.PROCESS_ENTRY_SELECT_HIGHLIGHT_BG,
            insertbackground = CS.PROCESS_ENTRY_SELECT_INSERT_BG,
            takefocus = US.ENTRY_TAKE_FOCUS, justify = US.FILTER_ENTRY_JUSTIFY
        )


        self.dropQueryRight = Combobox(self.labelFrameFilterQueryData, state = "readonly")
        self.dropQueryRight.place(
            relx = newRelX + 0.041, rely = 0,
            # relwidth = US.TAB_TEST_FILTER_QUERY_ENTRY_REL_W - 0.001, relheight = 1)
            relwidth = rel_width + US.TAB_TEST_FILTER_QUERY_LBL_REL_W + 0.038, relheight = 1)
        self.dropQueryRight.configure(
            background = CS.PROCESS_ENTRY_BG, foreground = CS.PROCESS_ENTRY_FG
        )
        self.dropQueryRight.config(font = US.FONT_AM_LISTBOX_BOLD)


        # endregion
        newRelX = FS.getRelX(self.entryQueryLeft) + FS.getRelW(self.entryQueryLeft)

        # RESULT QUERY BUTTONs
        # region
        self.btnSearchResultsLeft = tk.Button(self.labelFrameFilterQueryData)
        self.btnSearchResultsLeft.place(
            relx = newRelX, rely = 0,
            relwidth = 0.041, relheight = 1)
        # relwidth = US.TAB_TEST_SELECT_BTN_REL_W, relheight = 1)

        im = PIL.Image.open(_Icon_support.TAB_ICO_DOWN_ARROW_PLAIN).resize(_Icon_support.FILTER_ICO_SIZE_BUTTONS,
                                                                           PIL.Image.ANTIALIAS)
        btn_query_feature_icon = PIL.ImageTk.PhotoImage(im)
        self.btnSearchResultsLeft.configure(
            image = btn_query_feature_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.btnSearchResultsLeft.image = btn_query_feature_icon  # < ! > Required to make images appear

        self.btnSearchResultsLeft.configure(
            background = CS.PROCESS_BUTTONS_BG, foreground = CS.PROCESS_BUTTONS_FG,
            activebackground = CS.PROCESS_BTN_BG_ACTIVE,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = tk.FLAT, overrelief = tk.FLAT
        )


        newRelX_Right = FS.getRelX(self.entryQueryRight) + FS.getRelW(self.entryQueryRight)
        self.btnSearchResultsRight = tk.Button(self.labelFrameFilterQueryData)
        self.btnSearchResultsRight.place(
            relx = newRelX_Right, rely = 0,
            relwidth = 0.041, relheight = 1)

        im = PIL.Image.open(_Icon_support.TAB_ICO_DOWN_ARROW_PLAIN).resize(_Icon_support.FILTER_ICO_SIZE_BUTTONS,
                                                                           PIL.Image.ANTIALIAS)
        btn_query_feature_icon = PIL.ImageTk.PhotoImage(im)
        self.btnSearchResultsRight.configure(
            image = btn_query_feature_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.btnSearchResultsRight.image = btn_query_feature_icon  # < ! > Required to make images appear

        self.btnSearchResultsRight.configure(
            background = CS.PROCESS_BUTTONS_BG, foreground = CS.PROCESS_BUTTONS_FG,
            activebackground = CS.PROCESS_BTN_BG_ACTIVE,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = tk.FLAT, overrelief = tk.FLAT
        )
        # endregion

        # newRelY = FS.getRelY(self.labelFrameFilterQueryData) + FS.getRelH(self.labelFrameFilterQueryData)
        ### INSERT CODE HERE

        # newRelY = FS.getRelY(self.labelQueryDataFeatureName) + FS.getRelH(self.labelQueryDataFeatureName)
        # newRelH = 1 - (FS.getRelY(self.labelQueryDataFeatureName) + FS.getRelH(self.labelQueryDataFeatureName)) - 0.2
        newRelY = FS.getRelY(self.labelFrameFilterQueryData) + FS.getRelH(self.labelFrameFilterQueryData)
        newRelH = 1 - (
                    FS.getRelY(self.labelFrameFilterQueryData) + FS.getRelH(self.labelFrameFilterQueryData)) - 0.2

        # FILTER LIST DATA A PARENT
        self.labelFrameFilterListDataA = tk.LabelFrame(self.labelFrameFilterListData, bd = 0)
        self.labelFrameFilterListDataA.place(
            relx = US.TAB_TEST_FILTER_LISTBOX_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LISTBOX_REL_W, relheight = newRelH
            # US.TAB_TEST_FILTER_LISTBOX_REL_H
        )
        self.labelFrameFilterListDataA.configure(
            background = CS.PROCESS_BG
        )

        # FILTER LIST BOX - Left tk.Side
        # newRelY = US.FILTER_LABEL_STRIPES_REL_H + 0.03725
        newRelY = US.FILTER_LABEL_STRIPES_REL_H * US.FILTER_LABEL_BOTTOM_STRIPES_REL_H_MULTIPLIER,
        self.listResultsLeft = tk.Listbox(self.labelFrameFilterListDataA, bd = 0)
        self.listResultsLeft.place(
            relx = US.TAB_TEST_FILTER_LISTBOX_LIST_REL_X,
            rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LISTBOX_LIST_REL_W,
            relheight = US.TAB_TEST_FILTER_LISTBOX_LIST_REL_H -
                        (US.FILTER_LABEL_STRIPES_REL_H * US.FILTER_LABEL_BOTTOM_STRIPES_REL_H_MULTIPLIER))

        self.listResultsLeft.configure(
            background = CS.PROCESS_LISTBOX_BG, foreground = CS.PROCESS_LISTBOX_FG,
            selectmode = tk.SINGLE, exportselection = "0",
            activestyle = "none",
            selectbackground = CS.PALE_PLUM,
            selectforeground = CS.D_BLUE,
            font = US.FONT_AM_RESULTS,
            bd = US.FILTER_LISTBOX_BORDER, relief = US.FILTER_LISTBOX_RELIEF,
            highlightthickness = 0
        )

        newRelY = FS.getRelY(self.listResultsLeft) + FS.getRelH(self.listResultsLeft)
        newRelH = 1 - (FS.getRelY(self.listResultsLeft) + FS.getRelH(self.listResultsLeft))

        # BOTTOM tk.STATUS LABEL - DATASET A
        self.lblLeftResultFocusValue = tk.Label(self.labelFrameFilterListDataA)
        self.lblLeftResultFocusValue.place(
            relx = US.TAB_TEST_FILTER_LISTBOX_STATUS_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LISTBOX_STATUS_REL_W, relheight = newRelH)

        self.lblLeftResultFocusValue.configure(
            background = CS.PROCESS_LISTBOX_STATUS_BG, foreground = CS.PROCESS_LISTBOX_STATUS_FG,
            bd = US.FILTER_STATUS_LABEL_BORDER, relief = US.FILTER_STATUS_LABEL_RELIEF,
            text = "NO DATA",
            font = US.FILTER_STATUS_LABEL_FONT,
        )

        newRelX = FS.getRelX(self.labelFrameFilterListDataA) + FS.getRelW(self.labelFrameFilterListDataA)
        newRelY = FS.getRelY(self.labelFrameFilterListDataA)
        # FILTER LIST DATA B PARENT
        self.labelFrameFilterListDataB = tk.LabelFrame(self.labelFrameFilterListData, bd = 0)

        newRelH = FS.getRelH(self.labelFrameFilterListDataA)
        self.labelFrameFilterListDataB.place(
            relx = newRelX, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LISTBOX_REL_W, relheight = newRelH
            # US.TAB_TEST_FILTER_LISTBOX_REL_H
        )
        self.labelFrameFilterListDataB.configure(
            background = CS.PROCESS_BG
        )

        # FILTER LIST BOX - Right tk.Side
        self.listResultsRight = tk.Listbox(self.labelFrameFilterListDataB, bd = 0)
        self.listResultsRight.place(
            relx = US.TAB_TEST_FILTER_LISTBOX_LIST_REL_X, rely = FS.getRelY(self.listResultsLeft),
            relwidth = US.TAB_TEST_FILTER_LISTBOX_LIST_REL_W,
            relheight = FS.getRelH(self.listResultsLeft))

        self.listResultsRight.configure(
            background = CS.PROCESS_LISTBOX_BG, foreground = CS.PROCESS_LISTBOX_FG,
            selectmode = tk.SINGLE, exportselection = "0",
            activestyle = "none",
            selectbackground = CS.PALE_PLUM,
            selectforeground = CS.D_BLUE,
            font = US.FONT_AM_RESULTS,
            bd = US.FILTER_LISTBOX_BORDER, relief = US.FILTER_LISTBOX_RELIEF,
            highlightthickness = 0
        )

        newRelY = FS.getRelY(self.listResultsRight) + FS.getRelH(self.listResultsRight)
        newRelH = 1 - (FS.getRelY(self.listResultsLeft) + FS.getRelH(self.listResultsLeft))
        # BOTTOM tk.STATUS LABEL - DATASET B
        self.lblRightResultFocusValue = tk.Label(self.labelFrameFilterListDataB)
        self.lblRightResultFocusValue.place(
            relx = US.TAB_TEST_FILTER_LISTBOX_STATUS_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_FILTER_LISTBOX_STATUS_REL_W,
            relheight = newRelH)

        self.lblRightResultFocusValue.configure(
            background = CS.PROCESS_LISTBOX_STATUS_BG, foreground = CS.PROCESS_LISTBOX_STATUS_FG,
            bd = US.FILTER_STATUS_LABEL_BORDER, relief = US.FILTER_STATUS_LABEL_RELIEF,
            text = US.FILTER_STATUS_NO_DATA_TEXT,
            font = US.FILTER_STATUS_LABEL_FONT,
        )

        # QUERY BOTTOM tk.STRIPES
        self.lblResultStripes = tk.Label(self.labelFrameFilterListData, bd = 1, relief = tk.GROOVE)
        self.lblResultStripes.place(
            relx = FS.getRelX(self.labelFrameFilterListDataA),
            rely = FS.getRelY(self.labelFrameFilterListDataA),
            relwidth = 1,
            # relheight = US.FILTER_LABEL_STRIPES_REL_H # * US.FILTER_LABEL_STRIPES_REL_H_MULTIPLIER,
            relheight = US.FILTER_LABEL_STRIPES_REL_H * US.FILTER_LABEL_BOTTOM_STRIPES_REL_H_MULTIPLIER,
            # relheight = FS.getRelH(self.labelFrameFilterQueryData) * US.FILTER_LABEL_STRIPES_REL_H_MULTIPLIER,
            anchor = tk.NW
        )
        im = PIL.Image.open(_Icon_support.TEXTURE_STRIPE_PLUM)  # .resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        texture_purple_stripes = PIL.ImageTk.PhotoImage(im)
        self.lblResultStripes.configure(
            image = texture_purple_stripes,
            anchor = tk.SW
        )  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.lblResultStripes.image = texture_purple_stripes  # < ! > Required to make images appear

        # FILTER BORDERS
        self.separatorFilterListDataA = tk.Label(self.labelFrameFilterListDataA)
        self.separatorFilterListDataA.place(relx = 0, rely = 0, relheight = 1, width = 1)
        self.separatorFilterListDataA.configure(background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)

        self.separatorFilterListDataCenter = tk.Label(self.labelFrameFilterListDataB)
        self.separatorFilterListDataCenter.place(relx = 0, rely = 0, relheight = 1, width = 1)
        self.separatorFilterListDataCenter.configure(background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)

        self.separatorFilterListDataB = tk.Label(self.labelFrameFilterListDataB)
        self.separatorFilterListDataB.place(relx = 0.997, rely = 0, relheight = 1, width = 1)
        self.separatorFilterListDataB.configure(background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)

        # FILTER LOCK OVERLAY
        # region

        # FILTER LOCK QUERY ENTRY COVER
        # region
        # FILTER LOCK MOCK PARENT COVER
        self.labelOverlayFilterListData = tk.LabelFrame(parentFrame, bd = 0)

        #
        self.labelOverlayFilterListData.place(
            relx = FS.getRelX(self.labelFrameFilterListData),
            rely = FS.getRelY(self.labelFrameFilterListData),
            # relwidth = 0, relheight = 0)
            relwidth = FS.getRelW(self.labelFrameFilterListData),
            relheight = FS.getRelH(self.labelFrameFilterListData))

        self.labelOverlayFilterListData.configure(
            background = self.labelFrameFilterListData['background'],
            bd = self.labelFrameFilterListData['bd'],
            relief = self.labelFrameFilterListData['relief']
        )

        # MOCK QUERY PARENT FRAME
        self.labelOverlayFilterQueryData = tk.Label(self.labelOverlayFilterListData)
        self.labelOverlayFilterQueryData.place(
            relx = FS.getRelX(self.labelFrameFilterQueryData),
            rely = FS.getRelY(self.labelFrameFilterQueryData),
            relwidth = FS.getRelW(self.labelFrameFilterQueryData),
            relheight = FS.getRelH(self.labelFrameFilterQueryData) * US.FILTER_LABEL_STRIPES_REL_H_MULTIPLIER
        )
        self.labelOverlayFilterQueryData.configure(
            background = self.labelFrameFilterQueryData['background'],
            foreground = CS.PROCESS_LABEL_OVERLAY_BG,
            text = '''Please confirm the dataset groupings before filtering''',
            font = US.FILTER_LABEL_FONT,
            bd = 0, relief = tk.GROOVE,
            # bd = self.labelFrameFilterQueryData['bd'], relief = self.labelFrameFilterQueryData['relief'],
        )

        # MOCK tk.STRIPED COVER
        self.labelOverlayFilterStripes = tk.Label(self.labelOverlayFilterQueryData)
        self.labelOverlayFilterStripes.place(
            relx = 0,
            rely = 0,
            relwidth = 1,
            relheight = 1,
            anchor = tk.NW
        )
        im = PIL.Image.open(
            _Icon_support.TEXTURE_STRIPE_PLUM)  # .resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        texture_purple_stripes = PIL.ImageTk.PhotoImage(im)
        self.labelOverlayFilterStripes.configure(
            image = texture_purple_stripes,
            anchor = tk.SW,
            bd = 0
        )  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.labelOverlayFilterStripes.image = texture_purple_stripes  # < ! > Required to make images appear

        # endregion

        # RESULT LOCK LISTBOX COVER
        # tk.LEFT COVER
        # region
        # self.labelOverlayFilterListDataA = tk.Label(self.labelFrameFilterListDataA)
        self.labelOverlayFilterListDataA = tk.Label(self.labelOverlayFilterListData)
        newRelY = FS.getRelY(self.labelOverlayFilterQueryData) + FS.getRelH(self.labelOverlayFilterQueryData)
        self.labelOverlayFilterListDataA.place(
            relx = FS.getRelX(self.labelFrameFilterListDataA),
            # rely = FS.getRelY(self.labelFrameFilterListDataA) - US.FILTER_LABEL_STRIPES_REL_H_REDUCTION,
            rely = newRelY,
            relwidth = FS.getRelW(self.labelFrameFilterListDataA),
            relheight =FS.getRelH(self.labelFrameFilterListDataA) +
                       FS.getRelH(self.labelOverlayFilterQueryData) +
                       FS.getRelH(self.lblResultStripes) - 0.018)

        self.labelOverlayFilterListDataA.configure(
            background = CS.FILTER_LISTBOX_OVERLAY_BG,
            foreground = CS.FILTER_LABEL_OVERLAY_FG,
            font = US.FILTER_LABEL_FONT,
            # bd = 0, relief = RIDGE,
            bd = self.labelFrameFilterListDataA['bd'], relief = self.labelFrameFilterListDataA['relief'],
            # bd = self.labelFrameFilterListDataA['bd'], relief = self.labelFrameFilterListDataA['relief'],
        )
        # FILTER LOCK BOTTOM MOCK NO DATA LABEL
        self.labelOverlayQueryDataA = tk.Label(self.labelOverlayFilterListDataA)
        newRelYReduction = 0.01
        self.labelOverlayQueryDataA.place(
            relx = FS.getRelX(self.lblLeftResultFocusValue),
            rely = FS.getRelY(self.lblLeftResultFocusValue) + (US.FILTER_LABEL_STRIPES_REL_H_REDUCTION / 2),
            # TODO Make constant
            relwidth = FS.getRelW(self.lblLeftResultFocusValue),
            relheight = FS.getRelH(self.lblLeftResultFocusValue) - newRelYReduction)

        self.labelOverlayQueryDataA.configure(
            background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG,
            foreground = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_FG,
            bd = self.lblLeftResultFocusValue['bd'], relief = US.FILTER_STATUS_LABEL_RELIEF,
            text = US.FILTER_STATUS_NO_DATA_TEXT,
            font = US.FILTER_STATUS_LABEL_FONT,
        )

        self.separatorOverlayFilterListDataA = tk.Label(self.labelOverlayFilterListDataA)
        self.separatorOverlayFilterListDataA.place(relx = 0, rely = 0, relheight = 1, width = 1)
        self.separatorOverlayFilterListDataA.configure(
            background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)

        # endregion

        # tk.RIGHT COVER
        # region
        self.labelOverlayFilterListDataB = tk.Label(self.labelOverlayFilterListData)
        self.labelOverlayFilterListDataB.place(
            relx = FS.getRelX(self.labelFrameFilterListDataB), rely = FS.getRelY(self.labelOverlayFilterListDataA),
            relwidth = FS.getRelW(self.labelFrameFilterListDataB),
            relheight = FS.getRelH(self.labelOverlayFilterListDataA))
        self.labelOverlayFilterListDataB.configure(
            background = CS.FILTER_LISTBOX_OVERLAY_BG,
            foreground = CS.FILTER_LABEL_OVERLAY_FG,
            font = US.FILTER_LABEL_FONT,
            bd = self.labelOverlayFilterListDataA['border'], relief = self.labelOverlayFilterListDataA['relief'],
            # bd = 1, relief = RIDGE,
            # bd = self.labelFrameFilterListDataB['bd'], relief = self.labelFrameFilterListDataB['relief'],
        )
        # FILTER LOCK BOTTOM MOCK NO DATA LABEL
        self.labelOverlayQueryDataB = tk.Label(self.labelOverlayFilterListDataB)
        self.labelOverlayQueryDataB.place(
            relx = FS.getRelX(self.labelOverlayQueryDataA),
            rely = FS.getRelY(self.labelOverlayQueryDataA),
            relwidth = FS.getRelW(self.labelOverlayQueryDataA),
            relheight = FS.getRelH(self.labelOverlayQueryDataA))

        self.labelOverlayQueryDataB.configure(
            background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG,
            foreground = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_FG,
            bd = self.lblLeftResultFocusValue['bd'], relief = US.FILTER_STATUS_LABEL_RELIEF,
            text = US.FILTER_STATUS_NO_DATA_TEXT,
            font = US.FILTER_STATUS_LABEL_FONT,
        )
        # self.separatorOverlayFilterListDataB1 = Separator(self.labelOverlayFilterListDataB, orient = tk.VERTICAL)
        # self.separatorOverlayFilterListDataB1.place(relx = 0, rely = 0, relheight = 1)
        self.separatorOverlayFilterListDataCenter = tk.Label(self.labelOverlayFilterListDataB)
        self.separatorOverlayFilterListDataCenter.place(relx = 0, rely = 0, relheight = 1, width = 1)
        self.separatorOverlayFilterListDataCenter.configure(
            background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)

        self.separatorOverlayFilterListDataB = tk.Label(self.labelOverlayFilterListDataB)
        self.separatorOverlayFilterListDataB.place(relx = 0.997, rely = 0, relheight = 1, width = 1)
        self.separatorOverlayFilterListDataB.configure(
            background = CS.FILTER_LISTBOX_STATUS_READY_OVERLAY_BG)
        # endregion

        # endregion

    ''' -> Elements under the PROCESS ("TEST") HEADER <- '''

    def configureProcessElements(self, parentFrame):

        # PROCESS TITLE
        self.labelFrameProcessTitle = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameProcessTitle.place(relx = 0, rely = 0, relwidth = 1, relheight = 0.12)
        self.labelFrameProcessTitle.configure(
            background = CS.PROCESS_BG, foreground = CS.FG_COLOR  # , text = '''FILTER'''
        )

        # Create the top separator
        # self.labelFrameSelectHorizontalSeparator = Separator(self.labelFrameSelectTitle, orient = tk.HORIZONTAL)
        # self.labelFrameSelectHorizontalSeparator.place(relx = 0.05, rely = 0.5, relwidth = 0.9)

        # COLORED tk.SEPARATOR
        self.separatorlabelFrameProcessTitleNumber = self.createLabelSeparator(
            self.labelFrameProcessTitle, 1,
            False, CS.SELECT_TITLE_BG, US.TITLE_SEPARATOR_H,
            0.5, tk.W
        )

        # Process NUMBER
        self.labelFrameProcessTitleNumber = tk.Label(self.labelFrameProcessTitle)
        newRelY = US.LABEL_TITLE_REL_Y
        self.labelFrameProcessTitleNumber.place(
            relx = 0, rely = newRelY,
            relwidth = 0.04 + 0.05,
            relheight = 1 - (newRelY * 2), anchor = tk.NW)

        self.labelFrameProcessTitleNumber.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.PROCESS_NUMBER_BG, foreground = CS.PROCESS_NUMBER_FG,
            text = '''1  ''',
            bd = 1, relief = tk.GROOVE,
            anchor = tk.SE
        )
        newRelX = FS.getRelX(self.labelFrameProcessTitleNumber) + FS.getRelW(self.labelFrameProcessTitleNumber)

        # Process TITLE
        self.labelFrameProcessTitleText = tk.Label(self.labelFrameProcessTitle)
        newRelY = FS.getRelY(self.labelFrameProcessTitleNumber)
        newRelH = FS.getRelH(self.labelFrameProcessTitleNumber)
        self.labelFrameProcessTitleText.place(
            relx = newRelX - 0.001, rely = newRelY,
            relwidth = 0.15, relheight = newRelH, anchor = tk.NW)
        self.labelFrameProcessTitleText.configure(
            font = US.FONT_MED_BOLD,
            # background = CS.BG_TITLE, foreground = CS.FG_TITLE,
            background = CS.SELECT_TITLE_BG, foreground = CS.SELECT_TITLE_FG,
            text = '''INPUT''',
            bd = 0, relief = tk.GROOVE,
            anchor = tk.S
        )
        # Title border
        self.separatorlabelFrameProcessTitleText = self.createLabelSeparator(
            self.labelFrameProcessTitleText, 1,
            True, CS.WHITE,
            coordinate = 0.99, specifiedAnchor = tk.NW
        )




        newRelY = FS.getRelH(self.labelFrameProcessTitle) + US.TAB_TEST_PROCESS_COMMANDS_REL_Y

        # PROCESS COMMANDS PARENT
        self.labelFrameProcessCommands = tk.LabelFrame(parentFrame, bd = 0)
        self.labelFrameProcessCommands.place(
            relx = US.TAB_TEST_PROCESS_COMMANDS_REL_X, rely = newRelY,
            relwidth = US.TAB_TEST_PROCESS_COMMANDS_REL_W,
            relheight = US.TAB_TEST_PROCESS_COMMANDS_REL_H
        )
        self.labelFrameProcessCommands.configure(
            background = CS.PROCESS_BG
        )

        # PROCESS tk.STATISTICAL TEST OPTIONS
        # region
        self.labelFrameProcessStatTests = tk.LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessStatTests.place(
            relx = 0, rely = 0,
            relwidth = US.TEST_PROCESS_Z_TEST_PARENT, relheight = 1
        )

        self.labelFrameProcessStatTests.configure(
            background = CS.PROCESS_BG
        )

        # TITLE
        self.labelFrameProcessStatTestsTitle = tk.Label(self.labelFrameProcessStatTests)
        self.labelFrameProcessStatTestsTitle.place(
            relx = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X,
            rely = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W,
            relheight = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessStatTestsTitle.configure(
            font = US.FONT_MED_BOLD,
            background = CS.PROCESS_Z_TEST_TITLE_BG, foreground = CS.PROCESS_Z_TEST_TITLE_FG,
            text = '''CROSS DEPTH''',
            anchor = tk.CENTER,
            bd = 0, relief = tk.GROOVE
        )

        newRelY = FS.getRelY(self.labelFrameProcessStatTestsTitle) + FS.getRelH(
            self.labelFrameProcessStatTestsTitle)
        self.labelFrameProcessStatTestsButtonElements = tk.LabelFrame(self.labelFrameProcessStatTests, bd = 0)
        self.labelFrameProcessStatTestsButtonElements.place(
            relx = FS.getRelX(self.labelFrameProcessStatTestsTitle),
            rely = newRelY,
            relwidth = FS.getRelW(self.labelFrameProcessStatTestsTitle),
            relheight = 1 - FS.getRelH(self.labelFrameProcessStatTestsTitle)  # 0.35
        )
        self.labelFrameProcessStatTestsButtonElements.configure(
            background = CS.PROCESS_BG
        )








        # To remove that strange focus on Choose Chi-square Button
        self.buttonFiller = tk.Button(self.labelFrameProcessStatTestsButtonElements, compound = tk.CENTER)
        self.buttonFiller.place(
            relx = 0, rely = 0.1,
            relwidth = 1, relheight = 0.28
            # relx = 0, rely = newRelY,
            # relwidth = FS.getRelW(self.buttonChooseZTest), relheight = FS.getRelH(self.buttonChooseZTest)
        )
        # self.buttonFiller.configure(
        #     state = tk.DISABLED
        # )

        # CHOOSE CHI-SQUARE BUTTON
        self.buttonChooseCrossType = tk.Button(self.labelFrameProcessStatTestsButtonElements, compound = tk.CENTER)

        # im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        # btn_query_chi_square_icon = PIL.ImageTk.PhotoImage(im)
        # self.buttonChooseChiSquare.configure(
        #     image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        # self.buttonChooseChiSquare.image = btn_query_z_test_icon  # < ! > Required to make images appear

        self.buttonChooseCrossType.place(
            relx = 0, rely = 0.1,
            relwidth = 1, relheight = 0.28
            # relx = 0, rely = newRelY,
            # relwidth = FS.getRelW(self.buttonChooseZTest), relheight = FS.getRelH(self.buttonChooseZTest)
        )
        self.buttonChooseCrossType.configure(
            background = CS.WHITE, foreground = CS.D_BLUE,
            activebackground = CS.PROCESS_Z_TEST_TITLE_BG,
            bd = 1, relief = tk.GROOVE, overrelief = tk.SUNKEN,
            font = US.FONT_DEFAULT_BOLD,
            text = '''TYPE''')







        newRelY = 0.05 + FS.getRelY(self.buttonChooseCrossType) + FS.getRelH(self.buttonChooseCrossType)
        # CHOOSE Z-TEST BUTTON
        self.buttonChooseCrossLevel = tk.Button(self.labelFrameProcessStatTestsButtonElements, compound = tk.CENTER)

        # im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        # btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        # self.buttonChooseZTest.configure(
        #     image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        # self.buttonChooseZTest.image = btn_query_z_test_icon  # < ! > Required to make images appear

        self.buttonChooseCrossLevel.place(
            relx = 0, rely = newRelY,
            relwidth = FS.getRelW(self.buttonChooseCrossType), relheight = FS.getRelH(self.buttonChooseCrossType)
            # relx = 0, rely = 0.1,
            # relwidth = 1, relheight = 0.28
        )
        self.buttonChooseCrossLevel.configure(
            background = CS.D_BLUE, foreground = CS.WHITE,
            activebackground = CS.PROCESS_Z_TEST_TITLE_BG,
            bd = 1, relief = tk.GROOVE, overrelief = tk.SUNKEN,
            font = US.FONT_DEFAULT_BOLD,
            text = '''LEVEL''')

        # self.buttonChooseZTest.pack(fill = X, expand = True)
        self.buttonChooseCrossLevel.update()




        # self.buttonChooseChiSquare.pack(fill = X, expand = True)
        # self.buttonChooseChiSquare.update()

        # endregion

        # TEST OPTIONS PARENT
        # region
        # PROCESS Z-TEST PARENT
        newRelX = FS.getRelX(self.labelFrameProcessStatTests) + FS.getRelW(self.labelFrameProcessStatTests)
        self.labelFrameProcessTestOptions = tk.LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessTestOptions.place(
            relx = newRelX, rely = 0,
            relwidth = US.TEST_PROCESS_Z_TEST_PARENT, relheight = 1
        )
        self.labelFrameProcessTestOptions.configure(
            background = CS.PROCESS_BG
        )

        self.labelFrameProcessTestOptionsTitle = tk.Label(self.labelFrameProcessTestOptions)
        self.labelFrameProcessTestOptionsTitle.place(
            relx = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X,
            rely = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W,
            relheight = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessTestOptionsTitle.configure(
            font = US.FONT_MED_BOLD,
            background = CS.PROCESS_Z_TEST_TITLE_BG, foreground = CS.PROCESS_Z_TEST_TITLE_FG,
            # text = '''OPTIONS''',
            anchor = tk.CENTER,
            bd = 1, relief = tk.GROOVE
        )

        # endregion






        # PROCESS CROSS TYPE OPTIONS
        # region

        # PROCESS CHANGE CROSS TYPE PARENT
        # newRelX = FS.getRelX(self.labelFrameProcessStatTests) + FS.getRelW(self.labelFrameProcessStatTests)
        self.labelFrameProcessChangeCrossType = tk.LabelFrame(self.labelFrameProcessTestOptions, bd = 0,
                                                       name = 'labelFrameProcessChangeCrossType')
        self.labelFrameProcessChangeCrossType.place(
            # relx = newRelX, rely = 0,
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
            # relwidth = US.TEST_PROCESS_Z_TEST_PARENT, relheight = 1
        )
        self.labelFrameProcessChangeCrossType.configure(
            background = CS.PROCESS_BG
        )

        self.labelFrameProcessChangeCrossTypeTitle = tk.Label(self.labelFrameProcessChangeCrossType)
        self.labelFrameProcessChangeCrossTypeTitle.place(
            relx = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X,
            rely = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W,
            relheight = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessChangeCrossTypeTitle.configure(
            font = US.FONT_MED_BOLD,
            background = CS.PROCESS_Z_TEST_TITLE_BG, foreground = CS.PROCESS_Z_TEST_TITLE_FG,
            text = '''TYPE''',
            anchor = tk.CENTER,
            bd = 0, relief = tk.GROOVE
        )



        newRelY = FS.getRelY(self.labelFrameProcessChangeCrossTypeTitle) + FS.getRelH(
            self.labelFrameProcessChangeCrossTypeTitle) + US.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_Y

        # tk.SPINBOX ELEMENTS
        # self.labelFrameProcessZTestConfidence = tk.LabelFrame(self.labelFrameProcessZTest, bd = 0)
        self.labelFrameProcessChangeCrossTypeDepths = tk.LabelFrame(self.labelFrameProcessChangeCrossType, bd = 0)
        self.labelFrameProcessChangeCrossTypeDepths.place(
            relx = 0.11, rely = newRelY,
            relwidth = 0.525, relheight = US.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_H
        )
        self.labelFrameProcessChangeCrossTypeDepths.configure(
            background = CS.PROCESS_BG
        )

        newRelX = FS.getRelX(self.labelFrameProcessChangeCrossTypeDepths) + FS.getRelW(
            self.labelFrameProcessChangeCrossTypeDepths)
        newRelY = FS.getRelY(self.labelFrameProcessChangeCrossTypeDepths)

        # BUTTON ELEMENTS
        self.labelFrameProcessChangeCrossTypeButtonElements = tk.LabelFrame(self.labelFrameProcessChangeCrossType, bd = 0)
        self.labelFrameProcessChangeCrossTypeButtonElements.place(
            relx = newRelX + 0.05, rely = newRelY,
            relwidth = 1 - (newRelX + FS.getRelX(self.labelFrameProcessChangeCrossTypeDepths)),
            # relwidth = 0.5 - 2 * FS.getRelX(self.labelFrameProcessZTestConfidence),
            relheight = 0.35
        )
        self.labelFrameProcessChangeCrossTypeButtonElements.configure(
            background = CS.PROCESS_BG
        )

        # CROSS TYPE DEPTHS tk.SPINBOX LABEL
        self.labelApplyChangeCrossTypeText = tk.Label(self.labelFrameProcessChangeCrossTypeDepths)
        self.labelApplyChangeCrossTypeText.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = US.TAB_TEST_PROCESS_CONFIDENCE_TEXT_REL_H)
        self.labelApplyChangeCrossTypeText.configure(
            font = US.FONT_DEFAULT_BOLD,
            background = CS.FG_COLOR, foreground = CS.PROCESS_BG,
            text = '''MAX TYPE'''
        )

        newRelY = FS.getRelY(self.labelApplyChangeCrossTypeText) + FS.getRelH(self.labelApplyChangeCrossTypeText)
        newRelH = 1 - FS.getRelH(self.labelApplyChangeCrossTypeText)

        # CROSS TYPE tk.SPINBOX
        self.spinBoxChangeCrossType = tk.Spinbox(self.labelFrameProcessChangeCrossTypeDepths,
                                          values = UICS.LIST_LEVELS)

        self.spinBoxChangeCrossType.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH
        )

        # Used to validate spinbox value
        stringVar = tk.StringVar()
        stringVar.trace('w', lambda nm, idx, mode, var = stringVar:
        self.validateChangeCrossTypeSpinBox(var, self.spinBoxChangeCrossType))

        # ent = Entry(root, textvariable = sv)

        self.spinBoxChangeCrossType.configure(
            textvariable = stringVar,
            # validate = "key",
            # validatecommand = vcmd,
            font = US.FONT_LARGE_BOLD,
            background = CS.WHITE, foreground = CS.FG_COLOR,
            exportselection = 0,
            buttonbackground = CS.WHITE,
            buttonuprelief = tk.FLAT, buttondownrelief = tk.GROOVE,
            justify = tk.CENTER

        )
        self.refreshSpinBoxValue(self.spinBoxChangeCrossType)



        # APPLY CROSS TYPE BUTTON
        self.buttonApplyCrossTypeSpinBox = tk.Button(self.labelFrameProcessChangeCrossTypeButtonElements, compound = tk.CENTER)

        im = PIL.Image.open(_Icon_support.TAB_ICO_CHECK).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonApplyCrossTypeSpinBox.configure(
            image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonApplyCrossTypeSpinBox.image = btn_query_z_test_icon  # < ! > Required to make images appear

        self.buttonApplyCrossTypeSpinBox.configure(
            background = CS.PROCESS_BG, foreground = CS.PROCESS_BUTTONS_FG,
            activebackground = CS.PROCESS_TITLE_BG,
            highlightbackground = CS.PROCESS_TITLE_BG,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)

        self.buttonApplyCrossTypeSpinBox.pack(anchor = tk.CENTER)
        self.buttonApplyCrossTypeSpinBox.update()


        # CROSS TYPE ELEMENTS

        # PROCESS CHANGE LEVEL OPTIONS
        # region

        # PROCESS CHANGE LEVEL PARENT
        # newRelX = FS.getRelX(self.labelFrameProcessStatTests) + FS.getRelW(self.labelFrameProcessStatTests)
        self.labelFrameProcessChangeLevel = tk.LabelFrame(self.labelFrameProcessTestOptions, bd = 0,
                                                       name = 'labelFrameProcessChangeLevel')
        self.labelFrameProcessChangeLevel.place(
            # relx = newRelX, rely = 0,
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
            # relwidth = US.TEST_PROCESS_Z_TEST_PARENT, relheight = 1
        )
        self.labelFrameProcessChangeLevel.configure(
            background = CS.PROCESS_BG
        )

        self.labelFrameProcessChangeLevelTitle = tk.Label(self.labelFrameProcessChangeLevel)
        self.labelFrameProcessChangeLevelTitle.place(
            relx = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X,
            rely = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W,
            relheight = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H)
        self.labelFrameProcessChangeLevelTitle.configure(
            font = US.FONT_MED_BOLD,
            background = CS.PROCESS_Z_TEST_TITLE_BG, foreground = CS.PROCESS_Z_TEST_TITLE_FG,
            text = '''LEVEL''',
            # text = '''Z - TEST''',
            # text = '''OPTIONS''',
            anchor = tk.CENTER,
            bd = 0, relief = tk.GROOVE
        )


        newRelY = FS.getRelY(self.labelFrameProcessChangeLevelTitle) + FS.getRelH(
            self.labelFrameProcessChangeLevelTitle) + US.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_Y

        # tk.SPINBOX ELEMENTS
        # self.labelFrameProcessZTestConfidence = tk.LabelFrame(self.labelFrameProcessZTest, bd = 0)
        self.labelFrameProcessChangeLevelDepths = tk.LabelFrame(self.labelFrameProcessChangeLevel, bd = 0)
        self.labelFrameProcessChangeLevelDepths.place(
            relx = 0.11, rely = newRelY,
            relwidth = 0.525, relheight = US.TAB_TEST_PROCESS_Z_TEST_SPINNER_ELEMENTS_REL_H
        )
        self.labelFrameProcessChangeLevelDepths.configure(
            background = CS.PROCESS_BG
        )

        newRelX = FS.getRelX(self.labelFrameProcessChangeLevelDepths) + FS.getRelW(
            self.labelFrameProcessChangeLevelDepths)
        newRelY = FS.getRelY(self.labelFrameProcessChangeLevelDepths)

        # BUTTON ELEMENTS
        self.labelFrameProcessChangeLevelButtonElements = tk.LabelFrame(self.labelFrameProcessChangeLevel, bd = 0)
        self.labelFrameProcessChangeLevelButtonElements.place(
            relx = newRelX + 0.05, rely = newRelY,
            relwidth = 1 - (newRelX + FS.getRelX(self.labelFrameProcessChangeLevelDepths)),
            # relwidth = 0.5 - 2 * FS.getRelX(self.labelFrameProcessZTestConfidence),
            relheight = 0.35
        )
        self.labelFrameProcessChangeLevelButtonElements.configure(
            background = CS.PROCESS_BG
        )

        # LEVEL DEPTHS tk.SPINBOX LABEL
        self.labelApplyChangeLevelText = tk.Label(self.labelFrameProcessChangeLevelDepths)
        self.labelApplyChangeLevelText.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = US.TAB_TEST_PROCESS_CONFIDENCE_TEXT_REL_H)
        self.labelApplyChangeLevelText.configure(
            font = US.FONT_DEFAULT_BOLD,
            background = CS.FG_COLOR, foreground = CS.PROCESS_BG,
            text = '''MAX LEVEL'''
        )

        newRelY = FS.getRelY(self.labelApplyChangeLevelText) + FS.getRelH(self.labelApplyChangeLevelText)
        newRelH = 1 - FS.getRelH(self.labelApplyChangeLevelText)

        # LEVEL tk.SPINBOX
        self.spinBoxChangeLevel = tk.Spinbox(self.labelFrameProcessChangeLevelDepths,
                                          values = UICS.LIST_LEVELS)

        self.spinBoxChangeLevel.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH
        )

        # Used to validate spinbox value
        stringVar = tk.StringVar()
        stringVar.trace('w', lambda nm, idx, mode, var = stringVar:
        self.validateChangeLevelSpinBox(var, self.spinBoxChangeLevel))

        # ent = Entry(root, textvariable = sv)

        self.spinBoxChangeLevel.configure(
            textvariable = stringVar,
            # validate = "key",
            # validatecommand = vcmd,
            font = US.FONT_LARGE_BOLD,
            background = CS.WHITE, foreground = CS.FG_COLOR,
            exportselection = 0,
            buttonbackground = CS.WHITE,
            buttonuprelief = tk.FLAT, buttondownrelief = tk.GROOVE,
            justify = tk.CENTER

        )
        self.refreshSpinBoxValue(self.spinBoxChangeLevel)

        # newRelX = FS.getRelX(self.labelFrameProcessZTestConfidence) + FS.getRelW(self.labelFrameProcessZTestConfidence)
        # newRelY = FS.getRelY(self.labelFrameProcessZTestConfidence)
        # newRelH = FS.getRelH(self.labelFrameProcessZTestConfidence)

        # APPLY LEVEL BUTTON
        self.buttonApplyLevelSpinBox = tk.Button(self.labelFrameProcessChangeLevelButtonElements, compound = tk.CENTER)

        im = PIL.Image.open(_Icon_support.TAB_ICO_CHECK).resize(_Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)
        btn_query_z_test_icon = PIL.ImageTk.PhotoImage(im)
        self.buttonApplyLevelSpinBox.configure(
            image = btn_query_z_test_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonApplyLevelSpinBox.image = btn_query_z_test_icon  # < ! > Required to make images appear

        self.buttonApplyLevelSpinBox.configure(
            background = CS.PROCESS_BG, foreground = CS.PROCESS_BUTTONS_FG,
            activebackground = CS.PROCESS_TITLE_BG,
            highlightbackground = CS.PROCESS_TITLE_BG,
            bd = 1, relief = tk.FLAT, overrelief = tk.FLAT)
        # text = '''Test''')

        self.buttonApplyLevelSpinBox.pack(anchor = tk.CENTER)
        self.buttonApplyLevelSpinBox.update()

        # endregion




        newRelX = FS.getRelX(self.labelFrameProcessTestOptions) + FS.getRelW(self.labelFrameProcessTestOptions)

        # PROCESS RUN PARENT
        self.labelFrameProcessRun = tk.LabelFrame(self.labelFrameProcessCommands, bd = 0)
        self.labelFrameProcessRun.place(
            relx = newRelX, rely = 0,
            relwidth = US.TEST_PROCESS_RUN_PARENT, relheight = 1
        )
        self.labelFrameProcessRun.configure(
            background = CS.PROCESS_BG
        )

        # PROCESS RUN MINER TITLE
        self.labelFrameProcessRunMinerTitle = tk.Label(self.labelFrameProcessRun)
        self.labelFrameProcessRunMinerTitle.place(
            relx = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_X,
            rely = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_Y,
            relwidth = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_W,
            relheight = US.TAB_TEST_PROCESS_Z_TEST_TITLE_REL_H + 0.03)
        self.labelFrameProcessRunMinerTitle.configure(
            font = US.FONT_MED_BOLD,
            background = CS.D_BLUE, foreground = CS.WHITE,
            # background = CS.PROCESS_RUN_MINER_TITLE_BG, foreground = CS.PROCESS_RUN_MINER_TITLE_FG,
            text = '''RUN''',
            anchor = tk.CENTER,
            bd = 1, relief = tk.GROOVE
        )

        # Top horizontal separator # TODO
        self.runMinerTitleSeparator = Separator(self.labelFrameProcessRunMinerTitle, orient = tk.HORIZONTAL)
        self.runMinerTitleSeparator.place(relx = 0, rely = 1, relwidth = 1)

        newRelY = FS.getRelH(self.labelFrameProcessRunMinerTitle) + FS.getRelY(self.labelFrameProcessRunMinerTitle)
        newRelH = 1 - (FS.getRelH(self.labelFrameProcessRunMinerTitle) + FS.getRelY(
            self.labelFrameProcessRunMinerTitle))
        self.labelFrameRunMiner = tk.LabelFrame(self.labelFrameProcessRun, bd = 0)
        self.labelFrameRunMiner.place(
            relx = 0, rely = newRelY,
            relwidth = 1, relheight = newRelH
        )
        self.labelFrameRunMiner.configure(
            background = CS.PROCESS_BG
        )
        self.labelFrameRunMinerElements = tk.LabelFrame(self.labelFrameRunMiner, bd = 0)
        self.labelFrameRunMinerElements.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
        )
        self.labelFrameRunMinerElements.configure(
            background = CS.PROCESS_BG
        )

        # RUN MINER BUTTON
        # region
        self.buttonRunAutomatedMiner = tk.Button(self.labelFrameRunMinerElements, compound = tk.CENTER)

        im = PIL.Image.open(_Icon_support.TAB_ICO_RIGHT_ARROW).resize(_Icon_support.RUN_ICO_SIZE, PIL.Image.ANTIALIAS)
        # im = PIL.Image.open(Icon_support.TAB_ICO_CHECK).resize(Icon_support.SELECT_ICO_SIZE, PIL.Image.ANTIALIAS)/
        btn_queue_icon = PIL.ImageTk.PhotoImage(im)

        self.buttonRunAutomatedMiner.configure(
            image = btn_queue_icon)  # , width = self.buttonQueryAddFilterA.winfo_reqheight())
        self.buttonRunAutomatedMiner.image = btn_queue_icon  # < ! > Required to make images appear

        self.buttonRunAutomatedMiner.configure(
            background = CS.SELECT_BUTTONS_BG, foreground = CS.PROCESS_BUTTONS_FG,
            highlightthickness = 0, padx = 0, pady = 0,
            bd = 0, relief = tk.FLAT, overrelief = tk.FLAT)

        self.buttonRunAutomatedMiner.place(
            relx = 0, rely = 0,
            relwidth = 1, relheight = 1
        )
        self.buttonRunAutomatedMiner.pack(side = tk.RIGHT)
        # self.buttonTestQueue.update()
        self.labelFrameRunMinerElements.pack(fill = tk.Y, expand = True)

        self.runLeftSeparator = Separator(self.labelFrameProcessRun, orient = tk.VERTICAL)
        self.runLeftSeparator.place(relx = 0, rely = 0, relheight = 1)

        # endregion

        # tk.SEPARATOR  ELEMENTS
        newRelX = FS.getRelX(self.labelFrameProcessTestOptions)  # + FS.getRelW(self.labelFrameProcessZTest)
        self.zTestRightSeparator = Separator(self.labelFrameProcessCommands, orient = tk.VERTICAL)
        self.zTestRightSeparator.place(relx = 0.335, rely = 0, relheight = 1, anchor = tk.NE)

        newRelX = FS.getRelX(self.labelFrameProcessRun)  # + FS.getRelW(self.labelFrameProcessChiSquare)
        self.runLeftSeparator = Separator(self.labelFrameProcessCommands, orient = tk.VERTICAL)
        self.runLeftSeparator.place(relx = 0.6666, rely = 0, relheight = 1)


    """
        Performs spinbox value validation for Level
    """
    def validateChangeLevelSpinBox(self, spinBoxValue, spinBox):
        newValue = spinBoxValue.get()
        try:
            intValue = int(newValue)
            # If the new value is not defined in the value mapping, don't accept it
            if intValue > UICS.MAX_LEVEL_REFERENCE:
                self.refreshSpinBoxValue(spinBox)
        except:
            self.refreshSpinBoxValue(spinBox)
        spinBox.update()


    """
        Performs spinbox value validation for Cross Type
    """
    def validateChangeCrossTypeSpinBox(self, spinBoxValue, spinBox):
        newValue = spinBoxValue.get()
        try:
            intValue = int(newValue)
            # If the new value is not defined in the value mapping, don't accept it
            if intValue > UICS.MAX_CROSS_REFERENCE:
                self.refreshSpinBoxValue(spinBox)
        except:
            self.refreshSpinBoxValue(spinBox)
        spinBox.update()


    """Reconfigures spinbox value by pressing the up then down buttons"""

    def refreshSpinBoxValue(self, spinBox):
        spinBox.invoke("buttonup")
        spinBox.invoke("buttondown")

    ''' -> Elements under the CONSOLE ("") HEADER <- '''

    def configureConsoleElements(self, parentFrame):

        # PROCESS COMMANDS PARENT
        self.labelFrameConsoleScreen = tk.LabelFrame(parentFrame, bd = 0)
        newRelW = 0.72
        newRelH = 0.8
        newRelY = 0.09  # 0.092

        self.labelFrameConsoleScreen.place(
            relx = (1 - newRelW) / 2,
            rely = newRelY,
            relwidth = newRelW,
            relheight = newRelH
        )

        self.labelFrameConsoleScreen.configure(
            background = CS.CONSOLE_BG,
            bd = 0, relief = tk.GROOVE
        )

        # TASKBAR

        self.labelConsoleScreenTaskBar = tk.Label(self.labelFrameConsoleScreen)
        self.labelConsoleScreenTaskBar.place(
            relx = 0,
            rely = 0,
            relwidth = 1,
            relheight = 0.0425  # 0.042
        )

        self.labelConsoleScreenTaskBar.configure(
            background = CS.PROCESS_LISTBOX_STATUS_BG, foreground = CS.PROCESS_LISTBOX_STATUS_FG,
            bd = US.SELECT_STATUS_LABEL_BORDER, relief = US.SELECT_STATUS_LABEL_RELIEF,
            text = US.LBL_SELECT_NO_DATA,
            font = US.SELECT_STATUS_LABEL_FONT,
        )

        # self.createCornerImage(self.labelConsoleScreenTaskBar) # TODO Create borders

        # tk.STRIPES
        self.labelConsoleStripes = tk.Label(self.labelFrameConsoleScreen, bd = 0, relief = tk.GROOVE)
        newRelY = FS.getRelY(self.labelConsoleScreenTaskBar) + FS.getRelH(self.labelConsoleScreenTaskBar)
        newRelH = 0.014  # 0.008
        self.labelConsoleStripes.place(
            relx = 0,
            rely = newRelY,
            relwidth = 1,
            relheight = newRelH
        )

        im = PIL.Image.open(_Icon_support.TEXTURE_STRIPE_CYAN)
        texture_cyan_stripes = PIL.ImageTk.PhotoImage(im)
        self.labelConsoleStripes.configure(
            image = texture_cyan_stripes,
            anchor = tk.SW
        )
        self.labelConsoleStripes.image = texture_cyan_stripes  # < ! > Required to make images appear

        # CONSOLE tk.SCREEN
        self.configureConsoleScreenElements()

        # CONSOLE CONTROLS

        self.labelFrameConsoleControls = tk.LabelFrame(self.labelFrameConsoleScreen)

        sizeReference = self.labelConsoleScreenTaskBar
        newRelY = FS.getRelY(self.listConsoleScreen) + FS.getRelH(self.listConsoleScreen)
        self.labelFrameConsoleControls.place(
            relx = FS.getRelX(sizeReference) + 0.025,
            rely = newRelY + 0.01,
            relwidth = 0.95,
            relheight = FS.getRelH(sizeReference) * 2 * 2 / 3
        )

        self.labelFrameConsoleControls.configure(
            background = CS.WHITE,
            bd = 0, relief = tk.GROOVE
        )

        # tk.SHOW ALL CONSOLE
        self.buttonConsoleAll = tk.Button(self.labelFrameConsoleControls)
        self.buttonConsoleAll.place(
            relx = 0.008,
            rely = 0.01,
            relwidth = 0.24,
            relheight = 0.98)

        self.buttonConsoleAll.configure(
            text = '''ALL''',
            background = CS.WHITE,
            foreground = CS.D_BLUE,
            bd = 1, relief = tk.FLAT, overrelief = tk.GROOVE,
            activebackground = CS.L_GRAY,
            activeforeground = CS.DATASET_BTN_FG_ACTIVE,
            disabledforeground = CS.FG_DISABLED_COLOR
        )

        # tk.SHOW Z-TEST CONSOLE
        self.btnConsoleInput = tk.Button(self.labelFrameConsoleControls)
        buttonReference = self.buttonConsoleAll
        newRelX = FS.getRelX(buttonReference) + FS.getRelW(buttonReference) + FS.getRelX(self.buttonConsoleAll)

        self.btnConsoleInput.place(
            relx = newRelX,
            rely = FS.getRelY(buttonReference),
            relwidth = FS.getRelW(buttonReference),
            relheight = FS.getRelH(buttonReference)
        )

        self.btnConsoleInput.configure(
            text = '''INPUT''',
            background = buttonReference['background'],
            foreground = buttonReference['foreground'],
            bd = buttonReference['bd'], relief = buttonReference['relief'], overrelief = buttonReference['overrelief'],
            activebackground = buttonReference['activebackground'],
            activeforeground = buttonReference['activeforeground'],
            disabledforeground = buttonReference['disabledforeground'],
        )

        # tk.SHOW CHI-SQUARE CONSOLE
        self.btnConsoleSearch = tk.Button(self.labelFrameConsoleControls)
        buttonReference = self.btnConsoleInput
        newRelX = FS.getRelX(buttonReference) + FS.getRelW(buttonReference) + FS.getRelX(self.buttonConsoleAll)

        self.btnConsoleSearch.place(
            relx = newRelX,
            rely = FS.getRelY(buttonReference),
            relwidth = FS.getRelW(buttonReference),
            relheight = FS.getRelH(buttonReference)
        )

        self.btnConsoleSearch.configure(
            text = '''SRCH''',
            background = buttonReference['background'],
            foreground = buttonReference['foreground'],
            bd = buttonReference['bd'], relief = buttonReference['relief'], overrelief = buttonReference['overrelief'],
            activebackground = buttonReference['activebackground'],
            activeforeground = buttonReference['activeforeground'],
            disabledforeground = buttonReference['disabledforeground'],
        )

        # tk.SHOW QUEUE CONSOLE
        self.buttonConsoleQueue = tk.Button(self.labelFrameConsoleControls)
        buttonReference = self.btnConsoleSearch
        newRelX = FS.getRelX(buttonReference) + FS.getRelW(buttonReference) + FS.getRelX(self.buttonConsoleAll)

        self.buttonConsoleQueue.place(
            relx = newRelX,
            rely = FS.getRelY(buttonReference),
            relwidth = FS.getRelW(buttonReference),
            relheight = FS.getRelH(buttonReference)
        )

        self.buttonConsoleQueue.configure(
            text = '''RES''',
            background = buttonReference['background'],
            foreground = buttonReference['foreground'],
            bd = buttonReference['bd'], relief = buttonReference['relief'], overrelief = buttonReference['overrelief'],
            activebackground = buttonReference['activebackground'],
            activeforeground = buttonReference['activeforeground'],
            disabledforeground = buttonReference['disabledforeground'],
        )

        # Add console borders
        self.createLabelBorders(self.labelFrameConsoleScreen)

    def configureConsoleScreenElements(self):

        self.scrollConsoleScreen = tk.Scrollbar(self.labelFrameConsoleScreen, orient = tk.VERTICAL,
                                             name = 'scrollConsoleScreen')

        newRelH = 0.8
        newRelY = FS.getRelY(self.labelConsoleStripes) + FS.getRelH(self.labelConsoleStripes)

        # BASIC CONSOLE tk.SCREEN
        # self.listConsoleScreen = tk.Listbox(self.scrollConsoleScreen, name = 'listConsoleScreen')
        self.listConsoleScreen = tk.Text(self.labelFrameConsoleScreen, name = 'listConsoleScreen')
        # self.listConsoleScreen.insert(END, "A really \n long \n text \n to \n test \n this")
        self.listConsoleScreen.place(
            relx = 0,
            rely = newRelY,
            relwidth = 1,
            relheight = newRelH
        )
        self.listConsoleScreen.configure(
            yscrollcommand = self.scrollConsoleScreen.set,
            background = CS.PROCESS_LISTBOX_BG, foreground = CS.PROCESS_LISTBOX_FG,
            selectbackground = CS.SALMON_LIGHT, selectforeground = CS.PROCESS_LISTBOX_FG,
            font = US.FONT_AM_LISTBOX_SMALL,
            bd = US.SELECT_LISTBOX_BORDER, relief = US.SELECT_LISTBOX_RELIEF,

            cursor = "arrow",
            state = tk.DISABLED,
            padx = 0
        )

        self.listConsoleScreen.tag_configure(const.CONSOLE.DEFAULT,
                                             lmargin1 = 5,
                                             lmargin2 = 5,
                                             rmargin = 5,

                                             spacing1 = 0,
                                             spacing2 = 0,
                                             spacing3 = 0,
                                             justify = tk.LEFT)

        # QUEUE tk.SCREEN listConsoleQueueScreen
        # region
        self.listConsoleQueueScreen = tk.Text(self.labelFrameConsoleScreen, name = 'listConsoleQueueScreen')
        screenWidget = self.listConsoleQueueScreen
        screenReference = self.listConsoleScreen

        screenWidget.place(
            relx = FS.getRelX(screenReference),
            rely = FS.getRelY(screenReference),
            relwidth = FS.getRelW(screenReference),
            relheight = FS.getRelH(screenReference)
        )
        screenWidget.configure(
            background = screenReference['background'],
            foreground = screenReference['foreground'],

            selectbackground = screenReference['selectbackground'],
            selectforeground = screenReference['selectforeground'],

            font = screenReference['font'],
            bd = screenReference['bd'],
            relief = screenReference['relief'],

            cursor = screenReference['cursor'],
            state = screenReference['state'],
            padx = screenReference['padx']
        )
        screenWidget.tag_configure(const.CONSOLE.DEFAULT,
                                   lmargin1 = 5,
                                   lmargin2 = 5,
                                   rmargin = 5,

                                   spacing1 = 0,
                                   spacing2 = 0,
                                   spacing3 = 0,
                                   justify = tk.LEFT)
        # endregion

        # INPUT CONSOLE tk.SCREEN listConsoleZTestScreen
        # region
        self.listConsoleZTestScreen = tk.Text(self.labelFrameConsoleScreen, name = 'listConsoleInputScreen')
        screenWidget = self.listConsoleZTestScreen
        screenReference = self.listConsoleScreen

        screenWidget.place(
            relx = FS.getRelX(screenReference),
            rely = FS.getRelY(screenReference),
            relwidth = FS.getRelW(screenReference),
            relheight = FS.getRelH(screenReference)
        )
        screenWidget.configure(
            background = screenReference['background'],
            foreground = screenReference['foreground'],

            selectbackground = screenReference['selectbackground'],
            selectforeground = screenReference['selectforeground'],

            font = screenReference['font'],
            bd = screenReference['bd'],
            relief = screenReference['relief'],

            cursor = screenReference['cursor'],
            state = screenReference['state'],
            padx = screenReference['padx']
        )
        screenWidget.tag_configure(const.CONSOLE.DEFAULT,
                                   lmargin1 = 5,
                                   lmargin2 = 5,
                                   rmargin = 5,

                                   spacing1 = 0,
                                   spacing2 = 0,
                                   spacing3 = 0,
                                   justify = tk.LEFT)
        # endregion

        # tk.SEARCH CONSOLE tk.SCREEN listConsoleChiSquareScreen
        # region
        self.listConsoleChiSquareScreen = tk.Text(self.labelFrameConsoleScreen, name = 'listConsoleSearchScreen')
        screenWidget = self.listConsoleChiSquareScreen
        screenReference = self.listConsoleScreen

        screenWidget.place(
            relx = FS.getRelX(screenReference),
            rely = FS.getRelY(screenReference),
            relwidth = FS.getRelW(screenReference),
            relheight = FS.getRelH(screenReference)
        )
        screenWidget.configure(
            background = screenReference['background'],
            foreground = screenReference['foreground'],

            selectbackground = screenReference['selectbackground'],
            selectforeground = screenReference['selectforeground'],

            font = screenReference['font'],
            bd = screenReference['bd'],
            relief = screenReference['relief'],

            cursor = screenReference['cursor'],
            state = screenReference['state'],
            padx = screenReference['padx']
        )
        screenWidget.tag_configure(const.CONSOLE.DEFAULT,
                                   lmargin1 = 5,
                                   lmargin2 = 5,
                                   rmargin = 5,

                                   spacing1 = 0,
                                   spacing2 = 0,
                                   spacing3 = 0,
                                   justify = tk.LEFT)
        # endregion

        self.scrollConsoleScreen.place(
            relx = 0,
            rely = 0,
            relwidth = 0,
            relheight = 0
        )
        self.scrollConsoleScreen.configure(
            background = CS.D_BLUE,
            bd = 0,
        )

        # Configure screen dictionary
        self.dictConsoleScreens = {
            self.listConsoleScreen: const.SCREENS.ALL,
            self.listConsoleQueueScreen: const.SCREENS.QUEUE,
            self.listConsoleZTestScreen: const.SCREENS.Z_TEST,
            self.listConsoleChiSquareScreen: const.SCREENS.CHI_SQUARE,
        }

    # endregion


    """ >>> HELPER FUNCTIONS UI ELEMENTS <<< """

    # region

    def getDatasetCountA(self):
        return str(self.datasetCountA)

    def getDatasetCountB(self):
        return str(self.datasetCountB)

    def createCornerImage(self, cornerParent):

        labelNE = tk.Label(cornerParent)
        im = PIL.Image.open(
            _Icon_support.CORNER_ROUND_NE)  # .resize(Icon_support.CORNER_ICO_SIZE_SMALL, PIL.Image.ANTIALIAS)
        corner_round_ne = PIL.ImageTk.PhotoImage(im)
        labelNE.place(
            relx = 0,
            rely = 0,
            relwidth = 1,
            relheight = 1
        )
        labelNE.configure(
            image = corner_round_ne)
        labelNE.image = corner_round_ne  # < ! > Required to make images appear
        labelNE.configure(background = CS.PALE_ORANGE)  # cornerParent['background'])
        labelNE.pack()
        # labelNE.pack(side = tk.RIGHT, fill = tk.Y, expand = True, anchor = tk.CENTER)

    def createLabelSeparator(self, separatorParent, span, isVertical, color, thickness = 1, coordinate = 0,
                             specifiedAnchor = tk.NW):

        separatorHolder = tk.Label(separatorParent)
        if isVertical:
            newRelY = (1 - (1 - span)) / 2
            separatorHolder.place(
                relx = coordinate,
                rely = newRelY,
                relheight = span,  # TODO To adjust border height, just adjust this
                width = thickness,
                anchor = specifiedAnchor
            )
        else:
            newRelX = (1 - (1 - span)) / 2
            separatorHolder.place(
                relx = newRelX,
                rely = coordinate,
                relwidth = span,  # TODO To adjust border height, just adjust this
                height = thickness,
                anchor = specifiedAnchor
            )
        separatorHolder.configure(background = color)
        return separatorHolder

    def createLabelBorders(self, borderParent, color = CS.DISABLED_D_BLUE):

        # COLORED tk.SEPARATOR
        topBorder = self.createLabelSeparator(
            borderParent, 1,
            False, color
        )

        bottomBorder = self.createLabelSeparator(
            borderParent, 1,
            False, color,
            coordinate = 0.9985
        )

        leftBorder = self.createLabelSeparator(
            borderParent, 1,
            True, color
        )

        rightBorder = self.createLabelSeparator(
            borderParent, 1,
            True, color,
            coordinate = 0.995
        )

    # endregion

    def getMainFrame(self):
        return self.testTabParentFrame


    """ >>> GETTERS FOR TO-BIND ELEMENTS (e.g. buttons, listboxes) <<< """

    # region GETTERS
    def getParentFrame(self):
        return self.__parentFrame

    def getBtnLoadSource(self):
        return self.btnLoadSource

    def getButtonQuerySetDataB(self):
        return self.buttonQuerySetDataB

    def getBtnAddFeatureCode(self):
        return self.btnAddFeatureCode

    def getBtnApplySelectedFeatureSearch(self):
        return None  # self.btnApplySelectedFeatureSearch

    def getBtnSearchResultsLeft(self):
        return self.btnSearchResultsLeft

    def getBtnSearchResultsRight(self):
        return self.btnSearchResultsRight

    def getBtnCompareSelectedFeatureGroups(self):
        return self.btnCompareSelectedFeatureGroups

    def getButtonApplyLevelSpinBox(self):
        return self.buttonApplyLevelSpinBox

    def getButtonApplyCrossTypeSpinBox(self):
        return self.buttonApplyCrossTypeSpinBox

    def getButtonRunAutomatedMiner(self):
        return self.buttonRunAutomatedMiner

    def getButtonQueryResetFilterA(self):
        return self.buttonQueryResetFilterA

    def getButtonQueryResetFilterB(self):
        return self.buttonQueryResetFilterB

    def getButtonChooseChiSquare(self):
        return self.buttonChooseCrossType

    def getButtonChooseZTest(self):
        return self.buttonChooseCrossLevel

    def getButtonConsoleAll(self):
        return self.buttonConsoleAll

    def getButtonConsoleZTest(self):
        return self.btnConsoleInput

    def getButtonConsoleChiSquare(self):
        return self.btnConsoleSearch

    def getButtonConsoleQueue(self):
        return self.buttonConsoleQueue

    def getListConsoleScreen(self):
        return self.listConsoleScreen

    def getListConsoleZTestScreen(self):
        return self.listConsoleZTestScreen

    def getListConsoleChiSquareScreen(self):
        return self.listConsoleChiSquareScreen

    def getListConsoleQueueScreen(self):
        return self.listConsoleQueueScreen


    def getLblLeftResultFocusValue(self):
        return self.lblLeftResultFocusValue

    def getRightResultFocusValue(self):
        return self.lblRightResultFocusValue

    def getLabelQueryDataFeatureName(self):
        return self.labelQueryDataFeatureName

    def getListResultsLeft(self):
        return self.listResultsLeft

    def getBtnSearchResultsLeft(self):
        return self.btnSearchResultsLeft

    def getListResultsRight(self):
        return self.listResultsRight

    def getEntryQueryLeft(self):
        return self.entryQueryLeft

    def getEntryQueryRight(self):
        return self.entryQueryRight

    def getLabelOverlayFilterListData(self):
        return self.labelOverlayFilterListData

    def getLabelFrameFilterListData(self):
        return self.labelFrameFilterListData

    def getLblFilterResultStripes(self):
        return self.lblResultStripes

    def getLblStatusSourceFolder(self):
        return self.lblStatusSourceFolder

    def getLabelQuerySetDataStatusB(self):
        return self.lblFeatureGroupsHeader

    def getLblStripesFeatureCodes(self):
        return self.lblStripesFeatureCodes
    def getLblStripesFeatureGroups(self):
        return self.lblStripesFeatureGroups

    def getLblSelectedFeatureCount(self):
        return self.lblSelectedFeatureCount

    def getLblSelectedGroupCount(self):
        return self.lblSelectedGroupCount

    def getEntrySourceFolderFilename(self):
        return self.entrySourceFolderFilename

    def getEntryQuerySetDataB(self):
        return self.entryQuerySetDataB

    def getDropQueryLeft(self):
        return self.dropQueryLeft

    def getDropQueryRight(self):
        return self.dropQueryRight

    def getListFeatureCodes(self):
        return self.listFeatureCodes

    def getListFeatureGroups(self):
        return self.listFeatureGroups


    def getLabelFrameProcessChangeCrossType(self):
        return self.labelFrameProcessChangeCrossType
        # return self.labelFrameProcessChangeLevel


    def getLabelFrameProcessChangeLevel(self):
        return self.labelFrameProcessChangeLevel
        # return self.labelFrameProcessChangeCrossType

    def getSpinBoxChangeLevel(self):
        return self.spinBoxChangeLevel

    def getSpinBoxChangeCrossType(self):
        return self.spinBoxChangeCrossType

    def getDictConsoleScreens(self):
        return self.dictConsoleScreens

    def getLabelConsoleScreenTaskBar(self):
        return self.labelConsoleScreenTaskBar

    # def getLabelQueueCount(self):
    #     return self.labelQueueCount

    def getButtonQueryZTestSvP(self):
        return self.buttonQueryZTestSvP

    def getComboQueryTest(self):
        return self.comboQueryTest

    # endregion
